using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.Linq;
using UnityEngine.SceneManagement;

public class AIVsAI_Control : MonoBehaviour
{
    private GameObject Mark_Cube_O;

    private GameObject Cubes_CubeG;
    private GameObject Cubes_CubeH;
    private GameObject Cubes_CubeN1;
    private GameObject Cubes_CubeN2;
    private GameObject Cubes_CubeN3;
    private GameObject Cubes_CubeN4;
    private GameObject Cubes_CubeN5;
    private GameObject Cubes_CubeS;
    private GameObject Cubes_CubeP;
    private GameObject Cubes_CubeD;

    private GameObject CubeG;
    private GameObject CubeH;
    private GameObject CubeN;
    private GameObject CubeS;
    private GameObject CubeP;
    private GameObject CubeD;

    private PlayerVsAI_Control PlayerVsAI_Control;

    private AudioSource AudioSource_AudioSource1;
    private AudioSource AudioSource_AudioSource2;
    private AudioSource AudioSource_AudioSource3;
    private AudioSource AudioSource_AudioSource4;
    private AudioSource AudioSource_AudioSource5;
    private AudioSource AudioSource_AudioSource6;
    private AudioSource AudioSource_AudioSource7;
    private AudioSource AudioSource_AudioSource8;
    private AudioSource AudioSource_AudioSource9;
    private AudioSource AudioSource_AudioSource10;
    private AudioSource AudioSource_AudioSource11;
    private AudioSource AudioSource_AudioSource12;
    private AudioSource AudioSource_AudioSource13;
    private AudioSource AudioSource_AudioSource14;
    private AudioSource AudioSource_AudioSource15;
    private AudioSource AudioSource_AudioSource16;
    private AudioSource AudioSource_AudioSource17;
    private AudioSource AudioSource_AudioSource18;

    private List<GameObject> ListGameObject_CubeG = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeH = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeN1 = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeN2 = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeN3 = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeN4 = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeN5 = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeS = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeP = new List<GameObject> { };
    private List<GameObject> ListGameObject_CubeD = new List<GameObject> { };

    private List<int> ListInt_ColorOfCubeG = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    private List<int> ListInt_ColorOfCubeH = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeN1 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeN2 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeN3 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeN4 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeN5 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> ListInt_ColorOfCubeS = new List<int> { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    private List<int> ListInt_ColorOfCubeP = new List<int> { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

    private List<int> ListInt_TypeOfCubeG = new List<int> {10,10,10,10,10,10,10,10,10,10,10,10,10,10,
                                                           10,10,10,10,10,10,10,10,10,10,10,10,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10};

    private List<List<int>> ListListInt_DataOfBlock = new List<List<int>> { new List<int> { 0 },
                                                                            new List<int> { 14, 15 },
                                                                            new List<int> { 0, 1, 15 }, new List<int> { 14, 15, 16 },
                                                                            new List<int> { 0, 1, 14, 15 }, new List<int> { 14, 15, 16, 29 }, new List<int> { 14, 15, 29, 30 }, new List<int> { 15, 16, 28, 29 }, new List<int> { 14, 15, 16, 30 }, new List<int> { 14, 15, 16, 28 }, new List<int> { 28, 29, 30, 31 },
                                                                            new List<int> { 14, 15, 16, 29, 30 }, new List<int> { 14, 15, 16, 28, 29 }, new List<int> { 14, 15, 16, 28, 30 }, new List<int> { 1, 14, 15, 16, 29 }, new List<int> { 0, 1, 15, 29, 30 }, new List<int> { 1, 2, 15, 28, 29 }, new List<int> { 0, 1, 2, 16, 30 }, new List<int> { 1, 14, 15, 16, 30 }, new List<int> { 1, 14, 15, 16, 28 }, new List<int> { 1, 15, 28, 29, 30 }, new List<int> { 0, 1, 15, 16, 30 },
                                                                            new List<int> { 0, 1, 2, 15, 16, 30 }, new List<int> { 1, 14, 15, 16, 28, 30 }, new List<int> { 1, 14, 15, 16, 29, 30 }, new List<int> { 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 14, 16, 28, 29, 30 }, new List<int> { 0, 14, 15, 16, 29, 30 }, new List<int> { 2, 14, 15, 16, 28, 29 }, new List<int> { 2, 14, 15, 16, 28, 30 }, new List<int> { 0, 14, 15, 16, 28, 30 }, new List<int> { 1, 15, 16, 28, 29, 30 }, new List<int> { 1, 14, 15, 28, 29, 30 }, new List<int> { 14, 15, 16, 28, 29, 30 } ,
                                                                            new List<int> { 1, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 28 }, new List<int> { 0, 2, 14, 15, 16, 29, 30 }, new List<int> { 0, 2, 14, 15, 16, 28, 29 }, new List<int> { 0, 1, 14, 15, 16, 29, 30 }, new List<int> { 0, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 15, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 29 } ,
                                                                            new List<int> { 0, 1, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 28, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 29, 30 },
                                                                            new List<int> { 0, 1, 2, 14, 15, 16, 28, 29, 30 }};
    private List<List<int>> ListListInt_DataOfLetter = new List<List<int>> { new List<int> { 0,1,2,5,7,10,12,15,17,20,21,22 }, new List<int> { 0,1,2,6,11,15,16,21 }, new List<int> { 0,1,2,5,10,11,12,17,20,21,22 }, new List<int> { 0,1,2,7,10,11,12,17,20,21,22 }, new List<int> { 2,7,10,11,12,15,17,20,22 }, new List<int> { 0,1,2,7,10,11,12,15,20,21,22 }, new List<int> { 0,1,2,5,7,10,11,12,15,20,21,22 }, new List<int> { 2,7,12,17,20,21,22 }, new List<int> { 0,1,2,5,7,10,11,12,15,17,20,21,22 }, new List<int> { 0,1,2,7,10,11,12,15,17,20,21,22 },new List<int> { 6,10,11,12,16 },new List<int> { 10,11,12 },
                                                                             new List<int> { 0,3,5,6,7,8,10,13,15,18,21,22 }, new List<int> { 0,1,2,5,8,10,11,12,15,18,20,21,22 }, new List<int> {  1,2,5,8,10,15,18,21,22 }, new List<int> { 0,1,2,5,8,10,13,15,18,20,21,22 }, new List<int> { 0,1,2,3,5,10,11,12,15,20,21,22,23 }, new List<int> { 0,5,10,11,12,15,20,21,22,23 }, new List<int> { 1,2,3,5,8,10,12,13,15,21,22,23 }, new List<int> { 0,3,5,8,10,11,12,13,15,18,20,23 }, new List<int> { 0,1,2,6,11,16,20,21,22 }, new List<int> { 1,5,7,12,17,21,22,23 }, new List<int> { 0,3,5,7,10,11,15,17,20,23 }, new List<int> { 0,1,2,3,5,10,15,20 }, new List<int> { 0,4,5,9,10,12,14,15,16,18,19,20,24 }, new List<int> { 0,4,5,8,9,10,12,14,15,16,19,20,24 }, new List<int> { 1,2,5,8,10,13,15,18,21,22 }, new List<int> { 0,5,6,7,10,13,15,18,20,21,22 }, new List<int> { 1,3,5,7,10,13,15,18,21,22 }, new List<int> { 0,3,5,6,7,10,13,15,18,20,21,22 }, new List<int> { 0,1,2,8,11,12,15,21,22,23 }, new List<int> { 2,7,12,17,20,21,22,23,24 }, new List<int> { 1,2,5,8,10,13,15,18,20,23 }, new List<int> { 2,6,8,10,14,15,19,20,24 }, new List<int> { 1,3,5,7,9,10,14,15,19,20,24 }, new List<int> { 0,4,6,8,12,16,18,20,24 }, new List<int> { 2,7,12,16,18,20,24 }, new List<int> { 0,1,2,3,4,6,12,18,20,21,22,23,24 },
                                                                             new List<int> { 0,10,11,12,17,20,21,22 },new List<int> { 0,10,15,20 },new List<int> {  } };

    private List<List<int>> ListListInt_Sentence = new List<List<int>> { };

    private List<List<int>> ListListInt_SideLengthOfBlock = new List<List<int>> { new List<int> { 1, 1, 1, 1 },
                                                                                  new List<int> { 2, 1, 2, 1 },
                                                                                  new List<int> { 2, 2, 2, 2 }, new List<int> { 3, 1, 3, 1 },
                                                                                  new List<int> { 2, 2, 2, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 4, 1, 4, 1 },
                                                                                  new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                  new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 2, 3, 2 },
                                                                                  new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                  new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                  new List<int> { 3, 3, 3, 3 } };
    private List<int> ListInt_LowerSideLengthOfLetter = new List<int> { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 3, 1, 2 };

    private List<List<int>> ListListInt_StartCoordinateOfBlock = new List<List<int>> { new List<int> { 380, 381, 382, 383, 384, 385, 386, 387, 388, 389 },
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386, 387, 388 } ,
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386, 387 },
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386 } };

    private List<List<int>> ListListInt_ColorOfBlock = new List<List<int>> { new List<int> { 1,2,3,2,3,1,3,1,2 }, new List<int> { 1,3,2,3,2,1,2,1,3 }, new List<int> { 2,1,3,1,3,2,3,2,1 }, new List<int> { 2,3,1,3,1,2,1,2,3 }, new List<int> { 3,1,2,1,2,3,2,3,1 }, new List<int> { 3,2,1,2,1,3,1,3,2 },
                                                                             new List<int> { 1,2,3,3,1,2,2,3,1 }, new List<int> { 1,3,2,2,1,3,3,2,1 }, new List<int> { 2,1,3,3,2,1,1,3,2 }, new List<int> { 2,3,1,1,2,3,3,1,2 }, new List<int> { 3,1,2,2,3,1,1,2,3 }, new List<int> { 3,2,1,1,3,2,2,1,3 }};
    private List<List<int>> ListListInt_ColorOfNextBlock = new List<List<int>> { };
    private List<int> ListInt_ColorOfNextBlock = new List<int> { };

    private List<int> ListInt_DirectionOfBlock = new List<int> { 1, 2, 3, 4 };
    private List<int> ListInt_DirectionOfNextBlock = new List<int> { };

    private List<int> ListInt_Block1 = new List<int> { 1 };
    private List<int> ListInt_Block2 = new List<int> { 2 };
    private List<int> ListInt_Block3 = new List<int> { 3, 4 };
    private List<int> ListInt_Block4 = new List<int> { 5, 6, 7, 8, 9, 10, 11 };
    private List<int> ListInt_Block5 = new List<int> { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
    private List<int> ListInt_Block6 = new List<int> { 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 };
    private List<int> ListInt_Block7 = new List<int> { 35, 36, 37, 38, 39, 40, 41, 42, 43 };
    private List<int> ListInt_Block8 = new List<int> { 44, 45, 46 };
    private List<int> ListInt_Block9 = new List<int> { 47 };

    private List<int> ListInt_NextBlock = new List<int> { };
    private List<int> ListInt_NextBlock1 = new List<int> { };
    private List<int> ListInt_NextBlock2 = new List<int> { };
    private List<int> ListInt_NextBlock3 = new List<int> { };
    private List<int> ListInt_NextBlock4 = new List<int> { };
    private List<int> ListInt_NextBlock5 = new List<int> { };
    private List<int> ListInt_NextBlock6 = new List<int> { };
    private List<int> ListInt_NextBlock7 = new List<int> { };
    private List<int> ListInt_NextBlock8 = new List<int> { };
    private List<int> ListInt_NextBlock9 = new List<int> { };

    private List<float> ListFloat_RateOfFreeFall = new List<float> { 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f, 0.65f };

    private List<int> ListInt_OverlapCubeG = new List<int> { };

    private int CurrentBlock;
    private List<int> ListInt_DataOfCurrentBlock = new List<int> { };
    private List<int> ListInt_SideLengthOfCurrentBlock = new List<int> { };
    private int CoordinateOfCurrentBlock;
    private int DirectionOfCurrentBlock;
    private int ColorOfCurrentBlock;

    private int TemporaryBlock1;
    private List<int> ListInt_DataOfTemporaryBlock1 = new List<int> { };
    private List<int> ListInt_SideLengthOfTemporaryBlock1 = new List<int> { };
    private int DirectionOfTemporaryBlock1;
    private int ColorOfTemporaryBlock1;

    private int TemporaryBlock2;
    private List<int> ListInt_DataOfTemporaryBlock2 = new List<int> { };
    private List<int> ListInt_SideLengthOfTemporaryBlock2 = new List<int> { };
    private int DirectionOfTemporaryBlock2;
    private int ColorOfTemporaryBlock2;

    private int HoldBlock;
    private List<int> ListInt_DataOfHoldBlock = new List<int> { };
    private List<int> ListInt_SideLengthOfHoldBlock = new List<int> { };
    private int DirectionOfHoldBlock;
    private int ColorOfHoldBlock;

    private int NextBlock1;
    private List<int> ListInt_DataOfNextBlock1 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock1 = new List<int> { };
    private int StartCoordinateOfNextBlock1;
    private int DirectionOfNextBlock1;
    private int ColorOfNextBlock1;

    private int NextBlock2;
    private List<int> ListInt_DataOfNextBlock2 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock2 = new List<int> { };
    private int StartCoordinateOfNextBlock2;
    private int DirectionOfNextBlock2;
    private int ColorOfNextBlock2;

    private int NextBlock3;
    private List<int> ListInt_DataOfNextBlock3 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock3 = new List<int> { };
    private int StartCoordinateOfNextBlock3;
    private int DirectionOfNextBlock3;
    private int ColorOfNextBlock3;

    private int NextBlock4;
    private List<int> ListInt_DataOfNextBlock4 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock4 = new List<int> { };
    private int StartCoordinateOfNextBlock4;
    private int DirectionOfNextBlock4;
    private int ColorOfNextBlock4;

    private int NextBlock5;
    private List<int> ListInt_DataOfNextBlock5 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock5 = new List<int> { };
    private int StartCoordinateOfNextBlock5;
    private int DirectionOfNextBlock5;
    private int ColorOfNextBlock5;

    private int NextBlock6;
    private List<int> ListInt_DataOfNextBlock6 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock6 = new List<int> { };
    private int StartCoordinateOfNextBlock6;
    private int DirectionOfNextBlock6;
    private int ColorOfNextBlock6;

    private int NextBlock7;
    private List<int> ListInt_DataOfNextBlock7 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock7 = new List<int> { };
    private int StartCoordinateOfNextBlock7;
    private int DirectionOfNextBlock7;
    private int ColorOfNextBlock7;

    private int NextBlock8;
    private List<int> ListInt_DataOfNextBlock8 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock8 = new List<int> { };
    private int StartCoordinateOfNextBlock8;
    private int DirectionOfNextBlock8;
    private int ColorOfNextBlock8;

    private int NextBlock9;
    private List<int> ListInt_DataOfNextBlock9 = new List<int> { };
    private List<int> ListInt_SideLengthOfNextBlock9 = new List<int> { };
    private int StartCoordinateOfNextBlock9;
    private int DirectionOfNextBlock9;
    private int ColorOfNextBlock9;

    private int Score_VsAI = 0;
    private int NumberOfCombos_VsAI = 0;
    private int NumberOfRens_VsAI = 0;
    private int CountOfContinuousSummonedCurrentBlock = 0;

    public static int TotalNumberOfAttack = 0;
    public static int TotalNumberOfGotAttack = 0;
    public static int TotalNumberOfGotAttack_O = 0;

    private float RateOfFreeFall;

    private Color Albedo_Default = new Color(1, 1, 1, 1);
    private Color Emission_Default = new Color(0, 0, 0, 0);

    private Color Albedo_White = new Color(1, 1, 1, 1);
    private Color Emission_White = new Color(1, 1, 1, 10);

    private Color Albedo_DarkWhite = new Color(0.25f, 0.25f, 0.25f, 1);
    private Color Emission_DarkWhite = new Color(0.25f, 0.25f, 0.25f, 0);

    private Color Albedo_Red = new Color(1, 0, 0, 1);
    private Color Emission_Red = new Color(1, 0, 0.5f, 10);

    private Color Albedo_DarkRed = new Color(0.25f, 0, 0.125f, 1);
    private Color Emission_DarkRed = new Color(0.25f, 0, 0.125f, 10);

    private Color Albedo_Green = new Color(0, 1, 0, 1);
    private Color Emission_Green = new Color(0, 1, 0.25f, 10);

    private Color Albedo_DarkGreen = new Color(0, 0.25f, 0, 1);
    private Color Emission_DarkGreen = new Color(0, 0.25f, 0.0625f, 10);

    private Color Albedo_Blue = new Color(0, 0, 1, 1);
    private Color Emission_Blue = new Color(0, 0.5f, 1, 10);

    private Color Albedo_DarkBlue = new Color(0, 0, 0.25f, 1);
    private Color Emission_DarkBlue = new Color(0, 0.125f, 0.25f, 10);

    private Color Albedo_Yellow = new Color(1, 1, 0, 1);
    private Color Emission_Yellow = new Color(1, 1, 0, 10);

    private string PlayersName;
    private List<int> ListInt_PlayersName = new List<int> { };

    private bool CanUseShortCutKey = true;
    private bool Control = false;
    private bool CanPlayFallingSound = true;
    private bool CanHoldCurrentBlock = true;
    private bool CanInvokeIntermittentRightMovement_CurrentBlock = true;
    private bool CanInvokeIntermittentLeftMovement_CurrentBlock = true;
    public bool CanInvokeDisassembly_CurrentBlock = true;
    private bool CanIncreaseNumberOfRens_VsAI = true;







    private bool CanInvokeSetting_Priority = true;
    private bool CanInvokeResetting_Priority = false;

    private int PriorityOfCurrentBlock = 0;

    private int ColorOfFirstCandidate = 0;
    private int ColorOfSecondCandidate = 0;
    private int ColorOfThirdCandidate = 0;

    private int BestCoordinateOfFirstCandidate;
    private int BestCoordinateOfSecondCandidate;
    private int BestCoordinateOfThirdCandidate;

    private int BestPosXOfFirstCandidate;
    private int BestPosXOfSecondCandidate;
    private int BestPosXOfThirdCandidate;

    private int PosXOfCurrentBlock;
    private int RotationOfCurrentBlock;

    private List<int> ListInt_PriorityOfCubeG = new List<int> {10,10,10,10,10,10,10,10,10,10,10,10,10,10,
                                                           10,10,10,10,10,10,10,10,10,10,10,10,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10,
                                                           10,10,0,0,0,0,0,0,0,0,0,0,10,10};
    private List<int> ListInt_CountOfColor = new List<int> { 0, 0, 0 };

    private List<int> ListInt_BestCoordinateOfFirstCandidate = new List<int> { };
    private List<int> ListInt_BestCoordinateOfSecondCandidate = new List<int> { };
    private List<int> ListInt_BestCoordinateOfThirdCandidate = new List<int> { };


























    void Start()
    {
        //yield return null;

        Mark_Cube_O = GameObject.Find("Mark_Cube_O").gameObject;

        Cubes_CubeG = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeG").gameObject;
        Cubes_CubeH = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeH").gameObject;
        Cubes_CubeN1 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN1").gameObject;
        Cubes_CubeN2 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN2").gameObject;
        Cubes_CubeN3 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN3").gameObject;
        Cubes_CubeN4 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN4").gameObject;
        Cubes_CubeN5 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN5").gameObject;
        Cubes_CubeS = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeS").gameObject;
        Cubes_CubeP = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeP").gameObject;
        Cubes_CubeD = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeD").gameObject;

        CubeG = (GameObject)Resources.Load("Object/Cube/CubeG");
        CubeH = (GameObject)Resources.Load("Object/Cube/CubeH");
        CubeN = (GameObject)Resources.Load("Object/Cube/CubeN");
        CubeS = (GameObject)Resources.Load("Object/Cube/CubeS");
        CubeP = (GameObject)Resources.Load("Object/Cube/CubeP");
        CubeD = (GameObject)Resources.Load("Object/Cube/CubeD");

        PlayerVsAI_Control = GameObject.Find("Player1").transform.GetComponent<PlayerVsAI_Control>();

        AudioSource_AudioSource1 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource1").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource2 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource2").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource3 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource3").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource4 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource4").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource5 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource5").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource6 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource6").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource7 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource7").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource8 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource8").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource9 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource9").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource10 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource10").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource11 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource11").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource12 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource12").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource13 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource13").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource14 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource14").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource15 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource15").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource16 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource16").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource17 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource17").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource18 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource18").gameObject.transform.GetComponent<AudioSource>();


        //CubeGの召喚
        for (int z = 0; z < ListInt_ColorOfCubeG.Count; z++)
        {
            if (z % 14 + 1 >= 3 & z % 14 + 1 <= 12 & Mathf.FloorToInt(z / 14) + 1 >= 3 & Mathf.FloorToInt(z / 14) + 1 <= 32)
            {
                GameObject GameObject_CubeG = Instantiate(CubeG) as GameObject;
                GameObject_CubeG.name = "CubeG" + z;
                GameObject_CubeG.transform.position = Mark_Cube_O.transform.position + new Vector3(z % 14 + 1, Mathf.FloorToInt(z / 14) + 1, 0);
                GameObject_CubeG.transform.position += new Vector3(-2, -2, 0);
                GameObject_CubeG.transform.parent = Cubes_CubeG.transform;
                ListGameObject_CubeG.Add(GameObject_CubeG);
            }
        }

        //CubeHの召喚
        for (int z = 0; z < ListInt_ColorOfCubeH.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH" + z;

                GameObject_CubeH.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 28, 0);
                GameObject_CubeH.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                ListGameObject_CubeH.Add(GameObject_CubeH);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH" + z;

                GameObject_CubeH.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 28, 0);
                GameObject_CubeH.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                ListGameObject_CubeH.Add(GameObject_CubeH);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH" + z;

                GameObject_CubeH.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 28, 0);
                GameObject_CubeH.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                ListGameObject_CubeH.Add(GameObject_CubeH);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH" + z;

                GameObject_CubeH.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 28, 0);
                GameObject_CubeH.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                ListGameObject_CubeH.Add(GameObject_CubeH);
            }
        }

        //CubeN1の召喚
        for (int z = 0; z < ListInt_ColorOfCubeN1.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1" + z;

                GameObject_CubeN1.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 28, 0);
                GameObject_CubeN1.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                ListGameObject_CubeN1.Add(GameObject_CubeN1);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1" + z;

                GameObject_CubeN1.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 28, 0);
                GameObject_CubeN1.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                ListGameObject_CubeN1.Add(GameObject_CubeN1);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1" + z;

                GameObject_CubeN1.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 28, 0);
                GameObject_CubeN1.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                ListGameObject_CubeN1.Add(GameObject_CubeN1);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1" + z;

                GameObject_CubeN1.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 28, 0);
                GameObject_CubeN1.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                ListGameObject_CubeN1.Add(GameObject_CubeN1);
            }
        }
        //CubeN2の召喚
        for (int z = 0; z < ListInt_ColorOfCubeN2.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2" + z;

                GameObject_CubeN2.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 24, 0);
                GameObject_CubeN2.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                ListGameObject_CubeN2.Add(GameObject_CubeN2);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2" + z;

                GameObject_CubeN2.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 24, 0);
                GameObject_CubeN2.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                ListGameObject_CubeN2.Add(GameObject_CubeN2);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2" + z;

                GameObject_CubeN2.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 24, 0);
                GameObject_CubeN2.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                ListGameObject_CubeN2.Add(GameObject_CubeN2);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2" + z;

                GameObject_CubeN2.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 24, 0);
                GameObject_CubeN2.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                ListGameObject_CubeN2.Add(GameObject_CubeN2);
            }
        }
        //CubeN3の召喚
        for (int z = 0; z < ListInt_ColorOfCubeN3.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3" + z;

                GameObject_CubeN3.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 20, 0);
                GameObject_CubeN3.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                ListGameObject_CubeN3.Add(GameObject_CubeN3);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3" + z;

                GameObject_CubeN3.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 20, 0);
                GameObject_CubeN3.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                ListGameObject_CubeN3.Add(GameObject_CubeN3);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3" + z;

                GameObject_CubeN3.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 20, 0);
                GameObject_CubeN3.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                ListGameObject_CubeN3.Add(GameObject_CubeN3);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3" + z;

                GameObject_CubeN3.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 20, 0);
                GameObject_CubeN3.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                ListGameObject_CubeN3.Add(GameObject_CubeN3);
            }
        }
        //CubeN4の召喚
        for (int z = 0; z < ListInt_ColorOfCubeN4.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4" + z;

                GameObject_CubeN4.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 16, 0);
                GameObject_CubeN4.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                ListGameObject_CubeN4.Add(GameObject_CubeN4);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4" + z;

                GameObject_CubeN4.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 16, 0);
                GameObject_CubeN4.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                ListGameObject_CubeN4.Add(GameObject_CubeN4);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4" + z;

                GameObject_CubeN4.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 16, 0);
                GameObject_CubeN4.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                ListGameObject_CubeN4.Add(GameObject_CubeN4);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4" + z;

                GameObject_CubeN4.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 16, 0);
                GameObject_CubeN4.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                ListGameObject_CubeN4.Add(GameObject_CubeN4);
            }
        }
        //CubeN5の召喚
        for (int z = 0; z < ListInt_ColorOfCubeN5.Count; z++)
        {
            if (z == 0)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5" + z;

                GameObject_CubeN5.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 0) % 1 + 1, Mathf.FloorToInt((z - 0) / 1) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 12, 0);
                GameObject_CubeN5.transform.position -= new Vector3((z - 0) % 1 * 0.5f, Mathf.FloorToInt((z - 0) / 1) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                ListGameObject_CubeN5.Add(GameObject_CubeN5);
            }
            if (z >= 1 & z <= 4)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5" + z;

                GameObject_CubeN5.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 1) % 2 + 1, Mathf.FloorToInt((z - 1) / 2) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 12, 0);
                GameObject_CubeN5.transform.position -= new Vector3((z - 1) % 2 * 0.5f, Mathf.FloorToInt((z - 1) / 2) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                ListGameObject_CubeN5.Add(GameObject_CubeN5);
            }
            if (z >= 5 & z <= 13)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5" + z;

                GameObject_CubeN5.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 5) % 3 + 1, Mathf.FloorToInt((z - 5) / 3) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 12, 0);
                GameObject_CubeN5.transform.position -= new Vector3((z - 5) % 3 * 0.5f, Mathf.FloorToInt((z - 5) / 3) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                ListGameObject_CubeN5.Add(GameObject_CubeN5);
            }
            if (z >= 14)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5" + z;

                GameObject_CubeN5.transform.position = Mark_Cube_O.transform.position + new Vector3((z - 14) % 4 + 1, Mathf.FloorToInt((z - 14) / 4) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 12, 0);
                GameObject_CubeN5.transform.position -= new Vector3((z - 14) % 4 * 0.5f, Mathf.FloorToInt((z - 14) / 4) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                ListGameObject_CubeN5.Add(GameObject_CubeN5);
            }
        }

        //CubePの召喚
        for (int z = 0; z < ListInt_ColorOfCubeP.Count; z++)
        {
            GameObject GameObject_CubeP = Instantiate(CubeP) as GameObject;
            GameObject_CubeP.name = "CubeP" + z;

            GameObject_CubeP.transform.position = Mark_Cube_O.transform.position + new Vector3(z % 5 + 1, Mathf.FloorToInt(z / 5) + 1, 0);
            GameObject_CubeP.transform.position += new Vector3(-10, 32.25f, 0);
            GameObject_CubeP.transform.position -= new Vector3(z % 5 * 0.5f, Mathf.FloorToInt(z / 5) * 0.5f, 0);
            GameObject_CubeP.transform.position += new Vector3(Mathf.FloorToInt(z / 25) * 3, -Mathf.FloorToInt(z / 25) * 2.5f, 0);

            GameObject_CubeP.transform.localScale = new Vector3(0.5f, 0.5f, 1);
            GameObject_CubeP.transform.parent = Cubes_CubeP.transform;
            GameObject_CubeP.SetActive(false);
            ListGameObject_CubeP.Add(GameObject_CubeP);
        }

        //CubeSの召喚
        for (int z = 0; z < ListInt_ColorOfCubeS.Count; z++)
        {
            GameObject GameObject_CubeS = Instantiate(CubeS) as GameObject;
            GameObject_CubeS.name = "CubeS" + z;

            GameObject_CubeS.transform.position = Mark_Cube_O.transform.position + new Vector3(z % 5 + 1, Mathf.FloorToInt(z / 5) + 1, 0);
            GameObject_CubeS.transform.position += new Vector3(11, -6.25f, 0);
            GameObject_CubeS.transform.position -= new Vector3(z % 5 * 0.5f, Mathf.FloorToInt(z / 5) * 0.5f, 0);
            GameObject_CubeS.transform.position -= new Vector3(Mathf.FloorToInt(z / 25) * 2, Mathf.FloorToInt(z / 25) * 2.5f, 0);

            GameObject_CubeS.transform.localScale = new Vector3(0.5f, 0.5f, 1);
            GameObject_CubeS.transform.parent = Cubes_CubeS.transform;
            GameObject_CubeS.SetActive(false);
            ListGameObject_CubeS.Add(GameObject_CubeS);
        }

        //CubeDの召喚
        for (int z = 0; z < ListInt_ColorOfCubeG.Count; z++)
        {
            if (z % 14 + 1 >= 3 & z % 14 + 1 <= 12 & Mathf.FloorToInt(z / 14) + 1 >= 3 & Mathf.FloorToInt(z / 14) + 1 <= 32)
            {
                GameObject GameObject_CubeD = Instantiate(CubeD) as GameObject;
                GameObject_CubeD.name = "CubeD" + z;
                GameObject_CubeD.transform.position = Mark_Cube_O.transform.position + new Vector3(z % 14 + 1, Mathf.FloorToInt(z / 14) + 1, 0);
                GameObject_CubeD.transform.position += new Vector3(-2, -2, 0);
                GameObject_CubeD.transform.parent = Cubes_CubeD.transform;
                ListGameObject_CubeD.Add(GameObject_CubeD);
            }
        }


        //VsAIのセット
        TotalNumberOfAttack = 0;
        TotalNumberOfGotAttack = 0;
        TotalNumberOfGotAttack_O = 0;

        ListInt_NextBlock1 = new List<int>(ListInt_Block1);
        ListInt_NextBlock2 = new List<int>(ListInt_Block2);
        ListInt_NextBlock3 = new List<int>(ListInt_Block3);
        ListInt_NextBlock4 = new List<int>(ListInt_Block4);
        ListInt_NextBlock5 = new List<int>(ListInt_Block5);
        ListInt_NextBlock6 = new List<int>(ListInt_Block6);
        ListInt_NextBlock7 = new List<int>(ListInt_Block7);
        ListInt_NextBlock8 = new List<int>(ListInt_Block8);
        ListInt_NextBlock9 = new List<int>(ListInt_Block9);
        ListListInt_ColorOfNextBlock = new List<List<int>>(ListListInt_ColorOfBlock);

        int a = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock1.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock1[a]);
        ListInt_NextBlock1.Remove(ListInt_NextBlock1[a]);
        int b = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock2.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock2[b]);
        ListInt_NextBlock2.Remove(ListInt_NextBlock2[b]);
        int c = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock3.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock3[c]);
        ListInt_NextBlock3.Remove(ListInt_NextBlock3[c]);
        int d = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock4.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock4[d]);
        ListInt_NextBlock4.Remove(ListInt_NextBlock4[d]);
        int e = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock5.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock5[e]);
        ListInt_NextBlock5.Remove(ListInt_NextBlock5[e]);
        int f = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock6.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock6[f]);
        ListInt_NextBlock6.Remove(ListInt_NextBlock6[f]);
        int g = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock7.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock7[g]);
        ListInt_NextBlock7.Remove(ListInt_NextBlock7[g]);
        int h = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock8.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock8[h]);
        ListInt_NextBlock8.Remove(ListInt_NextBlock8[h]);
        int i = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock9.Count + 1)) - 1;
        ListInt_NextBlock.Add(ListInt_NextBlock9[i]);
        ListInt_NextBlock9.Remove(ListInt_NextBlock9[i]);
        int j = Mathf.FloorToInt(Random.Range(1, ListListInt_ColorOfNextBlock.Count + 1)) - 1;
        ListInt_ColorOfNextBlock = new List<int>(ListListInt_ColorOfNextBlock[j]);
        ListListInt_ColorOfNextBlock.Remove(ListListInt_ColorOfNextBlock[j]);
        for (int k = 0; k < 9; k++)
        {
            ListInt_DirectionOfNextBlock.Add(Mathf.FloorToInt(Random.Range(1, ListInt_DirectionOfBlock.Count + 1)));
        }


        int l = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock1 = ListInt_NextBlock[l];
        ListInt_DataOfNextBlock1 = ListListInt_DataOfBlock[ListInt_NextBlock[l] - 1];
        ListInt_SideLengthOfNextBlock1 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[l] - 1];
        StartCoordinateOfNextBlock1 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock1.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock1.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock1 = ListInt_DirectionOfNextBlock[l];
        for (int ll = 1; ll < DirectionOfNextBlock1; ll++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int lll = 0; lll < ListInt_DataOfNextBlock1.Count; lll++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock1.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock1[lll] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock1[lll] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock1 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock1 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock1.Count - 1];
        ListInt_NextBlock.Remove(NextBlock1);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock1);

        int m = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock2 = ListInt_NextBlock[m];
        ListInt_DataOfNextBlock2 = ListListInt_DataOfBlock[ListInt_NextBlock[m] - 1];
        ListInt_SideLengthOfNextBlock2 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[m] - 1];
        StartCoordinateOfNextBlock2 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock2.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock2.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock2 = ListInt_DirectionOfNextBlock[m];
        for (int mm = 1; mm < DirectionOfNextBlock2; mm++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int mmm = 0; mmm < ListInt_DataOfNextBlock2.Count; mmm++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock2.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock2[mmm] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock2[mmm] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock2 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock2 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock2.Count - 1];
        ListInt_NextBlock.Remove(NextBlock2);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock2);

        int n = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock3 = ListInt_NextBlock[n];
        ListInt_DataOfNextBlock3 = ListListInt_DataOfBlock[ListInt_NextBlock[n] - 1];
        ListInt_SideLengthOfNextBlock3 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[n] - 1];
        StartCoordinateOfNextBlock3 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock3.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock3.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock3 = ListInt_DirectionOfNextBlock[n];
        for (int nn = 1; nn < DirectionOfNextBlock3; nn++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int nnn = 0; nnn < ListInt_DataOfNextBlock3.Count; nnn++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock3.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock3[nnn] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock3[nnn] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock3 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock3 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock3.Count - 1];
        ListInt_NextBlock.Remove(NextBlock3);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock3);

        int o = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock4 = ListInt_NextBlock[o];
        ListInt_DataOfNextBlock4 = ListListInt_DataOfBlock[ListInt_NextBlock[o] - 1];
        ListInt_SideLengthOfNextBlock4 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[o] - 1];
        StartCoordinateOfNextBlock4 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock4.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock4.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock4 = ListInt_DirectionOfNextBlock[o];
        for (int oo = 1; oo < DirectionOfNextBlock4; oo++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int ooo = 0; ooo < ListInt_DataOfNextBlock4.Count; ooo++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock4.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock4[ooo] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock4[ooo] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock4 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock4 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock4.Count - 1];
        ListInt_NextBlock.Remove(NextBlock4);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock4);

        int p = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock5 = ListInt_NextBlock[p];
        ListInt_DataOfNextBlock5 = ListListInt_DataOfBlock[ListInt_NextBlock[p] - 1];
        ListInt_SideLengthOfNextBlock5 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[p] - 1];
        StartCoordinateOfNextBlock5 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock5.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock5.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock5 = ListInt_DirectionOfNextBlock[p];
        for (int pp = 1; pp < DirectionOfNextBlock5; pp++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int ppp = 0; ppp < ListInt_DataOfNextBlock5.Count; ppp++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock5.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock5[ppp] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock5[ppp] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock5 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock5 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock5.Count - 1];
        ListInt_NextBlock.Remove(NextBlock5);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock5);

        int q = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock6 = ListInt_NextBlock[q];
        ListInt_DataOfNextBlock6 = ListListInt_DataOfBlock[ListInt_NextBlock[q] - 1];
        ListInt_SideLengthOfNextBlock6 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[q] - 1];
        StartCoordinateOfNextBlock6 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock6.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock6.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock6 = ListInt_DirectionOfNextBlock[q];
        for (int qq = 1; qq < DirectionOfNextBlock6; qq++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int qqq = 0; qqq < ListInt_DataOfNextBlock6.Count; qqq++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock6.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock6[qqq] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock6[qqq] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock6 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock6 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock6.Count - 1];
        ListInt_NextBlock.Remove(NextBlock6);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock6);

        int r = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock7 = ListInt_NextBlock[r];
        ListInt_DataOfNextBlock7 = ListListInt_DataOfBlock[ListInt_NextBlock[r] - 1];
        ListInt_SideLengthOfNextBlock7 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[r] - 1];
        StartCoordinateOfNextBlock7 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock7.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock7.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock7 = ListInt_DirectionOfNextBlock[r];
        for (int rr = 1; rr < DirectionOfNextBlock7; rr++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int rrr = 0; rrr < ListInt_DataOfNextBlock7.Count; rrr++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock7.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock7[rrr] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock7[rrr] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock7 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock7 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock7.Count - 1];
        ListInt_NextBlock.Remove(NextBlock7);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock7);

        int s = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock8 = ListInt_NextBlock[s];
        ListInt_DataOfNextBlock8 = ListListInt_DataOfBlock[ListInt_NextBlock[s] - 1];
        ListInt_SideLengthOfNextBlock8 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[s] - 1];
        StartCoordinateOfNextBlock8 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock8.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock8.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock8 = ListInt_DirectionOfNextBlock[s];
        for (int ss = 1; ss < DirectionOfNextBlock8; ss++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int sss = 0; sss < ListInt_DataOfNextBlock8.Count; sss++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock8.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock8[sss] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock8[sss] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock8 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock8 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock8.Count - 1];
        ListInt_NextBlock.Remove(NextBlock8);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock8);

        int t = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
        NextBlock9 = ListInt_NextBlock[t];
        ListInt_DataOfNextBlock9 = ListListInt_DataOfBlock[ListInt_NextBlock[t] - 1];
        ListInt_SideLengthOfNextBlock9 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[t] - 1];
        StartCoordinateOfNextBlock9 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock9.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock9.Max() - 1].Count + 1)) - 1];
        DirectionOfNextBlock9 = ListInt_DirectionOfNextBlock[t];
        for (int tt = 1; tt < DirectionOfNextBlock9; tt++)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int ttt = 0; ttt < ListInt_DataOfNextBlock9.Count; ttt++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock9.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock9[ttt] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock9[ttt] % 14 + 1 - 1));
            }

            ListInt_DataOfNextBlock9 = ListInt_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock9 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock9.Count - 1];
        ListInt_NextBlock.Remove(NextBlock9);
        ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock9);

        //Debug.Log((ListInt_DataOfNextBlock1.Count - 1) + " : " + (ListInt_DataOfNextBlock2.Count - 1) + " : " + (ListInt_DataOfNextBlock3.Count - 1) + " : " + (ListInt_DataOfNextBlock4.Count - 1) + " : " + (ListInt_DataOfNextBlock5.Count - 1) + " : " + (ListInt_DataOfNextBlock6.Count - 1) + " : " + (ListInt_DataOfNextBlock7.Count - 1) + " : " + (ListInt_DataOfNextBlock8.Count - 1) + " : " + (ListInt_DataOfNextBlock9.Count - 1));

        Invoke("Painting_CubeG", 0);
        Invoke("Painting_CubeH", 0);
        Invoke("Painting_CubeN", 0);
        Invoke("Painting_CubeS", 0);

        Invoke("CountingDown_3", 1.5f);
    }


    //ゲーム開始4秒前
    void CountingDown_3()
    {
        Invoke("CountingDown_2", 1);
    }
    //ゲーム開始3秒前
    void CountingDown_2()
    {
        Invoke("CountingDown_1", 1);
    }
    //ゲーム開始2秒前
    void CountingDown_1()
    {
        Invoke("CountingDown_START", 1);
    }
    //ゲーム開始1秒前
    void CountingDown_START()
    {
        Invoke("CountingDown_0", 1);
    }
    //ゲーム開始0秒前
    void CountingDown_0()
    {
        Invoke("FreeFall_CurrentBlock", 1);
        Invoke("Resetting_VsAI", 0);
    }


    void Update()
    {
        //CurrentBlockのRateOfFreeFall
        if (Mathf.FloorToInt(Score_VsAI / 10000) <= 19)
        {
            RateOfFreeFall = ListFloat_RateOfFreeFall[Mathf.FloorToInt(Score_VsAI / 10000)];
        }
        else
        {
            RateOfFreeFall = ListFloat_RateOfFreeFall[20];
        }


        if (Input.GetKeyDown(KeyCode.L))
        {
            Invoke("Holding_CurrentBlock", 0);
        }

        if (Input.GetKeyDown(KeyCode.O))
        {
            //Debug.Log("押したよー");

            for (int i = 0; i < ListInt_PriorityOfCubeG.Count; i++)
            {
                if (ListInt_PriorityOfCubeG[i] == 1)
                {
                    //Debug.Log("1 : "+ i);
                }
                if (ListInt_PriorityOfCubeG[i] == 2)
                {
                    //Debug.Log("2 : " + i);
                }
                if (ListInt_PriorityOfCubeG[i] == 3)
                {
                    //Debug.Log("3 : " + i);
                }
            }
        }

        if (Input.GetKeyDown(KeyCode.M))
        {

        }

        if (Input.GetKeyDown(KeyCode.K))
        {

        }
    }


    //VsAIのリセット
    void Resetting_VsAI()
    {
        if (ListInt_TypeOfCubeG[380] == 0 &
            ListInt_TypeOfCubeG[381] == 0 &
            ListInt_TypeOfCubeG[382] == 0 &
            ListInt_TypeOfCubeG[383] == 0 &
            ListInt_TypeOfCubeG[384] == 0 &
            ListInt_TypeOfCubeG[385] == 0 &
            ListInt_TypeOfCubeG[386] == 0 &
            ListInt_TypeOfCubeG[387] == 0 &
            ListInt_TypeOfCubeG[388] == 0 &
            ListInt_TypeOfCubeG[389] == 0)
        {
            if (TotalNumberOfGotAttack_O - TotalNumberOfGotAttack == 0)
            {
                //AudioSource_AudioSource2.Play();

                if (ListInt_NextBlock.Count == 0)
                {
                    if (ListInt_NextBlock1.Count == 0)
                    {
                        ListInt_NextBlock1 = new List<int>(ListInt_Block1);
                    }
                    if (ListInt_NextBlock2.Count == 0)
                    {
                        ListInt_NextBlock2 = new List<int>(ListInt_Block2);
                    }
                    if (ListInt_NextBlock3.Count == 0)
                    {
                        ListInt_NextBlock3 = new List<int>(ListInt_Block3);
                    }
                    if (ListInt_NextBlock4.Count == 0)
                    {
                        ListInt_NextBlock4 = new List<int>(ListInt_Block4);
                    }
                    if (ListInt_NextBlock5.Count == 0)
                    {
                        ListInt_NextBlock5 = new List<int>(ListInt_Block5);
                    }
                    if (ListInt_NextBlock6.Count == 0)
                    {
                        ListInt_NextBlock6 = new List<int>(ListInt_Block6);
                    }
                    if (ListInt_NextBlock7.Count == 0)
                    {
                        ListInt_NextBlock7 = new List<int>(ListInt_Block7);
                    }
                    if (ListInt_NextBlock8.Count == 0)
                    {
                        ListInt_NextBlock8 = new List<int>(ListInt_Block8);
                    }
                    if (ListInt_NextBlock9.Count == 0)
                    {
                        ListInt_NextBlock9 = new List<int>(ListInt_Block9);
                    }
                    if (ListListInt_ColorOfNextBlock.Count == 0)
                    {
                        ListListInt_ColorOfNextBlock = new List<List<int>>(ListListInt_ColorOfBlock);
                    }

                    int a = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock1.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock1[a]);
                    ListInt_NextBlock1.Remove(ListInt_NextBlock1[a]);
                    int b = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock2.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock2[b]);
                    ListInt_NextBlock2.Remove(ListInt_NextBlock2[b]);
                    int c = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock3.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock3[c]);
                    ListInt_NextBlock3.Remove(ListInt_NextBlock3[c]);
                    int d = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock4.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock4[d]);
                    ListInt_NextBlock4.Remove(ListInt_NextBlock4[d]);
                    int e = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock5.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock5[e]);
                    ListInt_NextBlock5.Remove(ListInt_NextBlock5[e]);
                    int f = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock6.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock6[f]);
                    ListInt_NextBlock6.Remove(ListInt_NextBlock6[f]);
                    int g = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock7.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock7[g]);
                    ListInt_NextBlock7.Remove(ListInt_NextBlock7[g]);
                    int h = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock8.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock8[h]);
                    ListInt_NextBlock8.Remove(ListInt_NextBlock8[h]);
                    int i = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock9.Count + 1)) - 1;
                    ListInt_NextBlock.Add(ListInt_NextBlock9[i]);
                    ListInt_NextBlock9.Remove(ListInt_NextBlock9[i]);

                    int j = Mathf.FloorToInt(Random.Range(1, ListListInt_ColorOfNextBlock.Count + 1)) - 1;
                    ListInt_ColorOfNextBlock = new List<int>(ListListInt_ColorOfNextBlock[j]);
                    ListListInt_ColorOfNextBlock.Remove(ListListInt_ColorOfNextBlock[j]);
                    for (int k = 0; k < 9; k++)
                    {
                        ListInt_DirectionOfNextBlock.Add(Mathf.FloorToInt(Random.Range(1, ListInt_DirectionOfBlock.Count + 1)));
                    }
                }

                CurrentBlock = NextBlock1;
                ListInt_DataOfCurrentBlock = ListInt_DataOfNextBlock1;
                ListInt_SideLengthOfCurrentBlock = ListInt_SideLengthOfNextBlock1;
                CoordinateOfCurrentBlock = StartCoordinateOfNextBlock1;
                DirectionOfCurrentBlock = DirectionOfNextBlock1;
                ColorOfCurrentBlock = ColorOfNextBlock1;

                NextBlock1 = NextBlock2;
                ListInt_DataOfNextBlock1 = ListInt_DataOfNextBlock2;
                ListInt_SideLengthOfNextBlock1 = ListInt_SideLengthOfNextBlock2;
                StartCoordinateOfNextBlock1 = StartCoordinateOfNextBlock2;
                DirectionOfNextBlock1 = DirectionOfNextBlock2;
                ColorOfNextBlock1 = ColorOfNextBlock2;

                NextBlock2 = NextBlock3;
                ListInt_DataOfNextBlock2 = ListInt_DataOfNextBlock3;
                ListInt_SideLengthOfNextBlock2 = ListInt_SideLengthOfNextBlock3;
                StartCoordinateOfNextBlock2 = StartCoordinateOfNextBlock3;
                DirectionOfNextBlock2 = DirectionOfNextBlock3;
                ColorOfNextBlock2 = ColorOfNextBlock3;

                NextBlock3 = NextBlock4;
                ListInt_DataOfNextBlock3 = ListInt_DataOfNextBlock4;
                ListInt_SideLengthOfNextBlock3 = ListInt_SideLengthOfNextBlock4;
                StartCoordinateOfNextBlock3 = StartCoordinateOfNextBlock4;
                DirectionOfNextBlock3 = DirectionOfNextBlock4;
                ColorOfNextBlock3 = ColorOfNextBlock4;

                NextBlock4 = NextBlock5;
                ListInt_DataOfNextBlock4 = ListInt_DataOfNextBlock5;
                ListInt_SideLengthOfNextBlock4 = ListInt_SideLengthOfNextBlock5;
                StartCoordinateOfNextBlock4 = StartCoordinateOfNextBlock5;
                DirectionOfNextBlock4 = DirectionOfNextBlock5;
                ColorOfNextBlock4 = ColorOfNextBlock5;

                NextBlock5 = NextBlock6;
                ListInt_DataOfNextBlock5 = ListInt_DataOfNextBlock6;
                ListInt_SideLengthOfNextBlock5 = ListInt_SideLengthOfNextBlock6;
                StartCoordinateOfNextBlock5 = StartCoordinateOfNextBlock6;
                DirectionOfNextBlock5 = DirectionOfNextBlock6;
                ColorOfNextBlock5 = ColorOfNextBlock6;

                NextBlock6 = NextBlock7;
                ListInt_DataOfNextBlock6 = ListInt_DataOfNextBlock7;
                ListInt_SideLengthOfNextBlock6 = ListInt_SideLengthOfNextBlock7;
                StartCoordinateOfNextBlock6 = StartCoordinateOfNextBlock7;
                DirectionOfNextBlock6 = DirectionOfNextBlock7;
                ColorOfNextBlock6 = ColorOfNextBlock7;

                NextBlock7 = NextBlock8;
                ListInt_DataOfNextBlock7 = ListInt_DataOfNextBlock8;
                ListInt_SideLengthOfNextBlock7 = ListInt_SideLengthOfNextBlock8;
                StartCoordinateOfNextBlock7 = StartCoordinateOfNextBlock8;
                DirectionOfNextBlock7 = DirectionOfNextBlock8;
                ColorOfNextBlock7 = ColorOfNextBlock8;

                NextBlock8 = NextBlock9;
                ListInt_DataOfNextBlock8 = ListInt_DataOfNextBlock9;
                ListInt_SideLengthOfNextBlock8 = ListInt_SideLengthOfNextBlock9;
                StartCoordinateOfNextBlock8 = StartCoordinateOfNextBlock9;
                DirectionOfNextBlock8 = DirectionOfNextBlock9;
                ColorOfNextBlock8 = ColorOfNextBlock9;

                int l = Mathf.FloorToInt(Random.Range(1, ListInt_NextBlock.Count + 1)) - 1;
                NextBlock9 = ListInt_NextBlock[l];
                ListInt_DataOfNextBlock9 = ListListInt_DataOfBlock[ListInt_NextBlock[l] - 1];
                ListInt_SideLengthOfNextBlock9 = ListListInt_SideLengthOfBlock[ListInt_NextBlock[l] - 1];
                StartCoordinateOfNextBlock9 = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock9.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfNextBlock9.Max() - 1].Count + 1)) - 1];
                DirectionOfNextBlock9 = ListInt_DirectionOfNextBlock[l];
                for (int ii = 1; ii < DirectionOfNextBlock9; ii++)
                {
                    ListInt_DataOfTemporaryBlock1 = new List<int> { };

                    for (int iii = 0; iii < ListInt_DataOfNextBlock9.Count; iii++)
                    {
                        ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfNextBlock9.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfNextBlock9[iii] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfNextBlock9[iii] % 14 + 1 - 1));
                    }

                    ListInt_DataOfNextBlock9 = ListInt_DataOfTemporaryBlock1;
                }
                ColorOfNextBlock9 = ListInt_ColorOfNextBlock[ListInt_DataOfNextBlock9.Count - 1];
                ListInt_NextBlock.Remove(NextBlock9);
                ListInt_DirectionOfNextBlock.Remove(DirectionOfNextBlock9);

                CanInvokeDisassembly_CurrentBlock = true;
                CanPlayFallingSound = true;
                CanIncreaseNumberOfRens_VsAI = true;

                NumberOfCombos_VsAI = 0;
                CountOfContinuousSummonedCurrentBlock += 1;
                if (CountOfContinuousSummonedCurrentBlock >= 2)
                {
                    NumberOfRens_VsAI = 0;
                }
                Score_VsAI += 30;
                if (Score_VsAI > 15000)
                {
                    Score_VsAI = 15000;
                }

                if (CanInvokeSetting_Priority == false & CanInvokeResetting_Priority == false)
                {
                    Invoke("Evaluating_CubeG", 0);
                }
                if (CanInvokeSetting_Priority == true)
                {
                    CanInvokeSetting_Priority = false;

                    Invoke("Setting_Priority", 0);
                }
                if (CanInvokeResetting_Priority == true)
                {
                    CanInvokeResetting_Priority = false;

                    Invoke("Resetting_Priority", 0);
                }

                Invoke("Painting_CubeG", 0);
                Invoke("Painting_CubeN", 0);
                Invoke("Painting_CubeS", 0);
            }
            else
            {
                //AudioSource_AudioSource16.Play();

                for (int i = TotalNumberOfGotAttack_O - TotalNumberOfGotAttack; i > 0; i--)
                {
                    //繰り上げ
                    for (int a = ListInt_ColorOfCubeG.Count - 14 - 1; a >= 0; a--)
                    {
                        ListInt_ColorOfCubeG[a + 14] = ListInt_ColorOfCubeG[a];
                        ListInt_ColorOfCubeG[a] = 0;
                    }
                    for (int b = ListInt_TypeOfCubeG.Count - 14 - 1; b >= 0; b--)
                    {
                        if (ListInt_TypeOfCubeG[b] != 10)
                        {
                            ListInt_TypeOfCubeG[b + 14] = ListInt_TypeOfCubeG[b];
                            ListInt_TypeOfCubeG[b] = 0;
                        }
                    }

                    //塗りつぶし
                    switch ((TotalNumberOfGotAttack_O - (i - 1)) % 3)
                    {
                        case 1:
                            for (int a = 30; a < 40; a++)
                            {
                                switch ((a % 14 + 1) % 3)
                                {
                                    case 0:
                                        ListInt_ColorOfCubeG[a] = 1;
                                        ListInt_TypeOfCubeG[a] = 4;
                                        break;
                                    case 1:
                                        ListInt_ColorOfCubeG[a] = 2;
                                        ListInt_TypeOfCubeG[a] = 6;
                                        break;
                                    case 2:
                                        ListInt_ColorOfCubeG[a] = 3;
                                        ListInt_TypeOfCubeG[a] = 8;
                                        break;
                                }
                            }
                            break;
                        case 2:
                            for (int a = 30; a < 40; a++)
                            {
                                switch ((a % 14 + 1) % 3)
                                {
                                    case 0:
                                        ListInt_ColorOfCubeG[a] = 3;
                                        ListInt_TypeOfCubeG[a] = 8;
                                        break;
                                    case 1:
                                        ListInt_ColorOfCubeG[a] = 1;
                                        ListInt_TypeOfCubeG[a] = 4;
                                        break;
                                    case 2:
                                        ListInt_ColorOfCubeG[a] = 2;
                                        ListInt_TypeOfCubeG[a] = 6;
                                        break;
                                }
                            }
                            break;
                        case 0:
                            for (int a = 30; a < 40; a++)
                            {
                                switch ((a % 14 + 1) % 3)
                                {
                                    case 0:
                                        ListInt_ColorOfCubeG[a] = 2;
                                        ListInt_TypeOfCubeG[a] = 6;
                                        break;
                                    case 1:
                                        ListInt_ColorOfCubeG[a] = 3;
                                        ListInt_TypeOfCubeG[a] = 8;
                                        break;
                                    case 2:
                                        ListInt_ColorOfCubeG[a] = 1;
                                        ListInt_TypeOfCubeG[a] = 4;
                                        break;
                                }
                            }
                            break;
                    }
                }
                TotalNumberOfGotAttack = TotalNumberOfGotAttack_O;

                Invoke("Painting_CubeG", 0);
                Invoke("Resetting_VsAI", 1);
            }
        }
        else
        {
            //ゲームオーバー
            AudioSource_AudioSource1.Stop();
            //AudioSource_AudioSource1.Stop();
            //AudioSource_AudioSource2.Stop();
            //AudioSource_AudioSource3.Stop();
            //AudioSource_AudioSource4.Stop();
            //AudioSource_AudioSource5.Stop();
            //AudioSource_AudioSource6.Stop();
            //AudioSource_AudioSource7.Stop();
            //AudioSource_AudioSource8.Stop();
            AudioSource_AudioSource9.Play();
            //AudioSource_AudioSource10.Stop();
            //AudioSource_AudioSource11.Stop();
            //AudioSource_AudioSource12.Stop();
            //AudioSource_AudioSource13.Stop();
            //AudioSource_AudioSource14.Stop();

            CancelInvoke("FreeFall_CurrentBlock");
            CancelInvoke("FreeFall_PartOfCurrentBlock");
            CancelInvoke("Disassembly_CurrentBlock");

            PlayerVsAI_Control.CancelInvoke("FreeFall_CurrentBlock");
            PlayerVsAI_Control.CancelInvoke("FreeFall_PartOfCurrentBlock");
            PlayerVsAI_Control.CancelInvoke("Disassembly_CurrentBlock");

            PlayerVsAI_Control.Control = false;

            PlayerResult_Control.Result = "Won";

            Invoke("Exploding_CubeG", 2);
            PlayerVsAI_Control.Invoke("FadingIn_VsAI", 3);
            PlayerVsAI_Control.Invoke("LoadingScene_Result", 4);
        }
    }


    //優先度のセット
    void Setting_Priority()
    {
        Debug.Log("-----------------------------------------------------------------------------------------------------------------------------------------------");

        ListInt_CountOfColor = new List<int> { 0, 0, 0 };

        ListInt_CountOfColor[ColorOfCurrentBlock - 1] = ListInt_CountOfColor[ColorOfCurrentBlock - 1] + 1;
        ListInt_CountOfColor[ColorOfNextBlock1 - 1] = ListInt_CountOfColor[ColorOfNextBlock1 - 1] + 1;
        ListInt_CountOfColor[ColorOfNextBlock2 - 1] = ListInt_CountOfColor[ColorOfNextBlock2 - 1] + 1;
        ListInt_CountOfColor[ColorOfNextBlock3 - 1] = ListInt_CountOfColor[ColorOfNextBlock3 - 1] + 1;
        ListInt_CountOfColor[ColorOfNextBlock4 - 1] = ListInt_CountOfColor[ColorOfNextBlock4 - 1] + 1;
        ListInt_CountOfColor[ColorOfNextBlock5 - 1] = ListInt_CountOfColor[ColorOfNextBlock5 - 1] + 1;

        //Debug.Log(ListInt_CountOfColor[0] + " : " + ListInt_CountOfColor[1] + " : " + ListInt_CountOfColor[2]);

        int numM = ListInt_CountOfColor.Max();

        //R,G,B : 2,2,2
        if (ListInt_CountOfColor.Count(value => value == numM) == 3)
        {
            int Int1 = ListInt_CountOfColor.IndexOf(2);
            ColorOfFirstCandidate = Int1 + 1;
            ListInt_CountOfColor[Int1] = -1;

            int Int2 = ListInt_CountOfColor.IndexOf(2);
            ColorOfSecondCandidate = Int2 + 1;
            ListInt_CountOfColor[Int2] = -1;

            int Int3 = ListInt_CountOfColor.IndexOf(2);
            ColorOfThirdCandidate = Int3 + 1;
            ListInt_CountOfColor[Int3] = -1;
        }
        //R,G,B : 3,3,0
        if (ListInt_CountOfColor.Count(value => value == numM) == 2)
        {
            int Int1 = ListInt_CountOfColor.IndexOf(3);
            ColorOfFirstCandidate = Int1 + 1;
            ListInt_CountOfColor[Int1] = -1;

            int Int2 = ListInt_CountOfColor.IndexOf(3);
            ColorOfSecondCandidate = Int2 + 1;
            ListInt_CountOfColor[Int2] = -1;

            int Int3 = ListInt_CountOfColor.IndexOf(0);
            ColorOfThirdCandidate = Int3 + 1;
            ListInt_CountOfColor[Int3] = -1;
        }
        //R,G,B : 3,2,1
        if (ListInt_CountOfColor.Count(value => value == numM) == 1)
        {
            int Int1 = ListInt_CountOfColor.IndexOf(3);
            ColorOfFirstCandidate = Int1 + 1;
            ListInt_CountOfColor[Int1] = -1;

            int Int2 = ListInt_CountOfColor.IndexOf(2);
            ColorOfSecondCandidate = Int2 + 1;
            ListInt_CountOfColor[Int2] = -1;

            int Int3 = ListInt_CountOfColor.IndexOf(1);
            ColorOfThirdCandidate = Int3 + 1;
            ListInt_CountOfColor[Int3] = -1;
        }

        Debug.Log("色の優先度が変更されました");
        Debug.Log("ColorOfFirstCandidate : " + ColorOfFirstCandidate);
        Debug.Log("ColorOfSecondCandidate : " + ColorOfSecondCandidate);
        Debug.Log("ColorOfThirdCandidate : " + ColorOfThirdCandidate);

        Invoke("Evaluating_CubeG", 0);
    }
    //優先度のリセット
    void Resetting_Priority()
    {
        Debug.Log("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");

        Debug.Log("色の優先度が変更されました");

        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        int CountOfAdjacentFrom4To0 = 0;
        int CountOfAdjacentFrom5To0 = 0;
        int CountOfAdjacentFrom6To0 = 0;
        bool IsChanging = true;

        //
        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_ColorOfCubeG);
        //
        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
        {
            if (ListInt_TypeOfCubeG[x] != 1)
            {
                if (ListInt_TemporaryOfCubeG1[x] == 0)
                {
                    ListInt_TemporaryOfCubeG1[x] = 0;
                }
                if (x % 14 + 1 == 3 | x % 14 + 1 == 12)
                {
                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                    {
                        ListInt_TemporaryOfCubeG1[x] = 4;
                    }
                    else
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                        {
                            ListInt_TemporaryOfCubeG1[x] = 5;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 6;
                            }
                        }
                    }
                }
            }
            else
            {
                ListInt_TemporaryOfCubeG1[x] = 0;
            }
        }
        //
        while (IsChanging == true)
        {
            IsChanging = false;

            for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
            {
                if (ListInt_TemporaryOfCubeG1[x] == 4)
                {
                    if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                    {
                        ListInt_TemporaryOfCubeG1[x + 14] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                    {
                        ListInt_TemporaryOfCubeG1[x - 14] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                    {
                        ListInt_TemporaryOfCubeG1[x + 1] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                    {
                        ListInt_TemporaryOfCubeG1[x - 1] = 4;
                        IsChanging = true;
                    }
                }
                else
                {
                    if (ListInt_TemporaryOfCubeG1[x] == 5)
                    {
                        if (ListInt_TemporaryOfCubeG1[x + 14] == 2)
                        {
                            ListInt_TemporaryOfCubeG1[x + 14] = 5;
                            IsChanging = true;
                        }
                        if (ListInt_TemporaryOfCubeG1[x - 14] == 2)
                        {
                            ListInt_TemporaryOfCubeG1[x - 14] = 5;
                            IsChanging = true;
                        }
                        if (ListInt_TemporaryOfCubeG1[x + 1] == 2)
                        {
                            ListInt_TemporaryOfCubeG1[x + 1] = 5;
                            IsChanging = true;
                        }
                        if (ListInt_TemporaryOfCubeG1[x - 1] == 2)
                        {
                            ListInt_TemporaryOfCubeG1[x - 1] = 5;
                            IsChanging = true;
                        }
                    }
                    else
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 6)
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 14] == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x + 14] = 6;
                                IsChanging = true;
                            }
                            if (ListInt_TemporaryOfCubeG1[x - 14] == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x - 14] = 6;
                                IsChanging = true;
                            }
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x + 1] = 6;
                                IsChanging = true;
                            }
                            if (ListInt_TemporaryOfCubeG1[x - 1] == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x - 1] = 6;
                                IsChanging = true;
                            }
                        }
                    }
                }
            }
        }
        //
        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
        {
            switch (ListInt_TemporaryOfCubeG1[x])
            {
                case 4:
                    if (ListInt_TemporaryOfCubeG1[x + 14] == 0)
                    {
                        CountOfAdjacentFrom4To0 += 1;
                    }
                    else
                    {
                        if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                        {
                            CountOfAdjacentFrom4To0 += 1;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 0)
                            {
                                CountOfAdjacentFrom4To0 += 1;
                            }
                            else
                            {
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 0)
                                {
                                    CountOfAdjacentFrom4To0 += 1;
                                }
                            }
                        }
                    }
                    break;
                case 5:
                    if (ListInt_TemporaryOfCubeG1[x + 14] == 0)
                    {
                        CountOfAdjacentFrom5To0 += 1;
                    }
                    else
                    {
                        if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                        {
                            CountOfAdjacentFrom5To0 += 1;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 0)
                            {
                                CountOfAdjacentFrom5To0 += 1;
                            }
                            else
                            {
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 0)
                                {
                                    CountOfAdjacentFrom5To0 += 1;
                                }
                            }
                        }
                    }
                    break;
                case 6:
                    if (ListInt_TemporaryOfCubeG1[x + 14] == 0)
                    {
                        CountOfAdjacentFrom6To0 += 1;
                    }
                    else
                    {
                        if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                        {
                            CountOfAdjacentFrom6To0 += 1;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 0)
                            {
                                CountOfAdjacentFrom6To0 += 1;
                            }
                            else
                            {
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 0)
                                {
                                    CountOfAdjacentFrom6To0 += 1;
                                }
                            }
                        }
                    }
                    break;
            }
        }
        //
        if (CountOfAdjacentFrom4To0 == 0 & CountOfAdjacentFrom5To0 == 0 & CountOfAdjacentFrom6To0 == 0)
        {
            CountOfAdjacentFrom4To0 = ListInt_TemporaryOfCubeG1.Count(value => value == 1) + ListInt_TemporaryOfCubeG1.Count(value => value == 4);

            CountOfAdjacentFrom5To0 = ListInt_TemporaryOfCubeG1.Count(value => value == 2) + ListInt_TemporaryOfCubeG1.Count(value => value == 5);

            CountOfAdjacentFrom6To0 = ListInt_TemporaryOfCubeG1.Count(value => value == 3) + ListInt_TemporaryOfCubeG1.Count(value => value == 6);
        }
        //
        List<int> ListInt1 = new List<int> { };
        ListInt1.Add(CountOfAdjacentFrom4To0);
        Debug.Log("CountOfAdjacentFrom4To0 : " + CountOfAdjacentFrom4To0);
        ListInt1.Add(CountOfAdjacentFrom5To0);
        Debug.Log("CountOfAdjacentFrom5To0 : " + CountOfAdjacentFrom5To0);
        ListInt1.Add(CountOfAdjacentFrom6To0);
        Debug.Log("CountOfAdjacentFrom6To0 : " + CountOfAdjacentFrom6To0);
        //
        int Int1 = ListInt1.Max();
        if (Int1 == CountOfAdjacentFrom4To0)
        {
            ColorOfFirstCandidate = 1;
            CountOfAdjacentFrom4To0 = -1;
            //Debug.Log("優先度1は赤です");
        }
        else
        {
            if (Int1 == CountOfAdjacentFrom5To0)
            {
                ColorOfFirstCandidate = 2;
                CountOfAdjacentFrom5To0 = -1;
                //Debug.Log("優先度1は緑です");
            }
            else
            {
                if (Int1 == CountOfAdjacentFrom6To0)
                {
                    ColorOfFirstCandidate = 3;
                    CountOfAdjacentFrom6To0 = -1;
                    //Debug.Log("優先度1は青です");
                }
            }
        }
        int Int2 = ListInt1.IndexOf(Int1);
        ListInt1[Int2] = -1;
        //
        int Int3 = ListInt1.Max();
        if (Int3 == CountOfAdjacentFrom4To0)
        {
            ColorOfSecondCandidate = 1;
            CountOfAdjacentFrom4To0 = -1;
            //Debug.Log("優先度2は赤です");
        }
        else
        {
            if (Int3 == CountOfAdjacentFrom5To0)
            {
                ColorOfSecondCandidate = 2;
                CountOfAdjacentFrom5To0 = -1;
                //Debug.Log("優先度2は緑です");
            }
            else
            {
                if (Int3 == CountOfAdjacentFrom6To0)
                {
                    ColorOfSecondCandidate = 3;
                    CountOfAdjacentFrom6To0 = -1;
                    //Debug.Log("優先度2は青です");
                }
            }
        }
        int Int4 = ListInt1.IndexOf(Int3);
        ListInt1[Int4] = -1;
        //
        int Int5 = ListInt1.Max();
        if (Int5 == CountOfAdjacentFrom4To0)
        {
            ColorOfThirdCandidate = 1;
            CountOfAdjacentFrom4To0 = -1;
            //Debug.Log("優先度3は赤です");
        }
        else
        {
            if (Int5 == CountOfAdjacentFrom5To0)
            {
                ColorOfThirdCandidate = 2;
                CountOfAdjacentFrom5To0 = -1;
                //Debug.Log("優先度3は緑です");
            }
            else
            {
                if (Int5 == CountOfAdjacentFrom6To0)
                {
                    ColorOfThirdCandidate = 3;
                    CountOfAdjacentFrom6To0 = -1;
                    //Debug.Log("優先度3は青です");
                }
            }
        }
        int Int6 = ListInt1.IndexOf(Int5);
        ListInt1[Int6] = -1;

        Debug.Log("ColorOfFirstCandidate : " + ColorOfFirstCandidate);
        Debug.Log("ColorOfSecondCandidate : " + ColorOfSecondCandidate);
        Debug.Log("ColorOfThirdCandidate : " + ColorOfThirdCandidate);

        Invoke("Evaluating_CubeG", 0);
    }


    //脳
    void Brain()
    {
        List<int> ListInt_BestCoordinateOfFirstCandidate = new List<int> { };
        List<int> ListInt_BestCoordinateOfSecondCandidate = new List<int> { };
        List<int> ListInt_BestCoordinateOfThirdCandidate = new List<int> { };

        Debug.Log("-----------------------------------------------------------------------------------------------------------------------------------------------");

        //CurrentBlockの優先度をリセット
        if (ColorOfFirstCandidate == ColorOfCurrentBlock)
        {
            PriorityOfCurrentBlock = 1;
        }
        if (ColorOfSecondCandidate == ColorOfCurrentBlock)
        {
            PriorityOfCurrentBlock = 3;
        }
        if (ColorOfThirdCandidate == ColorOfCurrentBlock)
        {
            PriorityOfCurrentBlock = 5;
        }

        Debug.Log("CurrentBlockの優先度は" + PriorityOfCurrentBlock + "です");
        Debug.Log("CurrentBlockの色は" + ColorOfCurrentBlock + "です");
        Debug.Log("CurrentBlockの形は" + CurrentBlock + "です");

        //プレイヤーに攻撃
        if (Score_VsAI > 3000 & Score_VsAI <= 15000)
        {
            //AudioSource_AudioSource15.Play();

            Score_VsAI -= 3000;
            PlayerVsAI_Control.TotalNumberOfGotAttack_O += 1;

            if (Score_VsAI > 15000)
            {
                Score_VsAI = 15000;
            }
        }
        //CurrentBlock生成
        for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
        {
            ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
            ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
        }

        //CurrentBlockをホールドするか
        if (ColorOfCurrentBlock != ColorOfFirstCandidate & ListInt_DataOfHoldBlock.Count == 0 |
            ColorOfCurrentBlock != ColorOfFirstCandidate & ColorOfHoldBlock == ColorOfFirstCandidate |
            ColorOfCurrentBlock == ColorOfThirdCandidate & ColorOfHoldBlock == ColorOfSecondCandidate)
        {
            Debug.Log("CurrentBlockをホールドします");

            Invoke("Holding_CurrentBlock", 0);
            Invoke("Brain", 0.3f);
        }
        else
        {
            //
            if (PriorityOfCurrentBlock >= 1)
            {

            }
            if (PriorityOfCurrentBlock >= 3)
            {
                //BestCoordinateOfFirstCandidateを算出
                if (true)
                {
                    List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                    List<int> ListInt_PosXOfTipOf2 = new List<int> { };
                    List<int> ListInt_PosXOfTipOf3 = new List<int> { };
                    List<int> ListInt_CoordinateOfTipOf2 = new List<int> { };
                    List<int> ListInt_CoordinateOfTipOf3 = new List<int> { };
                    int PosXOfTipOf2;
                    int PosXOfTipOf3;
                    int CoordinateOfTipOf2;
                    int CoordinateOfTipOf3;
                    bool IsChanging1To2Or3 = true;

                    //ListInt_TemporaryOfCubeG1の優先度1のCubeの位置を1にし、その他のCubeの位置は-1にする
                    ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 0)
                        {
                            ListInt_TemporaryOfCubeG1[x] = 0;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 1)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 1;
                            }
                            else
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 2)
                                {
                                    ListInt_TemporaryOfCubeG1[x] = 1;
                                }
                                else
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 3)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 4)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 5)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //ListInt_TemporaryOfCubeG1の左の壁に最も近い位置を2にし、右の壁に最も近い位置を3にする
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 1)
                        {
                            if (x % 14 + 1 == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 2;
                            }
                            if (x % 14 + 1 == 12)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 3;
                            }
                        }
                    }
                    //ListInt_TemporaryOfCubeG1の2または3に隣接してる全ての1を2または3にする
                    while (IsChanging1To2Or3 == true)
                    {
                        IsChanging1To2Or3 = false;
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                            {
                                if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 14] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 14] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 1] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 1] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                            }
                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                            {
                                if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 14] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 14] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 1] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 1] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                            }
                        }
                    }
                    //ListInt_PosXOfTipOf2にListInt_TemporaryOfCubeG1の中で2であるPosXを追加し、ListInt_PosXOfTipOf3に3であるPosXを追加する
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (x % 14 + 1 >= 3 & x % 14 + 1 <= 11 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 2)
                                {
                                    ListInt_PosXOfTipOf2.Add(x % 14 + 1);
                                }
                            }
                        }
                        if (x % 14 + 1 >= 2 & x % 14 + 1 <= 12 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                        {
                            if (ListInt_TemporaryOfCubeG1[x - 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 3)
                                {
                                    ListInt_PosXOfTipOf3.Add(x % 14 + 1);
                                }
                            }
                        }
                    }
                    //Debug.Log("ListInt_PosXOfTipOf2.Count : " + ListInt_PosXOfTipOf2.Count);
                    //Debug.Log("ListInt_PosXOfTipOf3.Count : " + ListInt_PosXOfTipOf3.Count);
                    //
                    if (ListInt_PosXOfTipOf2.Count > 0)
                    {
                        //Debug.Log("左から計算");

                        //PosXOfTipOf2に先右端のPosXを代入する
                        PosXOfTipOf2 = ListInt_PosXOfTipOf2.Max();
                        //ListInt_CoordinateOfTipOf2にCoordinateがPosXOfTipOf2の全Coordinateを追加する
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                            {
                                if (x % 14 + 1 == PosXOfTipOf2)
                                {
                                    ListInt_CoordinateOfTipOf2.Add(x);
                                }
                            }
                        }
                        //CoordinateOfTipOf2先右端のPosXを代入する
                        CoordinateOfTipOf2 = ListInt_CoordinateOfTipOf2.Max();
                        if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 1] == 0)
                        {
                            //BestCoordinateOfFirstCandidateを算出
                            ListInt_BestCoordinateOfFirstCandidate.Add(CoordinateOfTipOf2 + 1);
                        }
                        else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 14] == 0)
                        {
                            //BestCoordinateOfFirstCandidateを算出
                            ListInt_BestCoordinateOfFirstCandidate.Add(CoordinateOfTipOf2 + 14);
                        }
                    }
                    //
                    if (ListInt_PosXOfTipOf3.Count > 0)
                    {
                        //Debug.Log("右から計算");

                        //PosXOfTipOf3に先左端のPosXを代入する
                        PosXOfTipOf3 = ListInt_PosXOfTipOf3.Min();
                        //ListInt_CoordinateOfTipOf3にCoordinateがPosXOfTipOf3の全Coordinateを追加する
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                            {
                                if (x % 14 + 1 == PosXOfTipOf3)
                                {
                                    ListInt_CoordinateOfTipOf3.Add(x);
                                }
                            }
                        }
                        //CoordinateOfTipOf3先左端のPosXを代入する
                        CoordinateOfTipOf3 = ListInt_CoordinateOfTipOf3.Max();

                        if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 - 1] == 0)
                        {
                            //BestCoordinateOfFirstCandidateを算出
                            ListInt_BestCoordinateOfFirstCandidate.Add(CoordinateOfTipOf3 - 1);
                        }
                        else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 + 14] == 0)
                        {
                            //BestCoordinateOfFirstCandidateを算出
                            ListInt_BestCoordinateOfFirstCandidate.Add(CoordinateOfTipOf3 + 14);
                        }
                    }
                    //
                    if (ListInt_PosXOfTipOf2.Count == 0 & ListInt_PosXOfTipOf3.Count == 0)
                    {
                        List<int> ListInt1 = new List<int> { };

                        //
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 0)
                            {
                                if (x % 14 + 1 == 3)
                                {
                                    if (x >= 30)
                                    {
                                        ListInt1.Add(x);
                                    }
                                }
                            }
                        }
                        //
                        ListInt_BestCoordinateOfFirstCandidate.Add(ListInt1.Min());
                    }
                    //
                    Debug.Log("BestCoordinateOfFirstCandidate : " + BestCoordinateOfFirstCandidate);
                }
            }
            if (PriorityOfCurrentBlock >= 5)
            {
                //BestCoordinateOfSecondCandidateを算出
                if (true)
                {
                    List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                    List<int> ListInt_PosXOfTipOf2 = new List<int> { };
                    List<int> ListInt_PosXOfTipOf3 = new List<int> { };
                    List<int> ListInt_CoordinateOfTipOf2 = new List<int> { };
                    List<int> ListInt_CoordinateOfTipOf3 = new List<int> { };
                    int PosXOfTipOf2;
                    int PosXOfTipOf3;
                    int CoordinateOfTipOf2;
                    int CoordinateOfTipOf3;
                    bool IsFallingCube = true;
                    bool IsChanging1To2Or3 = true;

                    //ListInt_TemporaryOfCubeG1の優先度1のCubeの位置を1にし、その他のCubeの位置は-1にする
                    ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 0)
                        {
                            ListInt_TemporaryOfCubeG1[x] = 0;
                        }
                        else
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 1)
                            {
                                ListInt_TemporaryOfCubeG1[x] = -1;
                            }
                            else
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 2)
                                {
                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                }
                                else
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 3)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = 1;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 4)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 5)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //ListInt_TemporaryOfCubeG1を全てのCubeを落下させた後の状態にする
                    while (IsFallingCube == true)
                    {
                        IsFallingCube = false;

                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (x >= 44)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 1 | ListInt_TemporaryOfCubeG1[x] == -1)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                    {
                                        ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                        ListInt_TemporaryOfCubeG1[x] = 0;
                                        IsFallingCube = true;

                                    }
                                }
                            }
                        }
                    }
                    //ListInt_TemporaryOfCubeG1の左の壁に最も近い位置を2にし、右の壁に最も近い位置を3にする
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (ListInt_TemporaryOfCubeG1[x] == 1)
                        {
                            if (x % 14 + 1 == 3)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 2;
                            }
                            if (x % 14 + 1 == 12)
                            {
                                ListInt_TemporaryOfCubeG1[x] = 3;
                            }
                        }
                    }
                    //ListInt_TemporaryOfCubeG1の2または3に隣接してる全ての1を2または3にする
                    while (IsChanging1To2Or3 == true)
                    {
                        IsChanging1To2Or3 = false;
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                            {
                                if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 14] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 14] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 1] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 1] = 2;
                                    IsChanging1To2Or3 = true;
                                }
                            }
                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                            {
                                if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 14] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 14] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x + 1] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                                if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                {
                                    ListInt_TemporaryOfCubeG1[x - 1] = 3;
                                    IsChanging1To2Or3 = true;
                                }
                            }
                        }
                    }
                    //ListInt_PosXOfTipOf2にListInt_TemporaryOfCubeG1の中で2であるPosXを追加し、ListInt_PosXOfTipOf3に3であるPosXを追加する
                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                    {
                        if (x % 14 + 1 >= 3 & x % 14 + 1 <= 11 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                        {
                            if (ListInt_TemporaryOfCubeG1[x + 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 2)
                                {
                                    ListInt_PosXOfTipOf2.Add(x % 14 + 1);
                                }
                            }
                        }
                        if (x % 14 + 1 >= 2 & x % 14 + 1 <= 12 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                        {
                            if (ListInt_TemporaryOfCubeG1[x - 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 3)
                                {
                                    ListInt_PosXOfTipOf3.Add(x % 14 + 1);
                                }
                            }
                        }
                    }
                    //Debug.Log("ListInt_PosXOfTipOf2.Count : " + ListInt_PosXOfTipOf2.Count);
                    //Debug.Log("ListInt_PosXOfTipOf3.Count : " + ListInt_PosXOfTipOf3.Count);
                    //
                    if (ListInt_PosXOfTipOf2.Count > 0)
                    {
                        //Debug.Log("左から計算");

                        //PosXOfTipOf2に先右端のPosXを代入する
                        PosXOfTipOf2 = ListInt_PosXOfTipOf2.Max();
                        //ListInt_CoordinateOfTipOf2にCoordinateがPosXOfTipOf2の全Coordinateを追加する
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                            {
                                if (x % 14 + 1 == PosXOfTipOf2)
                                {
                                    ListInt_CoordinateOfTipOf2.Add(x);
                                }
                            }
                        }
                        //CoordinateOfTipOf2先右端のPosXを代入する
                        CoordinateOfTipOf2 = ListInt_CoordinateOfTipOf2.Max();
                        if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 1] == 0)
                        {
                            //BestCoordinateOfSecondCandidateを算出
                            ListInt_BestCoordinateOfSecondCandidate.Add(CoordinateOfTipOf2 + 1);
                        }
                        else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 14] == 0)
                        {
                            //BestCoordinateOfSecondCandidateを算出
                            ListInt_BestCoordinateOfSecondCandidate.Add(CoordinateOfTipOf2 + 14);
                        }
                    }
                    //
                    if (ListInt_PosXOfTipOf3.Count > 0)
                    {
                        //Debug.Log("右から計算");

                        //PosXOfTipOf3に先左端のPosXを代入する
                        PosXOfTipOf3 = ListInt_PosXOfTipOf3.Min();
                        //ListInt_CoordinateOfTipOf3にCoordinateがPosXOfTipOf3の全Coordinateを追加する
                        for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        {
                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                            {
                                if (x % 14 + 1 == PosXOfTipOf3)
                                {
                                    ListInt_CoordinateOfTipOf3.Add(x);
                                }
                            }
                        }
                        //CoordinateOfTipOf3先左端のPosXを代入する
                        CoordinateOfTipOf3 = ListInt_CoordinateOfTipOf3.Max();

                        if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 - 1] == 0)
                        {
                            //BestCoordinateOfSecondCandidateを算出
                            ListInt_BestCoordinateOfSecondCandidate.Add(CoordinateOfTipOf3 - 1);
                        }
                        else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 + 14] == 0)
                        {
                            //BestCoordinateOfSecondCandidateを算出
                            ListInt_BestCoordinateOfSecondCandidate.Add(CoordinateOfTipOf3 + 14);
                        }
                    }
                    //
                    if (ListInt_PosXOfTipOf2.Count == 0 & ListInt_PosXOfTipOf3.Count == 0)
                    {
                        //List<int> ListInt1 = new List<int> { };

                        ////
                        //for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                        //{
                        //    if (ListInt_TemporaryOfCubeG1[x] == 0)
                        //    {
                        //        if (x % 14 + 1 == 12)
                        //        {
                        //            if (x >= 30)
                        //            {
                        //                ListInt1.Add(x);
                        //            }
                        //        }
                        //    }
                        //}
                        ////
                        //ListInt_BestCoordinateOfSecondCandidate.Add(ListInt1.Min());
                    }
                    //
                    Debug.Log("BestCoordinateOfSecondCandidate : " + BestCoordinateOfSecondCandidate);
                }
            }
            //
            if (true)
            {
                List<int> ListInt_CoordinateOfTipOf2 = new List<int> { };
                List<int> ListInt_CoordinateOfTipOf3 = new List<int> { };

                List<int> ListInt_PosXDifferenceMax = new List<int> { };
                List<int> ListInt_BestAAAAA = new List<int> { };

                List<int> ListInt_CountOfAdjacentMax = new List<int> { };
                List<int> ListInt_BestBBBBB = new List<int> { };

                List<int> ListInt_PosYOf3MinMin = new List<int> { };
                List<int> ListInt_BestCCCCC = new List<int> { };

                List<int> ListInt_PosYOf4MaxMax = new List<int> { };
                List<int> ListInt_BestDDDDD = new List<int> { };

                List<int> ListInt_BoolAt = new List<int> { };
                List<int> ListInt_BestEEEEE = new List<int> { };

                List<int> ListInt_CountOfOverlapedMax = new List<int> { };
                List<int> ListInt_BestFFFFF = new List<int> { };

                List<int> ListInt_CorrectionValueCandidate = new List<int> { };
                int CorrectionValue = 0;
                int PosXDifference = 0;

                //
                switch (PriorityOfCurrentBlock)
                {
                    case 1:
                        if (true)
                        {
                            //BestCoordinateOfFirstCandidateを算出
                            if (true)
                            {
                                List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                List<int> ListInt_PosXOfTipOf2 = new List<int> { };
                                List<int> ListInt_PosXOfTipOf3 = new List<int> { };
                                int PosXOfTipOf2;
                                int PosXOfTipOf3;
                                int CoordinateOfTipOf2;
                                int CoordinateOfTipOf3;
                                bool IsChanging1To2Or3 = true;

                                //ListInt_TemporaryOfCubeG1の優先度1のCubeの位置を1にし、その他のCubeの位置は-1にする
                                ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 0)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = 0;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 1)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = 1;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 3)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の左の壁に最も近い位置を2にし、右の壁に最も近い位置を3にする
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        if (x % 14 + 1 == 3)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 2;
                                        }
                                        if (x % 14 + 1 == 12)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 3;
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の2または3に隣接してる全ての1を2または3にする
                                while (IsChanging1To2Or3 == true)
                                {
                                    IsChanging1To2Or3 = false;
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                    }
                                }
                                //ListInt_PosXOfTipOf2にListInt_TemporaryOfCubeG1の中で2であるPosXを追加し、ListInt_PosXOfTipOf3に3であるPosXを追加する
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x % 14 + 1 >= 3 & x % 14 + 1 <= 11 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x + 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_PosXOfTipOf2.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                    if (x % 14 + 1 >= 2 & x % 14 + 1 <= 12 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x - 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_PosXOfTipOf3.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                }
                                //Debug.Log("ListInt_PosXOfTipOf2.Count : " + ListInt_PosXOfTipOf2.Count);
                                //Debug.Log("ListInt_PosXOfTipOf3.Count : " + ListInt_PosXOfTipOf3.Count);
                                //
                                if (ListInt_PosXOfTipOf2.Count > ListInt_PosXOfTipOf3.Count | ListInt_PosXOfTipOf2.Count == ListInt_PosXOfTipOf3.Count & ListInt_PosXOfTipOf2.Count != 0 & ListInt_PosXOfTipOf3.Count != 0)
                                {
                                    //Debug.Log("左から計算");

                                    //PosXOfTipOf2に先右端のPosXを代入する
                                    PosXOfTipOf2 = ListInt_PosXOfTipOf2.Max();
                                    //ListInt_CoordinateOfTipOf2にCoordinateがPosXOfTipOf2の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf2)
                                            {
                                                ListInt_CoordinateOfTipOf2.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf2先右端のPosXを代入する
                                    CoordinateOfTipOf2 = ListInt_CoordinateOfTipOf2.Max();
                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 1] == 0)
                                    {
                                        //BestCoordinateOfFirstCandidateを算出
                                        BestCoordinateOfFirstCandidate = CoordinateOfTipOf2 + 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 14] == 0)
                                    {
                                        //BestCoordinateOfFirstCandidateを算出
                                        BestCoordinateOfFirstCandidate = CoordinateOfTipOf2 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count < ListInt_PosXOfTipOf3.Count)
                                {
                                    //Debug.Log("右から計算");

                                    //PosXOfTipOf3に先左端のPosXを代入する
                                    PosXOfTipOf3 = ListInt_PosXOfTipOf3.Min();
                                    //ListInt_CoordinateOfTipOf3にCoordinateがPosXOfTipOf3の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf3)
                                            {
                                                ListInt_CoordinateOfTipOf3.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf3先左端のPosXを代入する
                                    CoordinateOfTipOf3 = ListInt_CoordinateOfTipOf3.Max();

                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 - 1] == 0)
                                    {
                                        //BestCoordinateOfFirstCandidateを算出
                                        BestCoordinateOfFirstCandidate = CoordinateOfTipOf3 - 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 + 14] == 0)
                                    {
                                        //BestCoordinateOfFirstCandidateを算出
                                        BestCoordinateOfFirstCandidate = CoordinateOfTipOf3 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count == 0 & ListInt_PosXOfTipOf3.Count == 0)
                                {
                                    List<int> ListInt1 = new List<int> { };

                                    //
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 0)
                                        {
                                            if (x % 14 + 1 == 3)
                                            {
                                                if (x >= 30)
                                                {
                                                    ListInt1.Add(x);
                                                }
                                            }
                                        }
                                    }
                                    //
                                    BestCoordinateOfFirstCandidate = ListInt1.Min();
                                }
                                //
                                //Debug.Log("BestCoordinateOfFirstCandidate : " + BestCoordinateOfFirstCandidate);
                            }
                            //RotationOfCurrentBlockを算出を決定
                            if (true)
                            {
                                Debug.Log("ListInt_CoordinateOfTipOf2.Count : " + ListInt_CoordinateOfTipOf2.Count);
                                Debug.Log("ListInt_CoordinateOfTipOf3.Count : " + ListInt_CoordinateOfTipOf3.Count);

                                ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                                DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                                //TemporaryBlock1の回転を初期化
                                for (int x = 1; x < ((DirectionOfTemporaryBlock1 - 4) * -1) + 2; x++)
                                {
                                    ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                    for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                    }

                                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                }
                                //
                                for (int x = 0; x < 4; x++)
                                {
                                    List<int> ListInt_PosXDifference = new List<int> { };
                                    List<int> ListInt_CountOfAdjacent = new List<int> { };
                                    List<int> ListInt_PosYOf3Min = new List<int> { };
                                    List<int> ListInt_PosYOf4Max = new List<int> { };
                                    List<int> ListInt_Bool = new List<int> { };
                                    List<int> ListInt_CountOfOverlaped = new List<int> { };
                                    int CorrectionValueCandidate = 0;

                                    //
                                    for (int xx = 1; xx < (x + 1); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                    //CorrectionValueCandidate算出
                                    while (true)
                                    {
                                        int xxx = 0;

                                        for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                        {
                                            if (ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != -1 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 13 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 27 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 41)
                                            {
                                                xxx += 1;
                                            }
                                        }
                                        if (xxx == ListInt_DataOfTemporaryBlock1.Count)
                                        {
                                            CorrectionValueCandidate += 1;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    ListInt_CorrectionValueCandidate.Add(CorrectionValueCandidate);
                                    //
                                    for (int xx = 0; xx < 11 - ListListInt_SideLengthOfBlock[CurrentBlock - 1][x]; xx++)
                                    {
                                        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                        List<int> ListInt_PosXOf2 = new List<int> { };
                                        List<int> ListInt_PosXOf4 = new List<int> { };
                                        List<int> ListInt_PosXOf2And4 = new List<int> { };
                                        List<int> ListInt_PosYOf4 = new List<int> { };
                                        List<int> ListInt_PosYOf3 = new List<int> { };
                                        int a = 0;
                                        int b = 0;
                                        int c = 0;
                                        int d = 0;
                                        int e = 0;
                                        int f = 0;
                                        int g = 0;
                                        int h = 0;
                                        int i = 0;
                                        int j = 0;
                                        int Bool = 0;
                                        int CountOfOverlaped = 0;
                                        bool IsChanging1To2 = true;
                                        bool IsChanging3To4 = true;
                                        bool IsChanging1And3To4 = true;

                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                            {
                                                if (xxx % 14 + 1 == 3 | xxx % 14 + 1 == 12)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1To2 == true)
                                        {
                                            IsChanging1To2 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        if (ListInt_TemporaryOfCubeG1.Count(value => value == 2) == 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                            {
                                                ListInt_PosXOf2.Add(xxx % 14 + 1);
                                            }
                                        }
                                        //
                                        ListInt_PosXOf2 = ListInt_PosXOf2.Distinct().ToList();
                                        if (ListInt_PosXOf2.Count > 0)
                                        {
                                            PosXDifference = ListInt_PosXOf2.Count;
                                        }
                                        else
                                        {
                                            PosXDifference = 0;
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                if (xxx % 14 + 1 == BestCoordinateOfFirstCandidate % 14 + 1)
                                                {
                                                    CountOfOverlaped += 1;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                ListInt_PosYOf3.Add(Mathf.FloorToInt(xxx / 14) + 1);

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf2.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf2[xxxx] | xxx - 1 == ListInt_CoordinateOfTipOf2[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf3.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf3[xxxx] | xxx + 1 == ListInt_CoordinateOfTipOf3[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1And3To4 == true)
                                        {
                                            IsChanging1And3To4 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1 | ListInt_TemporaryOfCubeG1[xxx + 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1 | ListInt_TemporaryOfCubeG1[xxx - 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1 | ListInt_TemporaryOfCubeG1[xxx + 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1 | ListInt_TemporaryOfCubeG1[xxx - 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                            {
                                                ListInt_PosXOf4.Add(xxx % 14 + 1);
                                                ListInt_PosYOf4.Add(Mathf.FloorToInt(xxx / 14) + 1);
                                            }
                                        }
                                        //
                                        if (ListInt_PosYOf4.Count > 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] != 0)
                                                {
                                                    if (Mathf.FloorToInt(xxx / 14) + 1 > ListInt_PosYOf4.Max())
                                                    {
                                                        Bool = 1;
                                                    }
                                                    else
                                                    {
                                                        Bool = 0;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Bool = 0;
                                        }
                                        //ListInt_PosXDifferenceに追加
                                        ListInt_PosXOf2And4.AddRange(ListInt_PosXOf2);
                                        ListInt_PosXOf2And4.AddRange(ListInt_PosXOf4);
                                        ListInt_PosXOf2And4 = ListInt_PosXOf2And4.Distinct().ToList();
                                        if (ListInt_PosXOf2And4.Count > 0)
                                        {
                                            ListInt_PosXDifference.Add(ListInt_PosXOf2And4.Count);
                                        }
                                        else
                                        {
                                            ListInt_PosXDifference.Add(0);
                                        }
                                        //ListInt_CountOfAdjacentに追加
                                        if (ListInt_TemporaryOfCubeG1.Count(value => value == 4) > 0)
                                        {
                                            ListInt_CountOfAdjacent.Add(ListInt_TemporaryOfCubeG1.Count(value => value == 4));
                                        }
                                        else
                                        {
                                            ListInt_CountOfAdjacent.Add(0);
                                        }
                                        //ListInt_PosYOf3Minに追加
                                        if (ListInt_PosYOf3.Count > 0)
                                        {
                                            ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                        }
                                        else
                                        {
                                            ListInt_PosYOf3Min.Add(0);
                                        }
                                        //ListInt_PosYOf4Maxに追加
                                        if (ListInt_PosYOf4.Count > 0)
                                        {
                                            ListInt_PosYOf4Max.Add(ListInt_PosYOf4.Max());
                                        }
                                        else
                                        {
                                            ListInt_PosYOf4Max.Add(0);
                                        }
                                        //ListInt_Boolに追加
                                        ListInt_Bool.Add(Bool);
                                        //ListInt_CountOfOverlapedに追加
                                        ListInt_CountOfOverlaped.Add(CountOfOverlaped);
                                    }
                                    //ListInt_PosXDifferenceMaxにListInt_PosXDifferenceの最大値を追加
                                    if (true)
                                    {
                                        ListInt_PosXDifferenceMax.Add(ListInt_PosXDifference.Max());
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_BestAAAAA.Add(Int2);
                                    }
                                    //ListInt_CountOfAdjacentMaxにListInt_CountOfAdjacentの最大値を追加
                                    if (true)
                                    {
                                        ListInt_CountOfAdjacentMax.Add(ListInt_CountOfAdjacent.Max());
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BestBBBBB.Add(Int2);
                                    }
                                    //ListInt_PosYOf3MinMinにListInt_PosYOf3Minの最小値を追加
                                    if (true)
                                    {
                                        ListInt_PosYOf3MinMin.Add(ListInt_PosYOf3Min.Min());
                                        int Int1 = ListInt_PosYOf3Min.Min();
                                        int Int2 = ListInt_PosYOf3Min.LastIndexOf(Int1);
                                        ListInt_BestCCCCC.Add(Int2);
                                    }
                                    //ListInt_PosYOf4MaxMaxにListInt_PosYOf4Maxの最大値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_PosYOf4MaxMax.Add(ListInt_PosYOf4Max[Int2]);
                                    }
                                    //ListInt_BoolAtにListInt_Boolの真偽の値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BoolAt.Add(ListInt_Bool[Int2]);
                                    }
                                    //ListInt_CountOfOverlapedMaxにListInt_CountOfOverlapedの最大値を追加
                                    if (true)
                                    {
                                        ListInt_CountOfOverlapedMax.Add(ListInt_CountOfOverlaped.Max());
                                        int Int1 = ListInt_CountOfOverlaped.Max();
                                        int Int2 = ListInt_CountOfOverlaped.LastIndexOf(Int1);
                                        ListInt_BestFFFFF.Add(Int2);
                                    }
                                    //TemporaryBlock1の回転を初期化
                                    for (int xx = 1; xx < (5 - x); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                }
                                //
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        //LD
                                        if (ListListInt_SideLengthOfBlock[CurrentBlock - 1][DirectionOfCurrentBlock - 1] != ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max())
                                        {
                                            int IntMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(IntMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                    }
                                    else
                                    {
                                        //B_1
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                        CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                        RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_PosXDifferenceMax.Max() == 10)
                                        {
                                            //F
                                            int IntMax = ListInt_CountOfOverlapedMax.Max();
                                            int Int1 = ListInt_CountOfOverlapedMax.IndexOf(IntMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                        else
                                        {
                                            if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                            {
                                                //C_1
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                                CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                            }
                                            else
                                            {
                                                int Int2 = ListInt_CountOfAdjacentMax.Max();
                                                int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                                if (ListInt_BoolAt[Int3] == 0)
                                                {
                                                    //C_2
                                                    int IntMin = ListInt_PosYOf3MinMin.Min();
                                                    int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                                    CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                    RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                                }
                                                else
                                                {
                                                    //B_2
                                                    int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                    int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                                    CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                    RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            //A_1
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1 + 1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1 + 1) - 1;
                                        }
                                        else
                                        {
                                            //A_2
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                    }
                                }
                                //
                                while (RotationOfCurrentBlock > 4)
                                {
                                    RotationOfCurrentBlock -= 4;
                                }
                                //Debug.Log("RotationOfCurrentBlock : " + RotationOfCurrentBlock);
                            }
                            //BestPosXOfFirstCandidateを算出
                            if (true)
                            {
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        Debug.Log("LD");
                                        BestPosXOfFirstCandidate = 3 - CorrectionValue;
                                    }
                                    else
                                    {
                                        Debug.Log("B_1");
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                        BestPosXOfFirstCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_PosXDifferenceMax.Max() == 10)
                                        {
                                            Debug.Log("F");
                                            int IntMax = ListInt_CountOfOverlapedMax.Max();
                                            int Int1 = ListInt_CountOfOverlapedMax.IndexOf(IntMax);
                                            BestPosXOfFirstCandidate = ListInt_BestFFFFF[Int1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                            {
                                                Debug.Log("C_1");
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                                BestPosXOfFirstCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                            }
                                            else
                                            {
                                                int Int2 = ListInt_CountOfAdjacentMax.Max();
                                                int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                                if (ListInt_BoolAt[Int3] == 0)
                                                {
                                                    Debug.Log("C_2");
                                                    int IntMin = ListInt_PosYOf3MinMin.Min();
                                                    int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                                    BestPosXOfFirstCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                                }
                                                else
                                                {
                                                    Debug.Log("B_2");
                                                    int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                    int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                                    BestPosXOfFirstCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            Debug.Log("A_1");
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);
                                            BestPosXOfFirstCandidate = ListInt_BestAAAAA[Int1 + 1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            Debug.Log("A_2");
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);
                                            BestPosXOfFirstCandidate = ListInt_BestAAAAA[Int1] + 3 - CorrectionValue;
                                        }
                                    }
                                }
                            }
                            //PosXOfCurrentBlockを算出
                            if (true)
                            {
                                PosXOfCurrentBlock = BestPosXOfFirstCandidate;
                                //Debug.Log("PosXOfCurrentBlock : " + PosXOfCurrentBlock);
                            }
                        }
                        break;
                    case 3:
                        if (true)
                        {
                            //BestCoordinateOfSecondCandidateを算出
                            if (true)
                            {
                                List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                List<int> ListInt_PosXOfTipOf2 = new List<int> { };
                                List<int> ListInt_PosXOfTipOf3 = new List<int> { };
                                int PosXOfTipOf2;
                                int PosXOfTipOf3;
                                int CoordinateOfTipOf2;
                                int CoordinateOfTipOf3;
                                bool IsFallingCube = true;
                                bool IsChanging1To2Or3 = true;

                                //ListInt_TemporaryOfCubeG1の優先度1のCubeの位置を1にし、その他のCubeの位置は-1にする
                                ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 0)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = 0;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 1)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 3)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = 1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = 1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1を全てのCubeを落下させた後の状態にする
                                while (IsFallingCube == true)
                                {
                                    IsFallingCube = false;

                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (x >= 44)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 1 | ListInt_TemporaryOfCubeG1[x] == -1)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                                    IsFallingCube = true;

                                                }
                                            }
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の左の壁に最も近い位置を2にし、右の壁に最も近い位置を3にする
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        if (x % 14 + 1 == 3)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 2;
                                        }
                                        if (x % 14 + 1 == 12)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 3;
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の2または3に隣接してる全ての1を2または3にする
                                while (IsChanging1To2Or3 == true)
                                {
                                    IsChanging1To2Or3 = false;
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                    }
                                }
                                //ListInt_PosXOfTipOf2にListInt_TemporaryOfCubeG1の中で2であるPosXを追加し、ListInt_PosXOfTipOf3に3であるPosXを追加する
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x % 14 + 1 >= 3 & x % 14 + 1 <= 11 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x + 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_PosXOfTipOf2.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                    if (x % 14 + 1 >= 2 & x % 14 + 1 <= 12 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x - 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_PosXOfTipOf3.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                }
                                //Debug.Log("ListInt_PosXOfTipOf2.Count : " + ListInt_PosXOfTipOf2.Count);
                                //Debug.Log("ListInt_PosXOfTipOf3.Count : " + ListInt_PosXOfTipOf3.Count);
                                //
                                if (ListInt_PosXOfTipOf2.Count > ListInt_PosXOfTipOf3.Count | ListInt_PosXOfTipOf2.Count == ListInt_PosXOfTipOf3.Count & ListInt_PosXOfTipOf2.Count != 0 & ListInt_PosXOfTipOf3.Count != 0)
                                {
                                    //Debug.Log("左から計算");

                                    //PosXOfTipOf2に先右端のPosXを代入する
                                    PosXOfTipOf2 = ListInt_PosXOfTipOf2.Max();
                                    //ListInt_CoordinateOfTipOf2にCoordinateがPosXOfTipOf2の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf2)
                                            {
                                                ListInt_CoordinateOfTipOf2.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf2先右端のPosXを代入する
                                    CoordinateOfTipOf2 = ListInt_CoordinateOfTipOf2.Max();
                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 1] == 0)
                                    {
                                        //BestCoordinateOfSecondCandidateを算出
                                        BestCoordinateOfSecondCandidate = CoordinateOfTipOf2 + 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 14] == 0)
                                    {
                                        //BestCoordinateOfSecondCandidateを算出
                                        BestCoordinateOfSecondCandidate = CoordinateOfTipOf2 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count < ListInt_PosXOfTipOf3.Count)
                                {
                                    //Debug.Log("右から計算");

                                    //PosXOfTipOf3に先左端のPosXを代入する
                                    PosXOfTipOf3 = ListInt_PosXOfTipOf3.Min();
                                    //ListInt_CoordinateOfTipOf3にCoordinateがPosXOfTipOf3の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf3)
                                            {
                                                ListInt_CoordinateOfTipOf3.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf3先左端のPosXを代入する
                                    CoordinateOfTipOf3 = ListInt_CoordinateOfTipOf3.Max();

                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 - 1] == 0)
                                    {
                                        //BestCoordinateOfSecondCandidateを算出
                                        BestCoordinateOfSecondCandidate = CoordinateOfTipOf3 - 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 + 14] == 0)
                                    {
                                        //BestCoordinateOfSecondCandidateを算出
                                        BestCoordinateOfSecondCandidate = CoordinateOfTipOf3 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count == 0 & ListInt_PosXOfTipOf3.Count == 0)
                                {
                                    List<int> ListInt1 = new List<int> { };

                                    //
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 0)
                                        {
                                            if (x % 14 + 1 == 12)
                                            {
                                                if (x >= 30)
                                                {
                                                    ListInt1.Add(x);
                                                }
                                            }
                                        }
                                    }
                                    //
                                    BestCoordinateOfSecondCandidate = ListInt1.Min();
                                }
                                //
                                //Debug.Log("BestCoordinateOfSecondCandidate : " + BestCoordinateOfSecondCandidate);
                            }
                            //RotationOfCurrentBlockを算出を決定
                            if (true)
                            {
                                Debug.Log("ListInt_CoordinateOfTipOf2.Count : " + ListInt_CoordinateOfTipOf2.Count);
                                Debug.Log("ListInt_CoordinateOfTipOf3.Count : " + ListInt_CoordinateOfTipOf3.Count);

                                ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                                DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                                //TemporaryBlock1の回転を初期化
                                for (int x = 1; x < ((DirectionOfTemporaryBlock1 - 4) * -1) + 2; x++)
                                {
                                    ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                    for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                    }

                                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                }
                                //
                                for (int x = 0; x < 4; x++)
                                {
                                    List<int> ListInt_PosXDifference = new List<int> { };
                                    List<int> ListInt_CountOfAdjacent = new List<int> { };
                                    List<int> ListInt_PosYOf3Min = new List<int> { };
                                    List<int> ListInt_PosYOf4Max = new List<int> { };
                                    List<int> ListInt_Bool = new List<int> { };
                                    int CorrectionValueCandidate = 0;

                                    //
                                    for (int xx = 1; xx < (x + 1); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                    //CorrectionValueCandidate算出
                                    while (true)
                                    {
                                        int xxx = 0;

                                        for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                        {
                                            if (ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != -1 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 13 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 27 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 41)
                                            {
                                                xxx += 1;
                                            }
                                        }
                                        if (xxx == ListInt_DataOfTemporaryBlock1.Count)
                                        {
                                            CorrectionValueCandidate += 1;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    ListInt_CorrectionValueCandidate.Add(CorrectionValueCandidate);
                                    //
                                    for (int xx = 0; xx < 11 - ListListInt_SideLengthOfBlock[CurrentBlock - 1][x]; xx++)
                                    {
                                        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                        List<int> ListInt_PosXOf2 = new List<int> { };
                                        List<int> ListInt_PosXOf4 = new List<int> { };
                                        List<int> ListInt_PosXOf2And4 = new List<int> { };
                                        List<int> ListInt_PosYOf4 = new List<int> { };
                                        List<int> ListInt_PosYOf3 = new List<int> { };
                                        int a = 0;
                                        int b = 0;
                                        int c = 0;
                                        int d = 0;
                                        int e = 0;
                                        int f = 0;
                                        int g = 0;
                                        int h = 0;
                                        int i = 0;
                                        int j = 0;
                                        int Bool = 0;
                                        bool IsFallingCube = true;
                                        bool IsChanging1To2 = true;
                                        bool IsChanging3To4 = true;
                                        bool IsChanging1And3To4 = true;
                                        bool IsOverlaped = false;

                                        //-----------------------------------------------------------------
                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 0;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        while (IsFallingCube == true)
                                        {
                                            IsFallingCube = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (xxx >= 44)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 1 | ListInt_TemporaryOfCubeG1[xxx] == -1)
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx - 14] == 0)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx - 14] = ListInt_TemporaryOfCubeG1[xxx];
                                                            ListInt_TemporaryOfCubeG1[xxx] = 0;
                                                            IsFallingCube = true;

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                            {
                                                if (xxx % 14 + 1 == 3 | xxx % 14 + 1 == 12)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1To2 == true)
                                        {
                                            IsChanging1To2 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        if (ListInt_TemporaryOfCubeG1.Count(value => value == 2) == 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                            {
                                                ListInt_PosXOf2.Add(xxx % 14 + 1);
                                            }
                                        }
                                        //
                                        ListInt_PosXOf2 = ListInt_PosXOf2.Distinct().ToList();
                                        if (ListInt_PosXOf2.Count > 0)
                                        {
                                            PosXDifference = ListInt_PosXOf2.Count;
                                        }
                                        else
                                        {
                                            PosXDifference = 0;
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                ListInt_PosYOf3.Add(Mathf.FloorToInt(xxx / 14) + 1);

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf2.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf2[xxxx] | xxx - 1 == ListInt_CoordinateOfTipOf2[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf3.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf3[xxxx] | xxx + 1 == ListInt_CoordinateOfTipOf3[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1And3To4 == true)
                                        {
                                            IsChanging1And3To4 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1 | ListInt_TemporaryOfCubeG1[xxx + 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1 | ListInt_TemporaryOfCubeG1[xxx - 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1 | ListInt_TemporaryOfCubeG1[xxx + 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1 | ListInt_TemporaryOfCubeG1[xxx - 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                            {
                                                ListInt_PosXOf4.Add(xxx % 14 + 1);
                                                ListInt_PosYOf4.Add(Mathf.FloorToInt(xxx / 14) + 1);
                                            }
                                        }
                                        //
                                        if (ListInt_PosYOf4.Count > 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] != 0)
                                                {
                                                    if (Mathf.FloorToInt(xxx / 14) + 1 > ListInt_PosYOf4.Max())
                                                    {
                                                        Bool = 1;
                                                    }
                                                    else
                                                    {
                                                        Bool = 0;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Bool = 0;
                                        }
                                        //-----------------------------------------------------------------
                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfFirstCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[xxx]] == 3)
                                            {
                                                IsOverlaped = true;
                                            }
                                        }
                                        //
                                        if (IsOverlaped == true)
                                        {
                                            //ListInt_PosXDifferenceに追加
                                            ListInt_PosXDifference.Add(-1);
                                            //ListInt_CountOfAdjacentに追加
                                            ListInt_CountOfAdjacent.Add(-1);
                                            //ListInt_PosYOf3Minに追加
                                            ListInt_PosYOf3Min.Add(-1);
                                            //ListInt_PosYOf4Maxに追加
                                            ListInt_PosYOf4Max.Add(-1);
                                            //ListInt_Boolに追加
                                            ListInt_Bool.Add(-1);
                                        }
                                        else
                                        {
                                            //ListInt_PosXDifferenceに追加
                                            ListInt_PosXOf2And4.AddRange(ListInt_PosXOf2);
                                            ListInt_PosXOf2And4.AddRange(ListInt_PosXOf4);
                                            ListInt_PosXOf2And4 = ListInt_PosXOf2And4.Distinct().ToList();
                                            if (ListInt_PosXOf2And4.Count > 0)
                                            {
                                                ListInt_PosXDifference.Add(ListInt_PosXOf2And4.Count);
                                            }
                                            else
                                            {
                                                ListInt_PosXDifference.Add(0);
                                            }
                                            //ListInt_CountOfAdjacentに追加
                                            if (ListInt_TemporaryOfCubeG1.Count(value => value == 4) > 0)
                                            {
                                                ListInt_CountOfAdjacent.Add(ListInt_TemporaryOfCubeG1.Count(value => value == 4));
                                            }
                                            else
                                            {
                                                ListInt_CountOfAdjacent.Add(0);
                                            }
                                            //ListInt_PosYOf3Minに追加
                                            if (ListInt_PosYOf3.Count > 0)
                                            {
                                                ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                            }
                                            else
                                            {
                                                ListInt_PosYOf3Min.Add(0);
                                            }
                                            //ListInt_PosYOf4Maxに追加
                                            if (ListInt_PosYOf4.Count > 0)
                                            {
                                                ListInt_PosYOf4Max.Add(ListInt_PosYOf4.Max());
                                            }
                                            else
                                            {
                                                ListInt_PosYOf4Max.Add(0);
                                            }
                                            //ListInt_Boolに追加
                                            ListInt_Bool.Add(Bool);
                                        }
                                        //-----------------------------------------------------------------
                                    }
                                    //ListInt_PosXDifferenceMaxにListInt_PosXDifferenceの最大値を追加
                                    if (true)
                                    {
                                        ListInt_PosXDifferenceMax.Add(ListInt_PosXDifference.Max());
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_BestAAAAA.Add(Int2);
                                    }
                                    //ListInt_CountOfAdjacentMaxにListInt_CountOfAdjacentの最大値を追加
                                    if (true)
                                    {
                                        ListInt_CountOfAdjacentMax.Add(ListInt_CountOfAdjacent.Max());
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BestBBBBB.Add(Int2);
                                    }
                                    //ListInt_PosYOf3MinMinにListInt_PosYOf3Minの最小値を追加
                                    if (true)
                                    {
                                        ListInt_PosYOf3MinMin.Add(ListInt_PosYOf3Min.Min());
                                        int Int1 = ListInt_PosYOf3Min.Min();
                                        int Int2 = ListInt_PosYOf3Min.LastIndexOf(Int1);
                                        ListInt_BestCCCCC.Add(Int2);
                                    }
                                    //ListInt_PosYOf4MaxMaxにListInt_PosYOf4Maxの最大値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_PosYOf4MaxMax.Add(ListInt_PosYOf4Max[Int2]);
                                    }
                                    //ListInt_BoolAtにListInt_Boolの真偽の値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BoolAt.Add(ListInt_Bool[Int2]);
                                    }
                                    //TemporaryBlock1の回転を初期化
                                    for (int xx = 1; xx < (5 - x); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                }
                                //
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        //LD
                                        int IntMax = ListInt_PosXDifferenceMax.Max();
                                        int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);

                                        CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                        RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                    }
                                    else
                                    {
                                        //B_1
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                        CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                        RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                        {
                                            //C_1
                                            int IntMin = ListInt_PosYOf3MinMin.Min();
                                            int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                        else
                                        {
                                            int Int2 = ListInt_CountOfAdjacentMax.Max();
                                            int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                            if (ListInt_BoolAt[Int3] == 0)
                                            {
                                                //C_2
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                                CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                            }
                                            else
                                            {
                                                //B_2
                                                int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                                CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            //A_1
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1 + 1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1 + 1) - 1;
                                        }
                                        else
                                        {
                                            //A_2
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                    }
                                }
                                //
                                while (RotationOfCurrentBlock > 4)
                                {
                                    RotationOfCurrentBlock -= 4;
                                }
                                //Debug.Log("RotationOfCurrentBlock : " + RotationOfCurrentBlock);
                            }
                            //BestPosXOfSecondCandidateを算出
                            if (true)
                            {
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        Debug.Log("LD");
                                        int IntMax = ListInt_PosXDifferenceMax.Max();
                                        int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);
                                        BestPosXOfSecondCandidate = ListInt_BestAAAAA[Int1] + 3 - CorrectionValue;
                                    }
                                    else
                                    {
                                        Debug.Log("B_1");
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                        BestPosXOfSecondCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                        {
                                            Debug.Log("C_1");
                                            int IntMin = ListInt_PosYOf3MinMin.Min();
                                            int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                            BestPosXOfSecondCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            int Int2 = ListInt_CountOfAdjacentMax.Max();
                                            int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                            if (ListInt_BoolAt[Int3] == 0)
                                            {
                                                Debug.Log("C_2");
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                                BestPosXOfSecondCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                            }
                                            else
                                            {
                                                Debug.Log("B_2");
                                                int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                                BestPosXOfSecondCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            Debug.Log("A_1");
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);
                                            BestPosXOfSecondCandidate = ListInt_BestAAAAA[Int1 + 1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            Debug.Log("A_2");
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);
                                            BestPosXOfSecondCandidate = ListInt_BestAAAAA[Int1] + 3 - CorrectionValue;
                                        }
                                    }
                                }
                            }
                            //PosXOfCurrentBlockを算出
                            if (true)
                            {
                                PosXOfCurrentBlock = BestPosXOfSecondCandidate;
                                //Debug.Log("PosXOfCurrentBlock : " + PosXOfCurrentBlock);
                            }
                        }
                        break;
                    case 5:
                        if (true)
                        {
                            //BestCoordinateOfThirdCandidateを算出
                            if (true)
                            {
                                List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                List<int> ListInt_PosXOfTipOf2 = new List<int> { };
                                List<int> ListInt_PosXOfTipOf3 = new List<int> { };
                                int PosXOfTipOf2;
                                int PosXOfTipOf3;
                                int CoordinateOfTipOf2;
                                int CoordinateOfTipOf3;
                                bool IsFallingCube = true;
                                bool IsChanging1To2Or3 = true;

                                //ListInt_TemporaryOfCubeG1の優先度1のCubeの位置を1にし、その他のCubeの位置は-1にする
                                ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 0)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = 0;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 1)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 3)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = 0;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = 1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[x] = 1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1を全てのCubeを落下させた後の状態にする
                                while (IsFallingCube == true)
                                {
                                    IsFallingCube = false;

                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (x >= 44)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 1 | ListInt_TemporaryOfCubeG1[x] == -1)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                                    IsFallingCube = true;

                                                }
                                            }
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の左の壁に最も近い位置を2にし、右の壁に最も近い位置を3にする
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        if (x % 14 + 1 == 3)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 2;
                                        }
                                        if (x % 14 + 1 == 12)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 3;
                                        }
                                    }
                                }
                                //ListInt_TemporaryOfCubeG1の2または3に隣接してる全ての1を2または3にする
                                while (IsChanging1To2Or3 == true)
                                {
                                    IsChanging1To2Or3 = false;
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 2;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x + 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x + 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x + 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                            if (ListInt_TemporaryOfCubeG1[x - 1] == 1)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 1] = 3;
                                                IsChanging1To2Or3 = true;
                                            }
                                        }
                                    }
                                }
                                //ListInt_PosXOfTipOf2にListInt_TemporaryOfCubeG1の中で2であるPosXを追加し、ListInt_PosXOfTipOf3に3であるPosXを追加する
                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x % 14 + 1 >= 3 & x % 14 + 1 <= 11 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x + 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 2)
                                            {
                                                ListInt_PosXOfTipOf2.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                    if (x % 14 + 1 >= 2 & x % 14 + 1 <= 12 & Mathf.FloorToInt(x / 14) + 1 >= 3 & Mathf.FloorToInt(x / 14) + 1 <= 30)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x - 1] == 0 | ListInt_TemporaryOfCubeG1[x + 14] == 0)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_PosXOfTipOf3.Add(x % 14 + 1);
                                            }
                                        }
                                    }
                                }
                                //Debug.Log("ListInt_PosXOfTipOf2.Count : " + ListInt_PosXOfTipOf2.Count);
                                //Debug.Log("ListInt_PosXOfTipOf3.Count : " + ListInt_PosXOfTipOf3.Count);
                                //
                                if (ListInt_PosXOfTipOf2.Count > ListInt_PosXOfTipOf3.Count | ListInt_PosXOfTipOf2.Count == ListInt_PosXOfTipOf3.Count & ListInt_PosXOfTipOf2.Count != 0 & ListInt_PosXOfTipOf3.Count != 0)
                                {
                                    //Debug.Log("左から計算");

                                    //PosXOfTipOf2に先右端のPosXを代入する
                                    PosXOfTipOf2 = ListInt_PosXOfTipOf2.Max();
                                    //ListInt_CoordinateOfTipOf2にCoordinateがPosXOfTipOf2の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf2)
                                            {
                                                ListInt_CoordinateOfTipOf2.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf2先右端のPosXを代入する
                                    CoordinateOfTipOf2 = ListInt_CoordinateOfTipOf2.Max();
                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 1] == 0)
                                    {
                                        //BestCoordinateOfThirdCandidateを算出
                                        BestCoordinateOfThirdCandidate = CoordinateOfTipOf2 + 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf2 + 14] == 0)
                                    {
                                        //BestCoordinateOfThirdCandidateを算出
                                        BestCoordinateOfThirdCandidate = CoordinateOfTipOf2 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count < ListInt_PosXOfTipOf3.Count)
                                {
                                    //Debug.Log("右から計算");

                                    //PosXOfTipOf3に先左端のPosXを代入する
                                    PosXOfTipOf3 = ListInt_PosXOfTipOf3.Min();
                                    //ListInt_CoordinateOfTipOf3にCoordinateがPosXOfTipOf3の全Coordinateを追加する
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                        {
                                            if (x % 14 + 1 == PosXOfTipOf3)
                                            {
                                                ListInt_CoordinateOfTipOf3.Add(x);
                                            }
                                        }
                                    }
                                    //CoordinateOfTipOf3先左端のPosXを代入する
                                    CoordinateOfTipOf3 = ListInt_CoordinateOfTipOf3.Max();

                                    if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 - 1] == 0)
                                    {
                                        //BestCoordinateOfThirdCandidateを算出
                                        BestCoordinateOfThirdCandidate = CoordinateOfTipOf3 - 1;
                                    }
                                    else if (ListInt_TemporaryOfCubeG1[CoordinateOfTipOf3 + 14] == 0)
                                    {
                                        //BestCoordinateOfThirdCandidateを算出
                                        BestCoordinateOfThirdCandidate = CoordinateOfTipOf3 + 14;
                                    }
                                }
                                //
                                if (ListInt_PosXOfTipOf2.Count == 0 & ListInt_PosXOfTipOf3.Count == 0)
                                {
                                    List<int> ListInt1 = new List<int> { };

                                    //
                                    for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 0)
                                        {
                                            if (x % 14 + 1 == 3)
                                            {
                                                if (x >= 30)
                                                {
                                                    ListInt1.Add(x);
                                                }
                                            }
                                        }
                                    }
                                    //
                                    BestCoordinateOfThirdCandidate = ListInt1.Min();
                                }
                                //
                                //Debug.Log("BestCoordinateOfThirdCandidate : " + BestCoordinateOfThirdCandidate);
                            }
                            //RotationOfCurrentBlockを算出を決定
                            if (true)
                            {
                                Debug.Log("ListInt_CoordinateOfTipOf2.Count : " + ListInt_CoordinateOfTipOf2.Count);
                                Debug.Log("ListInt_CoordinateOfTipOf3.Count : " + ListInt_CoordinateOfTipOf3.Count);

                                ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                                DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                                //TemporaryBlock1の回転を初期化
                                for (int x = 1; x < ((DirectionOfTemporaryBlock1 - 4) * -1) + 2; x++)
                                {
                                    ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                    for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                    }

                                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                }
                                //
                                for (int x = 0; x < 4; x++)
                                {
                                    List<int> ListInt_PosXDifference = new List<int> { };
                                    List<int> ListInt_CountOfAdjacent = new List<int> { };
                                    List<int> ListInt_PosYOf3Min = new List<int> { };
                                    List<int> ListInt_PosYOf4Max = new List<int> { };
                                    List<int> ListInt_Bool = new List<int> { };
                                    int CorrectionValueCandidate = 0;

                                    //
                                    for (int xx = 1; xx < (x + 1); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                    //CorrectionValueCandidate算出
                                    while (true)
                                    {
                                        int xxx = 0;

                                        for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                        {
                                            if (ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != -1 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 13 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 27 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 41)
                                            {
                                                xxx += 1;
                                            }
                                        }
                                        if (xxx == ListInt_DataOfTemporaryBlock1.Count)
                                        {
                                            CorrectionValueCandidate += 1;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    ListInt_CorrectionValueCandidate.Add(CorrectionValueCandidate);
                                    //
                                    for (int xx = 0; xx < 11 - ListListInt_SideLengthOfBlock[CurrentBlock - 1][x]; xx++)
                                    {
                                        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                        List<int> ListInt_PosXOf2 = new List<int> { };
                                        List<int> ListInt_PosXOf4 = new List<int> { };
                                        List<int> ListInt_PosXOf2And4 = new List<int> { };
                                        List<int> ListInt_PosYOf4 = new List<int> { };
                                        List<int> ListInt_PosYOf3 = new List<int> { };
                                        int a = 0;
                                        int b = 0;
                                        int c = 0;
                                        int d = 0;
                                        int e = 0;
                                        int f = 0;
                                        int g = 0;
                                        int h = 0;
                                        int i = 0;
                                        int j = 0;
                                        int Bool = 0;
                                        bool IsFallingCube = true;
                                        bool IsChanging1To2 = true;
                                        bool IsChanging3To4 = true;
                                        bool IsChanging1And3To4 = true;
                                        bool IsOverlaped = false;

                                        //-----------------------------------------------------------------
                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 0;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        while (IsFallingCube == true)
                                        {
                                            IsFallingCube = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (xxx >= 44)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 1 | ListInt_TemporaryOfCubeG1[xxx] == -1)
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx - 14] == 0)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx - 14] = ListInt_TemporaryOfCubeG1[xxx];
                                                            ListInt_TemporaryOfCubeG1[xxx] = 0;
                                                            IsFallingCube = true;

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                            {
                                                if (xxx % 14 + 1 == 3 | xxx % 14 + 1 == 12)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1To2 == true)
                                        {
                                            IsChanging1To2 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 2;
                                                        IsChanging1To2 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        if (ListInt_TemporaryOfCubeG1.Count(value => value == 2) == 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = 2;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                            {
                                                ListInt_PosXOf2.Add(xxx % 14 + 1);
                                            }
                                        }
                                        //
                                        ListInt_PosXOf2 = ListInt_PosXOf2.Distinct().ToList();
                                        if (ListInt_PosXOf2.Count > 0)
                                        {
                                            PosXDifference = (ListInt_PosXOf2.Count);
                                        }
                                        else
                                        {
                                            PosXDifference = 0;
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                ListInt_PosYOf3.Add(Mathf.FloorToInt(xxx / 14) + 1);

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf2.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf2[xxxx] | xxx - 1 == ListInt_CoordinateOfTipOf2[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }

                                                for (int xxxx = 0; xxxx < ListInt_CoordinateOfTipOf3.Count; xxxx++)
                                                {
                                                    if (xxx - 14 == ListInt_CoordinateOfTipOf3[xxxx] | xxx + 1 == ListInt_CoordinateOfTipOf3[xxxx])
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = 4;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        while (IsChanging1And3To4 == true)
                                        {
                                            IsChanging1And3To4 = false;

                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 14] == 1 | ListInt_TemporaryOfCubeG1[xxx + 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 14] == 1 | ListInt_TemporaryOfCubeG1[xxx - 14] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 14] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx + 1] == 1 | ListInt_TemporaryOfCubeG1[xxx + 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx + 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                    if (ListInt_TemporaryOfCubeG1[xxx - 1] == 1 | ListInt_TemporaryOfCubeG1[xxx - 1] == 3)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx - 1] = 4;
                                                        IsChanging1And3To4 = true;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                            {
                                                ListInt_PosXOf4.Add(xxx % 14 + 1);
                                                ListInt_PosYOf4.Add(Mathf.FloorToInt(xxx / 14) + 1);
                                            }
                                        }
                                        //
                                        if (ListInt_PosYOf4.Count > 0)
                                        {
                                            for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] != 0)
                                                {
                                                    if (Mathf.FloorToInt(xxx / 14) + 1 > ListInt_PosYOf4.Max())
                                                    {
                                                        Bool = 1;
                                                    }
                                                    else
                                                    {
                                                        Bool = 0;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Bool = 0;
                                        }
                                        //-----------------------------------------------------------------
                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfFirstCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[xxx]] == 3)
                                            {
                                                IsOverlaped = true;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfSecondCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfSecondCandidate[xxx]] == 3)
                                            {
                                                IsOverlaped = true;
                                            }
                                        }
                                        //
                                        if (IsOverlaped == true)
                                        {
                                            //ListInt_PosXDifferenceに追加
                                            ListInt_PosXDifference.Add(-1);
                                            //ListInt_CountOfAdjacentに追加
                                            ListInt_CountOfAdjacent.Add(-1);
                                            //ListInt_PosYOf3Minに追加
                                            ListInt_PosYOf3Min.Add(-1);
                                            //ListInt_PosYOf4Maxに追加
                                            ListInt_PosYOf4Max.Add(-1);
                                            //ListInt_Boolに追加
                                            ListInt_Bool.Add(-1);
                                        }
                                        else
                                        {
                                            //ListInt_PosXDifferenceに追加
                                            ListInt_PosXOf2And4.AddRange(ListInt_PosXOf2);
                                            ListInt_PosXOf2And4.AddRange(ListInt_PosXOf4);
                                            ListInt_PosXOf2And4 = ListInt_PosXOf2And4.Distinct().ToList();
                                            if (ListInt_PosXOf2And4.Count > 0)
                                            {
                                                ListInt_PosXDifference.Add(ListInt_PosXOf2And4.Count);
                                            }
                                            else
                                            {
                                                ListInt_PosXDifference.Add(0);
                                            }
                                            //ListInt_CountOfAdjacentに追加
                                            if (ListInt_TemporaryOfCubeG1.Count(value => value == 4) > 0)
                                            {
                                                ListInt_CountOfAdjacent.Add(ListInt_TemporaryOfCubeG1.Count(value => value == 4));
                                            }
                                            else
                                            {
                                                ListInt_CountOfAdjacent.Add(0);
                                            }
                                            //ListInt_PosYOf3Minに追加
                                            if (ListInt_PosYOf3.Count > 0)
                                            {
                                                ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                            }
                                            else
                                            {
                                                ListInt_PosYOf3Min.Add(0);
                                            }
                                            //ListInt_PosYOf4Maxに追加
                                            if (ListInt_PosYOf4.Count > 0)
                                            {
                                                ListInt_PosYOf4Max.Add(ListInt_PosYOf4.Max());
                                            }
                                            else
                                            {
                                                ListInt_PosYOf4Max.Add(0);
                                            }
                                            //ListInt_Boolに追加
                                            ListInt_Bool.Add(Bool);
                                        }
                                        //-----------------------------------------------------------------
                                    }
                                    //ListInt_PosXDifferenceMaxにListInt_PosXDifferenceの最大値を追加
                                    if (true)
                                    {
                                        ListInt_PosXDifferenceMax.Add(ListInt_PosXDifference.Max());
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_BestAAAAA.Add(Int2);
                                    }
                                    //ListInt_CountOfAdjacentMaxにListInt_CountOfAdjacentの最大値を追加
                                    if (true)
                                    {
                                        ListInt_CountOfAdjacentMax.Add(ListInt_CountOfAdjacent.Max());
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BestBBBBB.Add(Int2);
                                    }
                                    //ListInt_PosYOf3MinMinにListInt_PosYOf3Minの最小値を追加
                                    if (true)
                                    {
                                        ListInt_PosYOf3MinMin.Add(ListInt_PosYOf3Min.Min());
                                        int Int1 = ListInt_PosYOf3Min.Min();
                                        int Int2 = ListInt_PosYOf3Min.LastIndexOf(Int1);
                                        ListInt_BestCCCCC.Add(Int2);
                                    }
                                    //ListInt_PosYOf4MaxMaxにListInt_PosYOf4Maxの最大値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_PosXDifference.Max();
                                        int Int2 = ListInt_PosXDifference.LastIndexOf(Int1);
                                        ListInt_PosYOf4MaxMax.Add(ListInt_PosYOf4Max[Int2]);
                                    }
                                    //ListInt_BoolAtにListInt_Boolの真偽の値を追加
                                    if (true)
                                    {
                                        int Int1 = ListInt_CountOfAdjacent.Max();
                                        int Int2 = ListInt_CountOfAdjacent.LastIndexOf(Int1);
                                        ListInt_BoolAt.Add(ListInt_Bool[Int2]);
                                    }
                                    //TemporaryBlock1の回転を初期化
                                    for (int xx = 1; xx < (5 - x); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                }
                                //
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        //LD
                                        int IntMax = ListInt_PosXDifferenceMax.Max();
                                        int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);

                                        CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                        RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                    }
                                    else
                                    {
                                        //B_1
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                        CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                        RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                        {
                                            //C_1
                                            int IntMin = ListInt_PosYOf3MinMin.Min();
                                            int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                        else
                                        {
                                            int Int2 = ListInt_CountOfAdjacentMax.Max();
                                            int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                            if (ListInt_BoolAt[Int3] == 0)
                                            {
                                                //C_2
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);

                                                CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                            }
                                            else
                                            {
                                                //B_2
                                                int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);

                                                CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            //A_1
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1 + 1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1 + 1) - 1;
                                        }
                                        else
                                        {
                                            //A_2
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);

                                            CorrectionValue = ListInt_CorrectionValueCandidate[Int1];

                                            RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int1) - 1;
                                        }
                                    }
                                }
                                //
                                while (RotationOfCurrentBlock > 4)
                                {
                                    RotationOfCurrentBlock -= 4;
                                }
                                //Debug.Log("RotationOfCurrentBlock : " + RotationOfCurrentBlock);
                            }
                            //BestPosXOfThirdCandidateを算出
                            if (true)
                            {
                                if (ListInt_PosXDifferenceMax.All(value => value == 0) == true)
                                {
                                    if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                    {
                                        Debug.Log("LD");
                                        int IntMax = ListInt_PosXDifferenceMax.Max();
                                        int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);
                                        BestPosXOfThirdCandidate = ListInt_BestAAAAA[Int1] + 3 - CorrectionValue;
                                    }
                                    else
                                    {
                                        Debug.Log("B_1");
                                        int IntMax = ListInt_CountOfAdjacentMax.Max();
                                        int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                        BestPosXOfThirdCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                    }
                                }
                                else
                                {
                                    if (ListInt_PosXDifferenceMax.All(value => value == PosXDifference) == true)
                                    {
                                        if (ListInt_CountOfAdjacentMax.All(value => value == 0) == true)
                                        {
                                            Debug.Log("C_1");
                                            int IntMin = ListInt_PosYOf3MinMin.Min();
                                            int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                            BestPosXOfThirdCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            int Int2 = ListInt_CountOfAdjacentMax.Max();
                                            int Int3 = ListInt_CountOfAdjacentMax.IndexOf(Int2);

                                            if (ListInt_BoolAt[Int3] == 0)
                                            {
                                                Debug.Log("C_2");
                                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                                BestPosXOfThirdCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                                            }
                                            else
                                            {
                                                Debug.Log("B_2");
                                                int IntMax = ListInt_CountOfAdjacentMax.Max();
                                                int Int1 = ListInt_CountOfAdjacentMax.IndexOf(IntMax);
                                                BestPosXOfThirdCandidate = ListInt_BestBBBBB[Int1] + 3 - CorrectionValue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ListInt_PosXDifferenceMax[0] == ListInt_PosXDifferenceMax[1] & ListInt_PosXDifferenceMax[1] == ListInt_PosXDifferenceMax[2] & ListInt_PosXDifferenceMax[2] == ListInt_PosXDifferenceMax[3])
                                        {
                                            Debug.Log("A_1");
                                            int SideLengthMax = ListListInt_SideLengthOfBlock[CurrentBlock - 1].Max();
                                            int Int1 = ListListInt_SideLengthOfBlock[CurrentBlock - 1].IndexOf(SideLengthMax);
                                            BestPosXOfThirdCandidate = ListInt_BestAAAAA[Int1 + 1] + 3 - CorrectionValue;
                                        }
                                        else
                                        {
                                            Debug.Log("A_2");
                                            int IntMax = ListInt_PosXDifferenceMax.Max();
                                            int Int1 = ListInt_PosXDifferenceMax.IndexOf(IntMax);
                                            BestPosXOfThirdCandidate = ListInt_BestAAAAA[Int1] + 3 - CorrectionValue;
                                        }
                                    }
                                }
                            }
                            //PosXOfCurrentBlockを算出
                            if (true)
                            {
                                PosXOfCurrentBlock = BestPosXOfThirdCandidate;
                                //Debug.Log("PosXOfCurrentBlock : " + PosXOfCurrentBlock);
                            }
                        }
                        break;
                }
            }
            //
            if (true)
            {
                List<int> ListInt_PosYOf3MinMin = new List<int> { };
                List<int> ListInt_BestCCCCC = new List<int> { };

                List<int> ListInt_CorrectionValueCandidate = new List<int> { };
                int CorrectionValue = 0;

                bool IsOverlaped = false;

                //
                switch (PriorityOfCurrentBlock)
                {
                    case 1:
                        break;
                    case 3:
                        //ListInt_BestCoordinateOfFirstCandidateと被るかチェック
                        if (true)
                        {
                            List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                            bool IsFallingCube = true;

                            ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                            DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                            //
                            for (int x = 1; x < RotationOfCurrentBlock + 1; x++)
                            {
                                ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                {
                                    ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                }

                                ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                            }
                            //
                            ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                            for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 0)
                                {
                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                }
                                else
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = 1;
                                            }
                                            else
                                            {

                                                if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = 1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_DataOfTemporaryBlock1.Count; x++)
                            {
                                ListInt_TemporaryOfCubeG1[380 + (PosXOfCurrentBlock - 3) + ListInt_DataOfTemporaryBlock1[x]] = 2;
                            }
                            //
                            while (IsFallingCube == true)
                            {
                                IsFallingCube = false;

                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x >= 44)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                                IsFallingCube = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_BestCoordinateOfFirstCandidate.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[x]] == 2)
                                {
                                    IsOverlaped = true;
                                    Debug.Log("Firstと被ってます");
                                }
                            }
                            //
                            if (IsOverlaped == false)
                            {
                                Debug.Log("Firstと被ってません");
                            }
                        }
                        //被ってた場合
                        if (IsOverlaped == true)
                        {
                            //RotationOfCurrentBlockを算出を決定
                            if (true)
                            {
                                ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                                DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                                //TemporaryBlock1の回転を初期化
                                for (int x = 1; x < ((DirectionOfTemporaryBlock1 - 4) * -1) + 2; x++)
                                {
                                    ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                    for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                    }

                                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                }
                                //
                                for (int x = 0; x < 4; x++)
                                {
                                    List<int> ListInt_PosYOf3Min = new List<int> { };
                                    int CorrectionValueCandidate = 0;

                                    //
                                    for (int xx = 1; xx < (x + 1); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                    //CorrectionValueCandidate算出
                                    while (true)
                                    {
                                        int xxx = 0;

                                        for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                        {
                                            if (ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != -1 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 13 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 27 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 41)
                                            {
                                                xxx += 1;
                                            }
                                        }
                                        if (xxx == ListInt_DataOfTemporaryBlock1.Count)
                                        {
                                            CorrectionValueCandidate += 1;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    ListInt_CorrectionValueCandidate.Add(CorrectionValueCandidate);
                                    //
                                    for (int xx = 0; xx < 11 - ListListInt_SideLengthOfBlock[CurrentBlock - 1][x]; xx++)
                                    {
                                        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                        List<int> ListInt_PosYOf3 = new List<int> { };
                                        int a = 0;
                                        int b = 0;
                                        int c = 0;
                                        int d = 0;
                                        int e = 0;
                                        int f = 0;
                                        int g = 0;
                                        int h = 0;
                                        int i = 0;
                                        int j = 0;
                                        bool OL = false;

                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[xxx] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[xxx] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[xxx] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[xxx] = 1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[xxx] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[xxx] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[xxx] = -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                ListInt_PosYOf3.Add(Mathf.FloorToInt(xxx / 14) + 1);
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfFirstCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[xxx]] == 3)
                                            {
                                                OL = true;
                                            }
                                        }
                                        //
                                        if (OL == true)
                                        {
                                            //ListInt_PosYOf3Minに追加
                                            //ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                            ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max() + 100);
                                        }
                                        else
                                        {
                                            //ListInt_PosYOf3Minに追加
                                            ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                        }
                                    }
                                    //ListInt_PosYOf3MinMinにListInt_PosYOf3Minの最小値を追加
                                    ListInt_PosYOf3MinMin.Add(ListInt_PosYOf3Min.Min());
                                    int Int1 = ListInt_PosYOf3Min.Min();
                                    int Int2 = ListInt_PosYOf3Min.IndexOf(Int1);
                                    ListInt_BestCCCCC.Add(Int2);
                                    //TemporaryBlock1の回転を初期化
                                    for (int xx = 1; xx < (5 - x); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                }
                                //
                                int Int3 = ListInt_PosYOf3MinMin.Min();
                                int Int4 = ListInt_PosYOf3MinMin.IndexOf(Int3);
                                CorrectionValue = ListInt_CorrectionValueCandidate[Int4];
                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int4) - 1;
                                //
                                while (RotationOfCurrentBlock > 4)
                                {
                                    RotationOfCurrentBlock -= 4;
                                }
                            }
                            //BestPosXOfSecondCandidateを算出
                            if (true)
                            {
                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                BestPosXOfSecondCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                            }
                            //PosXOfCurrentBlockを算出
                            if (true)
                            {
                                PosXOfCurrentBlock = BestPosXOfSecondCandidate;
                                //Debug.Log("PosXOfCurrentBlock : " + PosXOfCurrentBlock);
                            }
                        }
                        break;
                    case 5:
                        //ListInt_BestCoordinateOfFirstCandidateと被るかチェック
                        if (true)
                        {
                            List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                            bool IsFallingCube = true;

                            ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                            DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                            //
                            for (int x = 1; x < RotationOfCurrentBlock + 1; x++)
                            {
                                ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                {
                                    ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                }

                                ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                            }
                            //
                            ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                            for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 0)
                                {
                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                }
                                else
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                            }
                                            else
                                            {

                                                if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = 1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = 1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_DataOfTemporaryBlock1.Count; x++)
                            {
                                ListInt_TemporaryOfCubeG1[380 + (PosXOfCurrentBlock - 3) + ListInt_DataOfTemporaryBlock1[x]] = 2;
                            }
                            //
                            while (IsFallingCube == true)
                            {
                                IsFallingCube = false;

                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x >= 44)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                                IsFallingCube = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_BestCoordinateOfFirstCandidate.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[x]] == 2)
                                {
                                    IsOverlaped = true;
                                    Debug.Log("Firstと被ってます");
                                }
                            }
                            //
                            if (IsOverlaped == false)
                            {
                                Debug.Log("Firstと被ってません");
                            }
                        }
                        //ListInt_BestCoordinateOfSecondCandidateと被るかチェック
                        if (true)
                        {
                            List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                            bool IsFallingCube = true;

                            ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                            DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                            //
                            for (int x = 1; x < RotationOfCurrentBlock + 1; x++)
                            {
                                ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                {
                                    ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                }

                                ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                            }
                            //
                            ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                            for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[x] == 0)
                                {
                                    ListInt_TemporaryOfCubeG1[x] = 0;
                                }
                                else
                                {
                                    if (ListInt_TemporaryOfCubeG1[x] == 1)
                                    {
                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                    }
                                    else
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            ListInt_TemporaryOfCubeG1[x] = 0;
                                        }
                                        else
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 3)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                            }
                                            else
                                            {

                                                if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = 1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = 1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_DataOfTemporaryBlock1.Count; x++)
                            {
                                ListInt_TemporaryOfCubeG1[380 + (PosXOfCurrentBlock - 3) + ListInt_DataOfTemporaryBlock1[x]] = 2;
                            }
                            //
                            while (IsFallingCube == true)
                            {
                                IsFallingCube = false;

                                for (int x = 0; x < ListInt_TemporaryOfCubeG1.Count; x++)
                                {
                                    if (x >= 44)
                                    {
                                        if (ListInt_TemporaryOfCubeG1[x] == -1 | ListInt_TemporaryOfCubeG1[x] == 1 | ListInt_TemporaryOfCubeG1[x] == 2)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x - 14] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[x - 14] = ListInt_TemporaryOfCubeG1[x];
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                                IsFallingCube = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            for (int x = 0; x < ListInt_BestCoordinateOfSecondCandidate.Count; x++)
                            {
                                if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfSecondCandidate[x]] == 2)
                                {
                                    IsOverlaped = true;
                                    Debug.Log("Secondと被ってます");
                                }
                            }
                            //
                            if (IsOverlaped == false)
                            {
                                Debug.Log("Secondと被ってません");
                            }
                        }
                        //被ってた場合
                        if (IsOverlaped == true)
                        {
                            //RotationOfCurrentBlockを算出を決定
                            if (true)
                            {
                                ListInt_DataOfTemporaryBlock1 = new List<int>(ListInt_DataOfCurrentBlock);
                                DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;

                                //TemporaryBlock1の回転を初期化
                                for (int x = 1; x < ((DirectionOfTemporaryBlock1 - 4) * -1) + 2; x++)
                                {
                                    ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                    for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xx] % 14 + 1 - 1));
                                    }

                                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                }
                                //
                                for (int x = 0; x < 4; x++)
                                {
                                    List<int> ListInt_PosYOf3Min = new List<int> { };
                                    int CorrectionValueCandidate = 0;

                                    //
                                    for (int xx = 1; xx < (x + 1); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                    //CorrectionValueCandidate算出
                                    while (true)
                                    {
                                        int xxx = 0;

                                        for (int xx = 0; xx < ListInt_DataOfTemporaryBlock1.Count; xx++)
                                        {
                                            if (ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != -1 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 13 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 27 &
                                                ListInt_DataOfTemporaryBlock1[xx] - 1 * (CorrectionValueCandidate + 1) != 41)
                                            {
                                                xxx += 1;
                                            }
                                        }
                                        if (xxx == ListInt_DataOfTemporaryBlock1.Count)
                                        {
                                            CorrectionValueCandidate += 1;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    ListInt_CorrectionValueCandidate.Add(CorrectionValueCandidate);
                                    //
                                    for (int xx = 0; xx < 11 - ListListInt_SideLengthOfBlock[CurrentBlock - 1][x]; xx++)
                                    {
                                        List<int> ListInt_TemporaryOfCubeG1 = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                        List<int> ListInt_PosYOf3 = new List<int> { };
                                        int a = 0;
                                        int b = 0;
                                        int c = 0;
                                        int d = 0;
                                        int e = 0;
                                        int f = 0;
                                        int g = 0;
                                        int h = 0;
                                        int i = 0;
                                        int j = 0;
                                        bool OL = false;

                                        //
                                        ListInt_TemporaryOfCubeG1 = new List<int>(ListInt_PriorityOfCubeG);
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[x] == 0)
                                            {
                                                ListInt_TemporaryOfCubeG1[x] = 0;
                                            }
                                            else
                                            {
                                                if (ListInt_TemporaryOfCubeG1[x] == 1)
                                                {
                                                    ListInt_TemporaryOfCubeG1[x] = -1;
                                                }
                                                else
                                                {
                                                    if (ListInt_TemporaryOfCubeG1[x] == 2)
                                                    {
                                                        ListInt_TemporaryOfCubeG1[x] = -1;
                                                    }
                                                    else
                                                    {
                                                        if (ListInt_TemporaryOfCubeG1[x] == 3)
                                                        {
                                                            ListInt_TemporaryOfCubeG1[x] = -1;
                                                        }
                                                        else
                                                        {
                                                            if (ListInt_TemporaryOfCubeG1[x] == 4)
                                                            {
                                                                ListInt_TemporaryOfCubeG1[x] = -1;
                                                            }
                                                            else
                                                            {
                                                                if (ListInt_TemporaryOfCubeG1[x] == 5)
                                                                {
                                                                    ListInt_TemporaryOfCubeG1[x] = 1;
                                                                }
                                                                else
                                                                {
                                                                    if (ListInt_TemporaryOfCubeG1[x] == 6)
                                                                    {
                                                                        ListInt_TemporaryOfCubeG1[x] = 1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            switch ((380 + xx + ListInt_DataOfTemporaryBlock1[xxx]) % 14 + 1 - CorrectionValueCandidate)
                                            {
                                                case 3:
                                                    a += 1;
                                                    break;
                                                case 4:
                                                    b += 1;
                                                    break;
                                                case 5:
                                                    c += 1;
                                                    break;
                                                case 6:
                                                    d += 1;
                                                    break;
                                                case 7:
                                                    e += 1;
                                                    break;
                                                case 8:
                                                    f += 1;
                                                    break;
                                                case 9:
                                                    g += 1;
                                                    break;
                                                case 10:
                                                    h += 1;
                                                    break;
                                                case 11:
                                                    i += 1;
                                                    break;
                                                case 12:
                                                    j += 1;
                                                    break;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (xxx % 14 + 1 >= 3 & xxx % 14 + 1 <= 12 & Mathf.FloorToInt(xxx / 14) + 1 >= 3 & Mathf.FloorToInt(xxx / 14) + 1 <= 32)
                                            {
                                                switch (xxx % 14 + 1)
                                                {
                                                    case 3:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (a > 0)
                                                            {
                                                                a -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 4:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (b > 0)
                                                            {
                                                                b -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 5:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (c > 0)
                                                            {
                                                                c -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 6:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (d > 0)
                                                            {
                                                                d -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 7:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (e > 0)
                                                            {
                                                                e -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 8:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (f > 0)
                                                            {
                                                                f -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 9:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (g > 0)
                                                            {
                                                                g -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 10:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (h > 0)
                                                            {
                                                                h -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 11:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (i > 0)
                                                            {
                                                                i -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                    case 12:
                                                        if (ListInt_TemporaryOfCubeG1[xxx] == 0)
                                                        {
                                                            if (j > 0)
                                                            {
                                                                j -= 1;
                                                                ListInt_TemporaryOfCubeG1[xxx] = 3;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_TemporaryOfCubeG1.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[xxx] == 3)
                                            {
                                                ListInt_PosYOf3.Add(Mathf.FloorToInt(xxx / 14) + 1);
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfFirstCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfFirstCandidate[xxx]] == 3)
                                            {
                                                OL = true;
                                            }
                                        }
                                        //
                                        for (int xxx = 0; xxx < ListInt_BestCoordinateOfSecondCandidate.Count; xxx++)
                                        {
                                            if (ListInt_TemporaryOfCubeG1[ListInt_BestCoordinateOfSecondCandidate[xxx]] == 3)
                                            {
                                                OL = true;
                                            }
                                        }
                                        //
                                        if (OL == true)
                                        {
                                            //ListInt_PosYOf3Minに追加
                                            //ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                            ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max() + 100);
                                        }
                                        else
                                        {
                                            //ListInt_PosYOf3Minに追加
                                            ListInt_PosYOf3Min.Add(ListInt_PosYOf3.Max());
                                        }
                                    }
                                    //ListInt_PosYOf3MinMinにListInt_PosYOf3Minの最小値を追加
                                    ListInt_PosYOf3MinMin.Add(ListInt_PosYOf3Min.Min());
                                    int Int1 = ListInt_PosYOf3Min.Min();
                                    int Int2 = ListInt_PosYOf3Min.IndexOf(Int1);
                                    ListInt_BestCCCCC.Add(Int2);
                                    //TemporaryBlock1の回転を初期化
                                    for (int xx = 1; xx < (5 - x); xx++)
                                    {
                                        ListInt_DataOfTemporaryBlock2 = new List<int> { };

                                        for (int xxx = 0; xxx < ListInt_DataOfTemporaryBlock1.Count; xxx++)
                                        {
                                            ListInt_DataOfTemporaryBlock2.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfTemporaryBlock1[xxx] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfTemporaryBlock1[xxx] % 14 + 1 - 1));
                                        }

                                        ListInt_DataOfTemporaryBlock1 = ListInt_DataOfTemporaryBlock2;
                                    }
                                }
                                //
                                int Int3 = ListInt_PosYOf3MinMin.Min();
                                int Int4 = ListInt_PosYOf3MinMin.IndexOf(Int3);
                                CorrectionValue = ListInt_CorrectionValueCandidate[Int4];
                                RotationOfCurrentBlock = (((DirectionOfCurrentBlock - 4) * -1) + 2) + (Int4) - 1;
                                //
                                while (RotationOfCurrentBlock > 4)
                                {
                                    RotationOfCurrentBlock -= 4;
                                }
                            }
                            //BestPosXOfThirdCandidateを算出
                            if (true)
                            {
                                int IntMin = ListInt_PosYOf3MinMin.Min();
                                int Int1 = ListInt_PosYOf3MinMin.IndexOf(IntMin);
                                BestPosXOfThirdCandidate = ListInt_BestCCCCC[Int1] + 3 - CorrectionValue;
                            }
                            //PosXOfCurrentBlockを算出
                            if (true)
                            {
                                PosXOfCurrentBlock = BestPosXOfThirdCandidate;
                                //Debug.Log("PosXOfCurrentBlock : " + PosXOfCurrentBlock);
                            }
                        }
                        break;
                }
            }

            Invoke("ContinuousRightRoll_CurrentBlock", 0.1f);
        }

        Invoke("Painting_CubeS", 0);
        Invoke("Painting_CubeG", 0);
    }


    //CurrentBlockの自由落下
    void FreeFall_CurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            int a = 0;
            for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
            {
                if (CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] >= 44)
                {
                    if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] - 14] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] - 14] == 1)
                    {
                        a += 1;
                    }
                }
            }

            if (ListInt_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの下移動が可能な時
                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;
                CanPlayFallingSound = true;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 14;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Painting_CubeG", 0);
            }
            else
            {
                //CurrentBlockの下移動が不可能な時
                if (CanPlayFallingSound == true)
                {
                    CanPlayFallingSound = false;

                    //AudioSource_AudioSource7.Play();
                }

                if (CanInvokeDisassembly_CurrentBlock == true)
                {
                    CanInvokeDisassembly_CurrentBlock = false;

                    Invoke("Disassembly_CurrentBlock", 0.5f);
                }
            }
            a = 0;
        }

        Invoke("FreeFall_CurrentBlock", RateOfFreeFall);
    }

    //CurrentBlockの下移動(S)
    void IntermittentDownMovement_CurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            CanPlayFallingSound = false;

            int a = 0;
            int b = 0;
            int c = 0;
            while (true)
            {
                a = 0;
                b += 1;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    if (CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] >= 44)
                    {
                        if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] - (14 * b)] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i] - (14 * b)] == 1)
                        {
                            a += 1;
                        }
                    }
                }

                if (ListInt_DataOfCurrentBlock.Count == a)
                {
                    c += 1;
                }
                else
                {
                    break;
                }
            }

            if (c >= 1)
            {
                //CurrentBlockの下移動が可能な時
                //AudioSource_AudioSource7.Play();

                CanInvokeDisassembly_CurrentBlock = true;
                CancelInvoke("Disassembly_CurrentBlock");

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 14 * c;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Painting_CubeG", 0);
            }
            else
            {
                //CurrentBlockの下移動が不可能な時
                Invoke("Disassembly_CurrentBlock", 0);
            }
        }
    }
    //CurrentBlockの右移動(S)
    void IntermittentRightMovement_CurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
            {
                ListInt_DataOfTemporaryBlock1.Add(ListInt_DataOfCurrentBlock[i] + 1);
            }

            int a = 0;
            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
            {
                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
            }

            if (ListInt_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの右移動が可能な時
                //AudioSource_AudioSource3.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock += 1;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                }
            }
            a = 0;

            Invoke("Painting_CubeG", 0);
        }
    }
    //CurrentBlockの右移動(F)
    void ContinuousRightMovement_CurrentBlock()
    {
        //Debug.Log((CoordinateOfCurrentBlock % 14 + 1) + " < " + PosXOfCurrentBlock);

        Invoke("ContinuousRightMovement_CurrentBlock", 0.1f);

        if (CoordinateOfCurrentBlock % 14 + 1 < PosXOfCurrentBlock)
        {
            Invoke("IntermittentRightMovement_CurrentBlock", 0);
        }
        if (CoordinateOfCurrentBlock % 14 + 1 == PosXOfCurrentBlock)
        {
            CancelInvoke("ContinuousRightMovement_CurrentBlock");
            Invoke("IntermittentDownMovement_CurrentBlock", 0);
        }
    }
    //CurrentBlockの左移動(S)
    void IntermittentLeftMovement_CurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };

            for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
            {
                ListInt_DataOfTemporaryBlock1.Add(ListInt_DataOfCurrentBlock[i] - 1);
            }

            int a = 0;
            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
            {
                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
            }

            if (ListInt_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの左移動が可能な時
                //AudioSource_AudioSource4.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 1;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                }
            }
            a = 0;

            Invoke("Painting_CubeG", 0);
        }
    }
    //CurrentBlockの左移動(F)
    void ContinuousLeftMovement_CurrentBlock()
    {
        //Debug.Log((CoordinateOfCurrentBlock % 14 + 1) + " > " + PosXOfCurrentBlock);

        Invoke("ContinuousLeftMovement_CurrentBlock", 0.1f);

        if (CoordinateOfCurrentBlock % 14 + 1 > PosXOfCurrentBlock)
        {
            Invoke("IntermittentLeftMovement_CurrentBlock", 0);
        }
        if (CoordinateOfCurrentBlock % 14 + 1 == PosXOfCurrentBlock)
        {
            CancelInvoke("ContinuousLeftMovement_CurrentBlock");
            Invoke("IntermittentDownMovement_CurrentBlock", 0);
        }
    }
    //CurrentBlockの右回転(S)
    void IntermittentRightRoll_CurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            ListInt_DataOfTemporaryBlock1 = new List<int> { };
            ListInt_OverlapCubeG = new List<int> { };

            for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
            {
                ListInt_DataOfTemporaryBlock1.Add((ListInt_SideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(ListInt_DataOfCurrentBlock[i] / 14) + 1 - 1) - 1 * 14 * (ListInt_DataOfCurrentBlock[i] % 14 + 1 - 1));
            }

            int a = 0;
            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
            {
                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
                else if (ListInt_SideLengthOfCurrentBlock.Max() != ListInt_SideLengthOfCurrentBlock.Min())
                {
                    ListInt_OverlapCubeG.Add(ListInt_DataOfTemporaryBlock1[i]);
                }
            }

            if (ListInt_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの右回転が可能な時
                //AudioSource_AudioSource5.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                if (DirectionOfCurrentBlock < 4)
                {
                    DirectionOfCurrentBlock += 1;
                }
                else
                {
                    DirectionOfCurrentBlock = 1;
                }

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                }

                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;

                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                {
                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                }
            }
            else if (ListInt_SideLengthOfCurrentBlock.Max() != ListInt_SideLengthOfCurrentBlock.Min())
            {
                //CurrentBlockの右回転が不可能な時
                switch (ListInt_SideLengthOfCurrentBlock.Max())
                {
                    case 2:
                        //上+1
                        if (ListInt_OverlapCubeG.Contains(0) == true & ListInt_DataOfTemporaryBlock1.Contains(14) == true |
                            ListInt_OverlapCubeG.Contains(1) == true & ListInt_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //左+1
                        if (ListInt_OverlapCubeG.Contains(1) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == true |
                            ListInt_OverlapCubeG.Contains(15) == true & ListInt_DataOfTemporaryBlock1.Contains(14) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //右+1
                        if (ListInt_OverlapCubeG.Contains(0) == true & ListInt_DataOfTemporaryBlock1.Contains(1) == true |
                            ListInt_OverlapCubeG.Contains(14) == true & ListInt_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        break;
                    case 3:
                        //上+1
                        if (ListInt_OverlapCubeG.Contains(1) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(14) == false & ListInt_DataOfTemporaryBlock1.Contains(28) == false |
                            ListInt_OverlapCubeG.Contains(2) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(14) == false & ListInt_DataOfTemporaryBlock1.Contains(28) == false |
                            ListInt_OverlapCubeG.Contains(0) == true & ListInt_DataOfTemporaryBlock1.Contains(2) == false & ListInt_DataOfTemporaryBlock1.Contains(16) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false |
                            ListInt_OverlapCubeG.Contains(1) == true & ListInt_DataOfTemporaryBlock1.Contains(2) == false & ListInt_DataOfTemporaryBlock1.Contains(16) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //左+1
                        if (ListInt_OverlapCubeG.Contains(16) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(1) == false & ListInt_DataOfTemporaryBlock1.Contains(2) == false |
                            ListInt_OverlapCubeG.Contains(30) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(1) == false & ListInt_DataOfTemporaryBlock1.Contains(2) == false |
                            ListInt_OverlapCubeG.Contains(16) == true & ListInt_DataOfTemporaryBlock1.Contains(28) == false & ListInt_DataOfTemporaryBlock1.Contains(29) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false |
                            ListInt_OverlapCubeG.Contains(2) == true & ListInt_DataOfTemporaryBlock1.Contains(28) == false & ListInt_DataOfTemporaryBlock1.Contains(29) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //右+1
                        if (ListInt_OverlapCubeG.Contains(14) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(1) == false & ListInt_DataOfTemporaryBlock1.Contains(2) == false |
                            ListInt_OverlapCubeG.Contains(28) == true & ListInt_DataOfTemporaryBlock1.Contains(0) == false & ListInt_DataOfTemporaryBlock1.Contains(1) == false & ListInt_DataOfTemporaryBlock1.Contains(2) == false |
                            ListInt_OverlapCubeG.Contains(14) == true & ListInt_DataOfTemporaryBlock1.Contains(28) == false & ListInt_DataOfTemporaryBlock1.Contains(29) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false |
                            ListInt_OverlapCubeG.Contains(0) == true & ListInt_DataOfTemporaryBlock1.Contains(28) == false & ListInt_DataOfTemporaryBlock1.Contains(29) == false & ListInt_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        break;
                    case 4:
                        //上+1
                        if (ListInt_OverlapCubeG.Contains(1) == true & ListInt_OverlapCubeG.Contains(15) == false |
                            ListInt_OverlapCubeG.Contains(2) == true & ListInt_OverlapCubeG.Contains(16) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //左+1
                        if (ListInt_OverlapCubeG.Contains(17) == true & ListInt_OverlapCubeG.Contains(16) == false |
                            ListInt_OverlapCubeG.Contains(31) == true & ListInt_OverlapCubeG.Contains(30) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //右+1
                        if (ListInt_OverlapCubeG.Contains(14) == true & ListInt_OverlapCubeG.Contains(15) == false |
                            ListInt_OverlapCubeG.Contains(28) == true & ListInt_OverlapCubeG.Contains(29) == false)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //上+2
                        if (ListInt_OverlapCubeG.Contains(1) == true & ListInt_OverlapCubeG.Contains(15) == true |
                            ListInt_OverlapCubeG.Contains(2) == true & ListInt_OverlapCubeG.Contains(16) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 28);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 28;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //左+2
                        if (ListInt_OverlapCubeG.Contains(17) == true & ListInt_OverlapCubeG.Contains(16) == true |
                            ListInt_OverlapCubeG.Contains(31) == true & ListInt_OverlapCubeG.Contains(30) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] - 2);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 2;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        //右+2
                        if (ListInt_OverlapCubeG.Contains(14) == true & ListInt_OverlapCubeG.Contains(15) == true |
                            ListInt_OverlapCubeG.Contains(28) == true & ListInt_OverlapCubeG.Contains(29) == true)
                        {
                            ListInt_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock1.Count; i++)
                            {
                                ListInt_DataOfTemporaryBlock2.Add(ListInt_DataOfTemporaryBlock1[i] + 2);
                            }

                            for (int i = 0; i < ListInt_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 0 | ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (ListInt_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                //AudioSource_AudioSource5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 0;
                                }

                                ListInt_DataOfCurrentBlock = ListInt_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 2;

                                for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                                {
                                    ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                                }
                            }
                        }
                        break;
                }
            }
            a = 0;

            Invoke("Painting_CubeG", 0);
        }
    }
    //CurrentBlockの右回転(F)
    void ContinuousRightRoll_CurrentBlock()
    {
        Invoke("ContinuousRightRoll_CurrentBlock", 0.1f);

        if (RotationOfCurrentBlock > 0)
        {
            RotationOfCurrentBlock -= 1;

            Invoke("IntermittentRightRoll_CurrentBlock", 0);
        }
        if (RotationOfCurrentBlock == 0)
        {
            CancelInvoke("ContinuousRightRoll_CurrentBlock");

            //CurrentBlockのX座標は最善のX座標か否か
            if (CoordinateOfCurrentBlock % 14 + 1 == PosXOfCurrentBlock)
            {
                //T

                //CurrentBlockを設置する
                Invoke("IntermittentDownMovement_CurrentBlock", 0.1f);
            }
            else
            {
                //F

                //CurrentBlockのX座標は最善のX座標より右にあるか否か
                if (CoordinateOfCurrentBlock % 14 + 1 > PosXOfCurrentBlock)
                {
                    //T

                    //CurrentBlockのX座標を最善のX座標にする(右から左へ)
                    Invoke("ContinuousLeftMovement_CurrentBlock", 0.1f);
                }
                else
                {
                    //F

                    //CurrentBlockのX座標を最善のX座標にする(左から右へ)
                    Invoke("ContinuousRightMovement_CurrentBlock", 0.1f);
                }
            }
        }
    }
    //CurrentBlockのホールド
    void Holding_CurrentBlock()
    {
        if (CanHoldCurrentBlock == true)
        {
            if (ListInt_TypeOfCubeG.Contains(1) == true)
            {
                //AudioSource_AudioSource10.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                if (ListInt_DataOfHoldBlock.Count == 0)
                {
                    ListInt_DataOfHoldBlock = ListInt_DataOfCurrentBlock;
                    ListInt_SideLengthOfHoldBlock = ListInt_SideLengthOfCurrentBlock;
                    HoldBlock = CurrentBlock;
                    DirectionOfHoldBlock = DirectionOfCurrentBlock;
                    ColorOfHoldBlock = ColorOfCurrentBlock;

                    for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
                    {
                        if (ListInt_TypeOfCubeG[i] == 1)
                        {
                            ListInt_TypeOfCubeG[i] = 0;
                            ListInt_ColorOfCubeG[i] = 0;
                        }
                    }

                    Invoke("Resetting_VsAI", 0.25f);
                    Invoke("Painting_CubeG", 0);
                    Invoke("Painting_CubeH", 0);
                }
                else
                {
                    CanHoldCurrentBlock = false;

                    ListInt_DataOfTemporaryBlock1 = ListInt_DataOfCurrentBlock;
                    ListInt_SideLengthOfTemporaryBlock1 = ListInt_SideLengthOfCurrentBlock;
                    TemporaryBlock1 = CurrentBlock;
                    DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;
                    ColorOfTemporaryBlock1 = ColorOfCurrentBlock;

                    ListInt_DataOfCurrentBlock = ListInt_DataOfHoldBlock;
                    ListInt_SideLengthOfCurrentBlock = ListInt_SideLengthOfHoldBlock;
                    CurrentBlock = HoldBlock;
                    DirectionOfCurrentBlock = DirectionOfHoldBlock;
                    ColorOfCurrentBlock = ColorOfHoldBlock;

                    ListInt_DataOfHoldBlock = ListInt_DataOfTemporaryBlock1;
                    ListInt_SideLengthOfHoldBlock = ListInt_SideLengthOfTemporaryBlock1;
                    HoldBlock = TemporaryBlock1;
                    DirectionOfHoldBlock = DirectionOfTemporaryBlock1;
                    ColorOfHoldBlock = ColorOfTemporaryBlock1;

                    CoordinateOfCurrentBlock = ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfCurrentBlock.Max() - 1][Mathf.FloorToInt(Random.Range(1, ListListInt_StartCoordinateOfBlock[ListInt_SideLengthOfCurrentBlock.Max() - 1].Count + 1)) - 1];

                    for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
                    {
                        if (ListInt_TypeOfCubeG[i] == 1)
                        {
                            ListInt_TypeOfCubeG[i] = 0;
                            ListInt_ColorOfCubeG[i] = 0;
                        }
                    }

                    for (int i = 0; i < ListInt_DataOfCurrentBlock.Count; i++)
                    {
                        ListInt_ColorOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                        ListInt_TypeOfCubeG[CoordinateOfCurrentBlock + ListInt_DataOfCurrentBlock[i]] = 1;
                    }

                    Invoke("Painting_CubeG", 0);
                    Invoke("Painting_CubeH", 0);
                }
            }
        }
    }


    //CurrentBlockの分解
    void Disassembly_CurrentBlock()
    {
        //AudioSource_AudioSource11.Play();

        CancelInvoke("Disassembly_CurrentBlock");

        if (ListInt_TypeOfCubeG.Contains(1) == true)
        {
            for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
            {
                if (ListInt_TypeOfCubeG[i] == 1)
                {
                    ListInt_TypeOfCubeG[i] = 2;
                }
            }
        }

        Invoke("FreeFall_PartOfCurrentBlock", 0);
    }
    //PartOfCurrentBlockの自由落下
    void FreeFall_PartOfCurrentBlock()
    {
        if (ListInt_TypeOfCubeG.Contains(3) == true | ListInt_TypeOfCubeG.Contains(4) == true | ListInt_TypeOfCubeG.Contains(6) == true | ListInt_TypeOfCubeG.Contains(8) == true)
        {
            for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
            {
                if (ListInt_TypeOfCubeG[i] == 3 | ListInt_TypeOfCubeG[i] == 4 | ListInt_TypeOfCubeG[i] == 6 | ListInt_TypeOfCubeG[i] == 8)
                {
                    ListInt_TypeOfCubeG[i] = 2;
                }
            }
        }

        for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
        {
            if (ListInt_TypeOfCubeG[i] == 2)
            {
                if (i >= 44)
                {
                    if (ListInt_TypeOfCubeG[i - 14] == 0)
                    {
                        ListInt_ColorOfCubeG[i - 14] = ListInt_ColorOfCubeG[i];
                        ListInt_ColorOfCubeG[i] = 0;

                        ListInt_TypeOfCubeG[i - 14] = 2;
                        ListInt_TypeOfCubeG[i] = 0;
                    }
                    if (ListInt_TypeOfCubeG[i - 14] != 0 & ListInt_TypeOfCubeG[i - 14] != 1 & ListInt_TypeOfCubeG[i - 14] != 2)
                    {
                        ListInt_TypeOfCubeG[i] = 3;
                    }
                }
                if (i < 44)
                {
                    ListInt_TypeOfCubeG[i] = 3;
                }
            }
        }

        if (ListInt_TypeOfCubeG.Contains(2) == true)
        {
            Invoke("FreeFall_PartOfCurrentBlock", 0.1f);
        }
        else
        {
            Invoke("Sorting_PartOfCurrentBlock", 0);
        }

        Invoke("Painting_CubeG", 0);
    }
    //PartOfCurrentBlockの仕分け
    void Sorting_PartOfCurrentBlock()
    {
        for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
        {
            if (i % 14 + 1 == 3)
            {
                if (ListInt_TypeOfCubeG[i] == 3)
                {
                    switch (ListInt_ColorOfCubeG[i])
                    {
                        case 1:
                            ListInt_TypeOfCubeG[i] = 4;
                            break;
                        case 2:
                            ListInt_TypeOfCubeG[i] = 6;
                            break;
                        case 3:
                            ListInt_TypeOfCubeG[i] = 8;
                            break;
                    }
                }
            }
        }

        bool a = false;
        while (a == false)
        {
            a = true;

            for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
            {
                if (ListInt_TypeOfCubeG[i] == 3)
                {
                    switch (ListInt_ColorOfCubeG[i])
                    {
                        case 1:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 4)
                                {
                                    ListInt_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 4)
                                {
                                    ListInt_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 4)
                                {
                                    ListInt_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 4)
                                {
                                    ListInt_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            break;
                        case 2:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 6)
                                {
                                    ListInt_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 6)
                                {
                                    ListInt_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 6)
                                {
                                    ListInt_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 6)
                                {
                                    ListInt_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            break;
                        case 3:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 8)
                                {
                                    ListInt_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 8)
                                {
                                    ListInt_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 8)
                                {
                                    ListInt_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 8)
                                {
                                    ListInt_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            break;
                    }
                }
            }
        }

        for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
        {
            if (i % 14 + 1 == 12)
            {
                if (ListInt_TypeOfCubeG[i] == 4 | ListInt_TypeOfCubeG[i] == 6 | ListInt_TypeOfCubeG[i] == 8)
                {
                    switch (ListInt_TypeOfCubeG[i])
                    {
                        case 4:
                            ListInt_TypeOfCubeG[i] = 5;
                            break;
                        case 6:
                            ListInt_TypeOfCubeG[i] = 7;
                            break;
                        case 8:
                            ListInt_TypeOfCubeG[i] = 9;
                            break;
                    }
                }
            }
        }

        bool b = false;
        while (b == false)
        {
            b = true;

            for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
            {
                if (ListInt_TypeOfCubeG[i] == 4 | ListInt_TypeOfCubeG[i] == 6 | ListInt_TypeOfCubeG[i] == 8)
                {
                    switch (ListInt_TypeOfCubeG[i])
                    {
                        case 4:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 5)
                                {
                                    ListInt_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 5)
                                {
                                    ListInt_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 5)
                                {
                                    ListInt_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 5)
                                {
                                    ListInt_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            break;
                        case 6:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 7)
                                {
                                    ListInt_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 7)
                                {
                                    ListInt_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 7)
                                {
                                    ListInt_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 7)
                                {
                                    ListInt_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            break;
                        case 8:
                            //上調査
                            if (i <= 375)
                            {
                                if (ListInt_TypeOfCubeG[i + 14] == 9)
                                {
                                    ListInt_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (ListInt_TypeOfCubeG[i - 14] == 9)
                                {
                                    ListInt_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (ListInt_TypeOfCubeG[i + 1] == 9)
                                {
                                    ListInt_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (ListInt_TypeOfCubeG[i - 1] == 9)
                                {
                                    ListInt_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            break;
                    }
                }
            }
        }

        if (ListInt_TypeOfCubeG.Contains(5) == true | ListInt_TypeOfCubeG.Contains(7) == true | ListInt_TypeOfCubeG.Contains(9) == true)
        {
            CanInvokeResetting_Priority = true;

            Invoke("Calculation_Score_VsAI", 0);
        }
        else
        {
            CanHoldCurrentBlock = true;

            Invoke("Resetting_VsAI", 0.15f);
        }
    }
    //Score_VsAIの換算
    void Calculation_Score_VsAI()
    {
        ListListInt_Sentence = new List<List<int>> { };

        NumberOfCombos_VsAI += 1;
        CountOfContinuousSummonedCurrentBlock = 0;
        if (CanIncreaseNumberOfRens_VsAI == true)
        {
            CanIncreaseNumberOfRens_VsAI = false;

            NumberOfRens_VsAI += 1;
        }

        for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
        {
            if (ListInt_TypeOfCubeG[i] == 5 | ListInt_TypeOfCubeG[i] == 7 | ListInt_TypeOfCubeG[i] == 9)
            {
                //通常換算
                Score_VsAI += 50;
            }
        }
        if (ListInt_TypeOfCubeG.Contains(2) == false & ListInt_TypeOfCubeG.Contains(3) == false & ListInt_TypeOfCubeG.Contains(4) == false & ListInt_TypeOfCubeG.Contains(6) == false & ListInt_TypeOfCubeG.Contains(8) == false)
        {
            //ALLCLEAR換算
            Score_VsAI += 500;

            ListListInt_Sentence.Add(new List<int> { 12, 23, 23, 14, 23, 16, 12, 29, 40, 10, 5, 0, 0 });
        }
        if (NumberOfCombos_VsAI == 1)
        {
            ListListInt_Sentence.Add(new List<int> { 1, 14, 26, 24, 13, 26, 40, 10, 0 });
        }
        if (NumberOfCombos_VsAI >= 2 & NumberOfCombos_VsAI <= 9)
        {
            //COMBO換算
            Score_VsAI += 1000;

            ListListInt_Sentence.Add(new List<int> { NumberOfCombos_VsAI, 14, 26, 24, 13, 26, 40, 10, 1, 0, 0, 0 });
        }
        if (NumberOfRens_VsAI == 1)
        {
            ListListInt_Sentence.Add(new List<int> { 1, 29, 16, 25, 40, 10, 0 });
        }
        if (NumberOfRens_VsAI >= 2 & NumberOfRens_VsAI <= 9)
        {
            //REN換算
            Score_VsAI += 300;

            ListListInt_Sentence.Add(new List<int> { NumberOfRens_VsAI, 29, 16, 25, 40, 10, 3, 0, 0 });
        }
        if (ListInt_TypeOfCubeG.Contains(5) == true & ListInt_TypeOfCubeG.Contains(7) == false & ListInt_TypeOfCubeG.Contains(9) == false |
            ListInt_TypeOfCubeG.Contains(5) == false & ListInt_TypeOfCubeG.Contains(7) == true & ListInt_TypeOfCubeG.Contains(9) == false |
            ListInt_TypeOfCubeG.Contains(5) == false & ListInt_TypeOfCubeG.Contains(7) == false & ListInt_TypeOfCubeG.Contains(9) == true)
        {
            //SINGLE換算
            Score_VsAI += 0;

            ListListInt_Sentence.Add(new List<int> { 30, 20, 25, 18, 23, 16, 40, 10, 0 });
        }
        if (ListInt_TypeOfCubeG.Contains(5) == true & ListInt_TypeOfCubeG.Contains(7) == true & ListInt_TypeOfCubeG.Contains(9) == false |
            ListInt_TypeOfCubeG.Contains(5) == true & ListInt_TypeOfCubeG.Contains(7) == false & ListInt_TypeOfCubeG.Contains(9) == true |
            ListInt_TypeOfCubeG.Contains(5) == false & ListInt_TypeOfCubeG.Contains(7) == true & ListInt_TypeOfCubeG.Contains(9) == true)
        {
            //DOUBLE換算
            Score_VsAI += 2000;

            ListListInt_Sentence.Add(new List<int> { 15, 26, 32, 13, 23, 16, 40, 10, 2, 0, 0, 0 });
        }
        if (ListInt_TypeOfCubeG.Contains(5) == true & ListInt_TypeOfCubeG.Contains(7) == true & ListInt_TypeOfCubeG.Contains(9) == true)
        {
            //TRIPLE換算
            Score_VsAI += 3000;

            ListListInt_Sentence.Add(new List<int> { 31, 29, 20, 27, 23, 16, 40, 10, 3, 0, 0, 0 });
        }

        Invoke("Destruction_PartOfCurrentBlock", 0.25f);
    }
    //PartOfCurrentBlockの消去
    void Destruction_PartOfCurrentBlock()
    {
        //AudioSource_AudioSource8.Play();

        //CubeDの再設置
        for (int i = 0; i < ListGameObject_CubeD.Count; i++)
        {
            ListGameObject_CubeD[i].SetActive(false);
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);

            ListGameObject_CubeD[i].transform.GetComponent<CubeD_Control>().enabled = false;
            ListGameObject_CubeD[i].transform.GetComponent<BoxCollider>().enabled = false;
            ListGameObject_CubeD[i].transform.GetComponent<Rigidbody>().useGravity = false;

            ListGameObject_CubeD[i].transform.position = ListGameObject_CubeG[i].transform.position;
        }

        int a = 0;
        int b = 0;

        for (int i = 0; i < ListInt_TypeOfCubeG.Count; i++)
        {
            if (i % 14 + 1 >= 3 & i % 14 + 1 <= 12 & Mathf.FloorToInt(i / 14) + 1 >= 3 & Mathf.FloorToInt(i / 14) + 1 <= 32)
            {
                if (ListInt_TypeOfCubeG[i] == 5 | ListInt_TypeOfCubeG[i] == 7 | ListInt_TypeOfCubeG[i] == 9)
                {
                    switch (ListInt_TypeOfCubeG[i])
                    {
                        case 5:
                            ListGameObject_CubeD[i - 30 - b].SetActive(true);
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(3000, 3500), Mark_Cube_O.transform.position + new Vector3(5.5f, -5, 5) + new Vector3(Random.Range(-5.5f, 5.5f), ListGameObject_CubeD[i - 30 - b].transform.position.y - Mark_Cube_O.transform.position.y, 0), 100, 0);

                            ListInt_TypeOfCubeG[i] = 0;
                            ListInt_ColorOfCubeG[i] = 0;
                            break;
                        case 7:
                            ListGameObject_CubeD[i - 30 - b].SetActive(true);
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(3000, 3500), Mark_Cube_O.transform.position + new Vector3(5.5f, -5, 5) + new Vector3(Random.Range(-5.5f, 5.5f), ListGameObject_CubeD[i - 30 - b].transform.position.y - Mark_Cube_O.transform.position.y, 0), 100, 0);

                            ListInt_TypeOfCubeG[i] = 0;
                            ListInt_ColorOfCubeG[i] = 0;
                            break;
                        case 9:
                            ListGameObject_CubeD[i - 30 - b].SetActive(true);
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                            ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(3000, 3500), Mark_Cube_O.transform.position + new Vector3(5.5f, -5, 5) + new Vector3(Random.Range(-5.5f, 5.5f), ListGameObject_CubeD[i - 30 - b].transform.position.y - Mark_Cube_O.transform.position.y, 0), 100, 0);

                            ListInt_TypeOfCubeG[i] = 0;
                            ListInt_ColorOfCubeG[i] = 0;
                            break;
                    }
                }

                a += 1;

                if (a == 10)
                {
                    a = 0;
                    b += 4;
                }
            }
        }

        if (Score_VsAI > 15000)
        {
            Score_VsAI = 15000;
        }

        Invoke("Painting_CubeG", 0);
        Invoke("Painting_CubeS", 0);
        Invoke("FreeFall_PartOfCurrentBlock", 0);
    }


    //CubeGの染色
    void Painting_CubeG()
    {
        int a = 0;
        int b = 0;

        for (int i = 0; i < ListInt_ColorOfCubeG.Count; i++)
        {
            if (i % 14 + 1 >= 3 & i % 14 + 1 <= 12 & Mathf.FloorToInt(i / 14) + 1 >= 3 & Mathf.FloorToInt(i / 14) + 1 <= 32)
            {
                switch (ListInt_ColorOfCubeG[i])
                {
                    case 0:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                        break;
                    case 1:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                        break;
                    case 2:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                        break;
                    case 3:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                        break;
                    case 4:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_DarkWhite;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_DarkWhite);
                        break;
                    case 5:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_DarkRed;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_DarkRed);
                        break;
                    case 6:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_DarkGreen;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_DarkGreen);
                        break;
                    case 7:
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_DarkBlue;
                        ListGameObject_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_DarkBlue);
                        break;
                }

                a += 1;

                if (a == 10)
                {
                    a = 0;
                    b += 4;
                }
            }
        }
    }
    //CubeHの染色
    void Painting_CubeH()
    {
        if (ListInt_SideLengthOfHoldBlock.Count != 0)
        {
            for (int i = 0; i < ListInt_ColorOfCubeH.Count; i++)
            {
                ListInt_ColorOfCubeH[i] = 0;
                ListGameObject_CubeH[i].SetActive(false);
            }
            switch (ListInt_SideLengthOfHoldBlock.Max())
            {
                case 1:
                    for (int i = 0; i < ListInt_DataOfHoldBlock.Count; i++)
                    {
                        switch (ListInt_DataOfHoldBlock[i])
                        {
                            case 0:
                                ListInt_ColorOfCubeH[0] = ColorOfHoldBlock;
                                break;
                        }
                    }
                    for (int i = 0; i < 1; i++)
                    {
                        ListGameObject_CubeH[i].SetActive(true);
                    }
                    break;
                case 2:
                    for (int i = 0; i < ListInt_DataOfHoldBlock.Count; i++)
                    {
                        switch (ListInt_DataOfHoldBlock[i])
                        {
                            case 0:
                                ListInt_ColorOfCubeH[1] = ColorOfHoldBlock;
                                break;
                            case 1:
                                ListInt_ColorOfCubeH[2] = ColorOfHoldBlock;
                                break;
                            case 14:
                                ListInt_ColorOfCubeH[3] = ColorOfHoldBlock;
                                break;
                            case 15:
                                ListInt_ColorOfCubeH[4] = ColorOfHoldBlock;
                                break;
                        }
                    }
                    for (int i = 1; i < 5; i++)
                    {
                        ListGameObject_CubeH[i].SetActive(true);
                    }
                    break;
                case 3:
                    for (int i = 0; i < ListInt_DataOfHoldBlock.Count; i++)
                    {
                        switch (ListInt_DataOfHoldBlock[i])
                        {
                            case 0:
                                ListInt_ColorOfCubeH[5] = ColorOfHoldBlock;
                                break;
                            case 1:
                                ListInt_ColorOfCubeH[6] = ColorOfHoldBlock;
                                break;
                            case 2:
                                ListInt_ColorOfCubeH[7] = ColorOfHoldBlock;
                                break;
                            case 14:
                                ListInt_ColorOfCubeH[8] = ColorOfHoldBlock;
                                break;
                            case 15:
                                ListInt_ColorOfCubeH[9] = ColorOfHoldBlock;
                                break;
                            case 16:
                                ListInt_ColorOfCubeH[10] = ColorOfHoldBlock;
                                break;
                            case 28:
                                ListInt_ColorOfCubeH[11] = ColorOfHoldBlock;
                                break;
                            case 29:
                                ListInt_ColorOfCubeH[12] = ColorOfHoldBlock;
                                break;
                            case 30:
                                ListInt_ColorOfCubeH[13] = ColorOfHoldBlock;
                                break;
                        }
                    }
                    for (int i = 5; i < 14; i++)
                    {
                        ListGameObject_CubeH[i].SetActive(true);
                    }
                    break;
                case 4:
                    for (int i = 0; i < ListInt_DataOfHoldBlock.Count; i++)
                    {
                        switch (ListInt_DataOfHoldBlock[i])
                        {
                            case 0:
                                ListInt_ColorOfCubeH[14] = ColorOfHoldBlock;
                                break;
                            case 1:
                                ListInt_ColorOfCubeH[15] = ColorOfHoldBlock;
                                break;
                            case 2:
                                ListInt_ColorOfCubeH[16] = ColorOfHoldBlock;
                                break;
                            case 3:
                                ListInt_ColorOfCubeH[17] = ColorOfHoldBlock;
                                break;
                            case 14:
                                ListInt_ColorOfCubeH[18] = ColorOfHoldBlock;
                                break;
                            case 15:
                                ListInt_ColorOfCubeH[19] = ColorOfHoldBlock;
                                break;
                            case 16:
                                ListInt_ColorOfCubeH[20] = ColorOfHoldBlock;
                                break;
                            case 17:
                                ListInt_ColorOfCubeH[21] = ColorOfHoldBlock;
                                break;
                            case 28:
                                ListInt_ColorOfCubeH[22] = ColorOfHoldBlock;
                                break;
                            case 29:
                                ListInt_ColorOfCubeH[23] = ColorOfHoldBlock;
                                break;
                            case 30:
                                ListInt_ColorOfCubeH[24] = ColorOfHoldBlock;
                                break;
                            case 31:
                                ListInt_ColorOfCubeH[25] = ColorOfHoldBlock;
                                break;
                            case 42:
                                ListInt_ColorOfCubeH[26] = ColorOfHoldBlock;
                                break;
                            case 43:
                                ListInt_ColorOfCubeH[27] = ColorOfHoldBlock;
                                break;
                            case 44:
                                ListInt_ColorOfCubeH[28] = ColorOfHoldBlock;
                                break;
                            case 45:
                                ListInt_ColorOfCubeH[29] = ColorOfHoldBlock;
                                break;
                        }
                    }
                    for (int i = 14; i < 30; i++)
                    {
                        ListGameObject_CubeH[i].SetActive(true);
                    }
                    break;
            }
            for (int i = 0; i < ListInt_ColorOfCubeH.Count; i++)
            {
                switch (ListInt_ColorOfCubeH[i])
                {
                    case 0:
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                        ListGameObject_CubeH[i].transform.Find("Frames").gameObject.SetActive(true);
                        break;
                    case 1:
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                        ListGameObject_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                        break;
                    case 2:
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                        ListGameObject_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                        break;
                    case 3:
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                        ListGameObject_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                        ListGameObject_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                        break;
                }
            }
        }
    }
    //CubeNの染色
    void Painting_CubeN()
    {
        //CubeN1の染色
        for (int i = 0; i < ListInt_ColorOfCubeN1.Count; i++)
        {
            ListInt_ColorOfCubeN1[i] = 0;
            ListGameObject_CubeN1[i].SetActive(false);
        }
        switch (ListInt_SideLengthOfNextBlock1.Max())
        {
            case 1:
                for (int i = 0; i < ListInt_DataOfNextBlock1.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock1[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN1[0] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    ListGameObject_CubeN1[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < ListInt_DataOfNextBlock1.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock1[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN1[1] = ColorOfNextBlock1;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN1[2] = ColorOfNextBlock1;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN1[3] = ColorOfNextBlock1;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN1[4] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    ListGameObject_CubeN1[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < ListInt_DataOfNextBlock1.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock1[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN1[5] = ColorOfNextBlock1;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN1[6] = ColorOfNextBlock1;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN1[7] = ColorOfNextBlock1;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN1[8] = ColorOfNextBlock1;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN1[9] = ColorOfNextBlock1;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN1[10] = ColorOfNextBlock1;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN1[11] = ColorOfNextBlock1;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN1[12] = ColorOfNextBlock1;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN1[13] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    ListGameObject_CubeN1[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < ListInt_DataOfNextBlock1.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock1[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN1[14] = ColorOfNextBlock1;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN1[15] = ColorOfNextBlock1;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN1[16] = ColorOfNextBlock1;
                            break;
                        case 3:
                            ListInt_ColorOfCubeN1[17] = ColorOfNextBlock1;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN1[18] = ColorOfNextBlock1;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN1[19] = ColorOfNextBlock1;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN1[20] = ColorOfNextBlock1;
                            break;
                        case 17:
                            ListInt_ColorOfCubeN1[21] = ColorOfNextBlock1;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN1[22] = ColorOfNextBlock1;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN1[23] = ColorOfNextBlock1;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN1[24] = ColorOfNextBlock1;
                            break;
                        case 31:
                            ListInt_ColorOfCubeN1[25] = ColorOfNextBlock1;
                            break;
                        case 42:
                            ListInt_ColorOfCubeN1[26] = ColorOfNextBlock1;
                            break;
                        case 43:
                            ListInt_ColorOfCubeN1[27] = ColorOfNextBlock1;
                            break;
                        case 44:
                            ListInt_ColorOfCubeN1[28] = ColorOfNextBlock1;
                            break;
                        case 45:
                            ListInt_ColorOfCubeN1[29] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    ListGameObject_CubeN1[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < ListInt_ColorOfCubeN1.Count; i++)
        {
            switch (ListInt_ColorOfCubeN1[i])
            {
                case 0:
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    ListGameObject_CubeN1[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    ListGameObject_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    ListGameObject_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    ListGameObject_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    ListGameObject_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN2の染色
        for (int i = 0; i < ListInt_ColorOfCubeN2.Count; i++)
        {
            ListInt_ColorOfCubeN2[i] = 0;
            ListGameObject_CubeN2[i].SetActive(false);
        }
        switch (ListInt_SideLengthOfNextBlock2.Max())
        {
            case 1:
                for (int i = 0; i < ListInt_DataOfNextBlock2.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock2[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN2[0] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    ListGameObject_CubeN2[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < ListInt_DataOfNextBlock2.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock2[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN2[1] = ColorOfNextBlock2;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN2[2] = ColorOfNextBlock2;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN2[3] = ColorOfNextBlock2;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN2[4] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    ListGameObject_CubeN2[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < ListInt_DataOfNextBlock2.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock2[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN2[5] = ColorOfNextBlock2;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN2[6] = ColorOfNextBlock2;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN2[7] = ColorOfNextBlock2;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN2[8] = ColorOfNextBlock2;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN2[9] = ColorOfNextBlock2;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN2[10] = ColorOfNextBlock2;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN2[11] = ColorOfNextBlock2;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN2[12] = ColorOfNextBlock2;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN2[13] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    ListGameObject_CubeN2[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < ListInt_DataOfNextBlock2.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock2[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN2[14] = ColorOfNextBlock2;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN2[15] = ColorOfNextBlock2;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN2[16] = ColorOfNextBlock2;
                            break;
                        case 3:
                            ListInt_ColorOfCubeN2[17] = ColorOfNextBlock2;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN2[18] = ColorOfNextBlock2;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN2[19] = ColorOfNextBlock2;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN2[20] = ColorOfNextBlock2;
                            break;
                        case 17:
                            ListInt_ColorOfCubeN2[21] = ColorOfNextBlock2;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN2[22] = ColorOfNextBlock2;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN2[23] = ColorOfNextBlock2;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN2[24] = ColorOfNextBlock2;
                            break;
                        case 31:
                            ListInt_ColorOfCubeN2[25] = ColorOfNextBlock2;
                            break;
                        case 42:
                            ListInt_ColorOfCubeN2[26] = ColorOfNextBlock2;
                            break;
                        case 43:
                            ListInt_ColorOfCubeN2[27] = ColorOfNextBlock2;
                            break;
                        case 44:
                            ListInt_ColorOfCubeN2[28] = ColorOfNextBlock2;
                            break;
                        case 45:
                            ListInt_ColorOfCubeN2[29] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    ListGameObject_CubeN2[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < ListInt_ColorOfCubeN2.Count; i++)
        {
            switch (ListInt_ColorOfCubeN2[i])
            {
                case 0:
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    ListGameObject_CubeN2[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    ListGameObject_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    ListGameObject_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    ListGameObject_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    ListGameObject_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN3の染色
        for (int i = 0; i < ListInt_ColorOfCubeN3.Count; i++)
        {
            ListInt_ColorOfCubeN3[i] = 0;
            ListGameObject_CubeN3[i].SetActive(false);
        }
        switch (ListInt_SideLengthOfNextBlock3.Max())
        {
            case 1:
                for (int i = 0; i < ListInt_DataOfNextBlock3.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock3[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN3[0] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    ListGameObject_CubeN3[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < ListInt_DataOfNextBlock3.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock3[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN3[1] = ColorOfNextBlock3;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN3[2] = ColorOfNextBlock3;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN3[3] = ColorOfNextBlock3;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN3[4] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    ListGameObject_CubeN3[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < ListInt_DataOfNextBlock3.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock3[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN3[5] = ColorOfNextBlock3;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN3[6] = ColorOfNextBlock3;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN3[7] = ColorOfNextBlock3;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN3[8] = ColorOfNextBlock3;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN3[9] = ColorOfNextBlock3;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN3[10] = ColorOfNextBlock3;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN3[11] = ColorOfNextBlock3;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN3[12] = ColorOfNextBlock3;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN3[13] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    ListGameObject_CubeN3[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < ListInt_DataOfNextBlock3.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock3[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN3[14] = ColorOfNextBlock3;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN3[15] = ColorOfNextBlock3;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN3[16] = ColorOfNextBlock3;
                            break;
                        case 3:
                            ListInt_ColorOfCubeN3[17] = ColorOfNextBlock3;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN3[18] = ColorOfNextBlock3;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN3[19] = ColorOfNextBlock3;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN3[20] = ColorOfNextBlock3;
                            break;
                        case 17:
                            ListInt_ColorOfCubeN3[21] = ColorOfNextBlock3;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN3[22] = ColorOfNextBlock3;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN3[23] = ColorOfNextBlock3;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN3[24] = ColorOfNextBlock3;
                            break;
                        case 31:
                            ListInt_ColorOfCubeN3[25] = ColorOfNextBlock3;
                            break;
                        case 42:
                            ListInt_ColorOfCubeN3[26] = ColorOfNextBlock3;
                            break;
                        case 43:
                            ListInt_ColorOfCubeN3[27] = ColorOfNextBlock3;
                            break;
                        case 44:
                            ListInt_ColorOfCubeN3[28] = ColorOfNextBlock3;
                            break;
                        case 45:
                            ListInt_ColorOfCubeN3[29] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    ListGameObject_CubeN3[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < ListInt_ColorOfCubeN3.Count; i++)
        {
            switch (ListInt_ColorOfCubeN3[i])
            {
                case 0:
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    ListGameObject_CubeN3[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    ListGameObject_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    ListGameObject_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    ListGameObject_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    ListGameObject_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN4の染色
        for (int i = 0; i < ListInt_ColorOfCubeN4.Count; i++)
        {
            ListInt_ColorOfCubeN4[i] = 0;
            ListGameObject_CubeN4[i].SetActive(false);
        }
        switch (ListInt_SideLengthOfNextBlock4.Max())
        {
            case 1:
                for (int i = 0; i < ListInt_DataOfNextBlock4.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock4[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN4[0] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    ListGameObject_CubeN4[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < ListInt_DataOfNextBlock4.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock4[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN4[1] = ColorOfNextBlock4;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN4[2] = ColorOfNextBlock4;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN4[3] = ColorOfNextBlock4;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN4[4] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    ListGameObject_CubeN4[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < ListInt_DataOfNextBlock4.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock4[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN4[5] = ColorOfNextBlock4;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN4[6] = ColorOfNextBlock4;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN4[7] = ColorOfNextBlock4;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN4[8] = ColorOfNextBlock4;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN4[9] = ColorOfNextBlock4;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN4[10] = ColorOfNextBlock4;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN4[11] = ColorOfNextBlock4;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN4[12] = ColorOfNextBlock4;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN4[13] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    ListGameObject_CubeN4[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < ListInt_DataOfNextBlock4.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock4[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN4[14] = ColorOfNextBlock4;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN4[15] = ColorOfNextBlock4;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN4[16] = ColorOfNextBlock4;
                            break;
                        case 3:
                            ListInt_ColorOfCubeN4[17] = ColorOfNextBlock4;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN4[18] = ColorOfNextBlock4;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN4[19] = ColorOfNextBlock4;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN4[20] = ColorOfNextBlock4;
                            break;
                        case 17:
                            ListInt_ColorOfCubeN4[21] = ColorOfNextBlock4;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN4[22] = ColorOfNextBlock4;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN4[23] = ColorOfNextBlock4;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN4[24] = ColorOfNextBlock4;
                            break;
                        case 31:
                            ListInt_ColorOfCubeN4[25] = ColorOfNextBlock4;
                            break;
                        case 42:
                            ListInt_ColorOfCubeN4[26] = ColorOfNextBlock4;
                            break;
                        case 43:
                            ListInt_ColorOfCubeN4[27] = ColorOfNextBlock4;
                            break;
                        case 44:
                            ListInt_ColorOfCubeN4[28] = ColorOfNextBlock4;
                            break;
                        case 45:
                            ListInt_ColorOfCubeN4[29] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    ListGameObject_CubeN4[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < ListInt_ColorOfCubeN4.Count; i++)
        {
            switch (ListInt_ColorOfCubeN4[i])
            {
                case 0:
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    ListGameObject_CubeN4[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    ListGameObject_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    ListGameObject_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    ListGameObject_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    ListGameObject_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN5の染色
        for (int i = 0; i < ListInt_ColorOfCubeN5.Count; i++)
        {
            ListInt_ColorOfCubeN5[i] = 0;
            ListGameObject_CubeN5[i].SetActive(false);
        }
        switch (ListInt_SideLengthOfNextBlock5.Max())
        {
            case 1:
                for (int i = 0; i < ListInt_DataOfNextBlock5.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock5[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN5[0] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    ListGameObject_CubeN5[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < ListInt_DataOfNextBlock5.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock5[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN5[1] = ColorOfNextBlock5;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN5[2] = ColorOfNextBlock5;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN5[3] = ColorOfNextBlock5;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN5[4] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    ListGameObject_CubeN5[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < ListInt_DataOfNextBlock5.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock5[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN5[5] = ColorOfNextBlock5;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN5[6] = ColorOfNextBlock5;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN5[7] = ColorOfNextBlock5;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN5[8] = ColorOfNextBlock5;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN5[9] = ColorOfNextBlock5;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN5[10] = ColorOfNextBlock5;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN5[11] = ColorOfNextBlock5;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN5[12] = ColorOfNextBlock5;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN5[13] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    ListGameObject_CubeN5[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < ListInt_DataOfNextBlock5.Count; i++)
                {
                    switch (ListInt_DataOfNextBlock5[i])
                    {
                        case 0:
                            ListInt_ColorOfCubeN5[14] = ColorOfNextBlock5;
                            break;
                        case 1:
                            ListInt_ColorOfCubeN5[15] = ColorOfNextBlock5;
                            break;
                        case 2:
                            ListInt_ColorOfCubeN5[16] = ColorOfNextBlock5;
                            break;
                        case 3:
                            ListInt_ColorOfCubeN5[17] = ColorOfNextBlock5;
                            break;
                        case 14:
                            ListInt_ColorOfCubeN5[18] = ColorOfNextBlock5;
                            break;
                        case 15:
                            ListInt_ColorOfCubeN5[19] = ColorOfNextBlock5;
                            break;
                        case 16:
                            ListInt_ColorOfCubeN5[20] = ColorOfNextBlock5;
                            break;
                        case 17:
                            ListInt_ColorOfCubeN5[21] = ColorOfNextBlock5;
                            break;
                        case 28:
                            ListInt_ColorOfCubeN5[22] = ColorOfNextBlock5;
                            break;
                        case 29:
                            ListInt_ColorOfCubeN5[23] = ColorOfNextBlock5;
                            break;
                        case 30:
                            ListInt_ColorOfCubeN5[24] = ColorOfNextBlock5;
                            break;
                        case 31:
                            ListInt_ColorOfCubeN5[25] = ColorOfNextBlock5;
                            break;
                        case 42:
                            ListInt_ColorOfCubeN5[26] = ColorOfNextBlock5;
                            break;
                        case 43:
                            ListInt_ColorOfCubeN5[27] = ColorOfNextBlock5;
                            break;
                        case 44:
                            ListInt_ColorOfCubeN5[28] = ColorOfNextBlock5;
                            break;
                        case 45:
                            ListInt_ColorOfCubeN5[29] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    ListGameObject_CubeN5[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < ListInt_ColorOfCubeN5.Count; i++)
        {
            switch (ListInt_ColorOfCubeN5[i])
            {
                case 0:
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    ListGameObject_CubeN5[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    ListGameObject_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    ListGameObject_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    ListGameObject_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    ListGameObject_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
    }
    //CubeSの染色
    void Painting_CubeS()
    {
        for (int i = 0; i < ListInt_ColorOfCubeS.Count; i++)
        {
            ListInt_ColorOfCubeS[i] = 0;
            ListGameObject_CubeS[i].SetActive(false);
        }

        int a = 0;
        if (Score_VsAI == 0)
        {
            a = 1;
        }
        else
        {
            a = Mathf.FloorToInt(Mathf.Log10(Score_VsAI)) + 1;
        }
        for (int b = 1; b <= a; b++)
        {
            for (int c = 0; c < ListListInt_DataOfLetter[Mathf.FloorToInt((Score_VsAI % (Mathf.Pow(10, b))) / (Mathf.Pow(10, b - 1)))].Count; c++)
            {
                switch (ListListInt_DataOfLetter[Mathf.FloorToInt((Score_VsAI % (Mathf.Pow(10, b))) / (Mathf.Pow(10, b - 1)))][c])
                {
                    case 0:
                        ListInt_ColorOfCubeS[0 + (b - 1) * 25] = 1;
                        break;
                    case 1:
                        ListInt_ColorOfCubeS[1 + (b - 1) * 25] = 1;
                        break;
                    case 2:
                        ListInt_ColorOfCubeS[2 + (b - 1) * 25] = 1;
                        break;
                    case 3:
                        ListInt_ColorOfCubeS[3 + (b - 1) * 25] = 1;
                        break;
                    case 4:
                        ListInt_ColorOfCubeS[4 + (b - 1) * 25] = 1;
                        break;
                    case 5:
                        ListInt_ColorOfCubeS[5 + (b - 1) * 25] = 1;
                        break;
                    case 6:
                        ListInt_ColorOfCubeS[6 + (b - 1) * 25] = 1;
                        break;
                    case 7:
                        ListInt_ColorOfCubeS[7 + (b - 1) * 25] = 1;
                        break;
                    case 8:
                        ListInt_ColorOfCubeS[8 + (b - 1) * 25] = 1;
                        break;
                    case 9:
                        ListInt_ColorOfCubeS[9 + (b - 1) * 25] = 1;
                        break;
                    case 10:
                        ListInt_ColorOfCubeS[10 + (b - 1) * 25] = 1;
                        break;
                    case 11:
                        ListInt_ColorOfCubeS[11 + (b - 1) * 25] = 1;
                        break;
                    case 12:
                        ListInt_ColorOfCubeS[12 + (b - 1) * 25] = 1;
                        break;
                    case 13:
                        ListInt_ColorOfCubeS[13 + (b - 1) * 25] = 1;
                        break;
                    case 14:
                        ListInt_ColorOfCubeS[14 + (b - 1) * 25] = 1;
                        break;
                    case 15:
                        ListInt_ColorOfCubeS[15 + (b - 1) * 25] = 1;
                        break;
                    case 16:
                        ListInt_ColorOfCubeS[16 + (b - 1) * 25] = 1;
                        break;
                    case 17:
                        ListInt_ColorOfCubeS[17 + (b - 1) * 25] = 1;
                        break;
                    case 18:
                        ListInt_ColorOfCubeS[18 + (b - 1) * 25] = 1;
                        break;
                    case 19:
                        ListInt_ColorOfCubeS[19 + (b - 1) * 25] = 1;
                        break;
                    case 20:
                        ListInt_ColorOfCubeS[20 + (b - 1) * 25] = 1;
                        break;
                    case 21:
                        ListInt_ColorOfCubeS[21 + (b - 1) * 25] = 1;
                        break;
                    case 22:
                        ListInt_ColorOfCubeS[22 + (b - 1) * 25] = 1;
                        break;
                    case 23:
                        ListInt_ColorOfCubeS[23 + (b - 1) * 25] = 1;
                        break;
                    case 24:
                        ListInt_ColorOfCubeS[24 + (b - 1) * 25] = 1;
                        break;
                }
            }
        }
        for (int i = 0; i < ListInt_ColorOfCubeS.Count; i++)
        {
            switch (ListInt_ColorOfCubeS[i])
            {
                case 0:
                    ListGameObject_CubeS[i].SetActive(false);
                    break;
                case 1:
                    ListGameObject_CubeS[i].SetActive(true);
                    break;
            }
        }
    }
    //CubePの染色
    void Painting_CubeP()
    {
        //CubePの再設置
        for (int i = 0; i < ListGameObject_CubeP.Count; i++)
        {
            ListGameObject_CubeP[i].transform.position = Mark_Cube_O.transform.position + new Vector3(i % 5 + 1, Mathf.FloorToInt(i / 5) + 1, 0);
            ListGameObject_CubeP[i].transform.position += new Vector3(-10, 32.25f, 0);
            ListGameObject_CubeP[i].transform.position -= new Vector3(i % 5 * 0.5f, Mathf.FloorToInt(i / 5) * 0.5f, 0);
            ListGameObject_CubeP[i].transform.position += new Vector3(Mathf.FloorToInt(i / 25) * 3, -Mathf.FloorToInt(i / 25) * 2.5f, 0);
        }


        //CubePの染色
        for (int i = 0; i < ListGameObject_CubeP.Count; i++)
        {
            ListInt_ColorOfCubeP[i] = 0;
            ListGameObject_CubeP[i].SetActive(false);
        }
        for (int a = 0; a < ListInt_PlayersName.Count; a++)
        {
            for (int aa = 0; aa < ListListInt_DataOfLetter[ListInt_PlayersName[a]].Count; aa++)
            {
                ListGameObject_CubeP[ListListInt_DataOfLetter[ListInt_PlayersName[a]][aa] + (a * 25)].SetActive(true);
            }
            switch (ListInt_LowerSideLengthOfLetter[ListInt_PlayersName[a]])
            {
                case 1:
                    for (int aaa = 0; aaa < ListGameObject_CubeP.Count; aaa++)
                    {
                        if (aaa > ((a + 1) * 25) - 1)
                        {
                            ListGameObject_CubeP[aaa].transform.position -= new Vector3(2, 0, 0);
                        }
                    }
                    break;
                case 2:
                    for (int aaa = 0; aaa < ListGameObject_CubeP.Count; aaa++)
                    {
                        if (aaa > ((a + 1) * 25) - 1)
                        {
                            ListGameObject_CubeP[aaa].transform.position -= new Vector3(1.5f, 0, 0);
                        }
                    }
                    break;
                case 3:
                    for (int aaa = 0; aaa < ListGameObject_CubeP.Count; aaa++)
                    {
                        if (aaa > ((a + 1) * 25) - 1)
                        {
                            ListGameObject_CubeP[aaa].transform.position -= new Vector3(1f, 0, 0);
                        }
                    }
                    break;
                case 4:
                    for (int aaa = 0; aaa < ListGameObject_CubeP.Count; aaa++)
                    {
                        if (aaa > ((a + 1) * 25) - 1)
                        {
                            ListGameObject_CubeP[aaa].transform.position -= new Vector3(0.5f, 0, 0);
                        }
                    }
                    break;
                case 5:
                    for (int aaa = 0; aaa < ListGameObject_CubeP.Count; aaa++)
                    {
                        if (aaa > ((a + 1) * 25) - 1)
                        {
                            ListGameObject_CubeP[aaa].transform.position -= new Vector3(0, 0, 0);
                        }
                    }
                    break;
            }
        }
    }

    //CubeGの価値付け
    void Evaluating_CubeG()
    {
        bool IsChanging = true;

        //
        for (int x = 0; x < ListInt_ColorOfCubeG.Count; x++)
        {
            if (ListInt_TypeOfCubeG[x] != 1)
            {
                if (ListInt_ColorOfCubeG[x] == 0)
                {
                    ListInt_PriorityOfCubeG[x] = 0;
                }
                if (ListInt_ColorOfCubeG[x] == ColorOfFirstCandidate)
                {
                    ListInt_PriorityOfCubeG[x] = 1;
                }
                else
                {
                    if (ListInt_ColorOfCubeG[x] == ColorOfSecondCandidate)
                    {
                        ListInt_PriorityOfCubeG[x] = 3;
                    }
                    else
                    {
                        if (ListInt_ColorOfCubeG[x] == ColorOfThirdCandidate)
                        {
                            ListInt_PriorityOfCubeG[x] = 5;
                        }
                    }
                }
            }
            else
            {
                ListInt_PriorityOfCubeG[x] = 0;
            }
        }
        //
        for (int x = 0; x < ListInt_PriorityOfCubeG.Count; x++)
        {
            if (x % 14 + 1 == 3 | x % 14 + 1 == 12)
            {
                if (ListInt_PriorityOfCubeG[x] == 1)
                {
                    ListInt_PriorityOfCubeG[x] = 2;
                }
                if (ListInt_PriorityOfCubeG[x] == 3)
                {
                    ListInt_PriorityOfCubeG[x] = 4;
                }
                if (ListInt_PriorityOfCubeG[x] == 5)
                {
                    ListInt_PriorityOfCubeG[x] = 6;
                }
            }
        }
        //
        while (IsChanging == true)
        {
            IsChanging = false;

            for (int x = 0; x < ListInt_PriorityOfCubeG.Count; x++)
            {
                if (ListInt_PriorityOfCubeG[x] == 2)
                {
                    if (ListInt_PriorityOfCubeG[x + 14] == 1)
                    {
                        ListInt_PriorityOfCubeG[x + 14] = 2;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 14] == 1)
                    {
                        ListInt_PriorityOfCubeG[x - 14] = 2;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x + 1] == 1)
                    {
                        ListInt_PriorityOfCubeG[x + 1] = 2;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 1] == 1)
                    {
                        ListInt_PriorityOfCubeG[x - 1] = 2;
                        IsChanging = true;
                    }
                }
                if (ListInt_PriorityOfCubeG[x] == 4)
                {
                    if (ListInt_PriorityOfCubeG[x + 14] == 3)
                    {
                        ListInt_PriorityOfCubeG[x + 14] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 14] == 3)
                    {
                        ListInt_PriorityOfCubeG[x - 14] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x + 1] == 3)
                    {
                        ListInt_PriorityOfCubeG[x + 1] = 4;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 1] == 3)
                    {
                        ListInt_PriorityOfCubeG[x - 1] = 4;
                        IsChanging = true;
                    }
                }
                if (ListInt_PriorityOfCubeG[x] == 6)
                {
                    if (ListInt_PriorityOfCubeG[x + 14] == 5)
                    {
                        ListInt_PriorityOfCubeG[x + 14] = 6;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 14] == 5)
                    {
                        ListInt_PriorityOfCubeG[x - 14] = 6;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x + 1] == 5)
                    {
                        ListInt_PriorityOfCubeG[x + 1] = 6;
                        IsChanging = true;
                    }
                    if (ListInt_PriorityOfCubeG[x - 1] == 5)
                    {
                        ListInt_PriorityOfCubeG[x - 1] = 6;
                        IsChanging = true;
                    }
                }
            }
        }

        Invoke("Brain", 0);
    }


    //CubeGを爆破
    void Exploding_CubeG()
    {
        AudioSource_AudioSource18.Play();

        //CubeDの再設置
        for (int i = 0; i < ListGameObject_CubeG.Count; i++)
        {
            ListGameObject_CubeG[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
            ListGameObject_CubeG[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
            ListGameObject_CubeG[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);

            ListGameObject_CubeD[i].SetActive(false);
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
            ListGameObject_CubeD[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);

            ListGameObject_CubeD[i].transform.GetComponent<CubeD_Control>().enabled = false;
            ListGameObject_CubeD[i].transform.GetComponent<BoxCollider>().enabled = false;
            ListGameObject_CubeD[i].transform.GetComponent<Rigidbody>().useGravity = false;

            ListGameObject_CubeD[i].transform.position = ListGameObject_CubeG[i].transform.position;
        }

        int a = 0;
        int b = 0;

        for (int i = 0; i < ListInt_ColorOfCubeG.Count; i++)
        {
            if (i % 14 + 1 >= 3 & i % 14 + 1 <= 12 & Mathf.FloorToInt(i / 14) + 1 >= 3 & Mathf.FloorToInt(i / 14) + 1 <= 32)
            {
                switch (ListInt_ColorOfCubeG[i])
                {
                    case 1:
                        ListGameObject_CubeD[i - 30 - b].SetActive(true);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 10, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 0, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -10, 5), 100, 0);
                        break;
                    case 2:
                        ListGameObject_CubeD[i - 30 - b].SetActive(true);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 10, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 0, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -10, 5), 100, 0);
                        break;
                    case 3:
                        ListGameObject_CubeD[i - 30 - b].SetActive(true);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<CubeD_Control>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<BoxCollider>().enabled = true;
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().useGravity = true;

                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 10, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, 0, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -5, 5), 100, 0);
                        ListGameObject_CubeD[i - 30 - b].transform.GetComponent<Rigidbody>().AddExplosionForce(Random.Range(0, 500), Mark_Cube_O.transform.position + new Vector3(5.5f, 15.5f, 0) + new Vector3(0, -10, 5), 100, 0);
                        break;
                }

                a += 1;

                if (a == 10)
                {
                    a = 0;
                    b += 4;
                }
            }
        }
    }


    //Resultのロード
    void LoadingScene_Result()
    {
        SceneManager.LoadScene("Result");
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class PlayerSinglePlay_Control : MonoBehaviour
{
    private GameObject MainCamera;

    private GameObject Cubes_CubeG;
    private GameObject Cubes_CubeH;
    private GameObject Cubes_CubeN1;
    private GameObject Cubes_CubeN2;
    private GameObject Cubes_CubeN3;
    private GameObject Cubes_CubeN4;
    private GameObject Cubes_CubeN5;
    private GameObject Cubes_CubeS;
    private GameObject Cubes_CubeB1;
    private GameObject Cubes_CubeB2;
    private GameObject Cubes_CubeB3;
    private GameObject Cubes_CubeB4;
    private GameObject Cubes_CubeB5;

    private GameObject Frames_FrameMode;

    private GameObject AudioSources;

    private GameObject CubeG;
    private GameObject CubeH;
    private GameObject CubeN;
    private GameObject CubeS;
    private GameObject CubeB;

    private AudioSource AudioSource_AudioSource_1;
    private AudioSource AudioSource_AudioSource_2;
    private AudioSource AudioSource_AudioSource_3;
    private AudioSource AudioSource_AudioSource_4;
    private AudioSource AudioSource_AudioSource_5;
    private AudioSource AudioSource_AudioSource_6;
    private AudioSource AudioSource_AudioSource_7;
    private AudioSource AudioSource_AudioSource_8;
    private AudioSource AudioSource_AudioSource_9;
    private AudioSource AudioSource_AudioSource_10;

    private List<GameObject> GameObjectList_CubeG = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeH = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeN1 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeN2 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeN3 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeN4 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeN5 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeS = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeB1 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeB2 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeB3 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeB4 = new List<GameObject> { };
    private List<GameObject> GameObjectList_CubeB5 = new List<GameObject> { };

    private List<int> IntList_ColorOfCubeG = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    private List<int> IntList_ColorOfCubeH = new List<int>  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeN1 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeN2 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeN3 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeN4 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeN5 = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_ColorOfCubeS = new List<int> { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                             0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
    private List<int> IntList_ColorOfCubeB1 = new List<int> { };
    private List<int> IntList_ColorOfCubeB2 = new List<int> { };
    private List<int> IntList_ColorOfCubeB3 = new List<int> { };
    private List<int> IntList_ColorOfCubeB4 = new List<int> { };
    private List<int> IntList_ColorOfCubeB5 = new List<int> { };

    private List<int> IntList_TypeOfCubeG = new List<int> {0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                                           0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    private List<List<int>> IntListList_DataOfBlock = new List<List<int>> { new List<int> { 0 },
                                                                            new List<int> { 14, 15 },
                                                                            new List<int> { 0, 1, 15 }, new List<int> { 14, 15, 16 },
                                                                            new List<int> { 0, 1, 14, 15 }, new List<int> { 14, 15, 16, 29 }, new List<int> { 14, 15, 29, 30 }, new List<int> { 15, 16, 28, 29 }, new List<int> { 14, 15, 16, 30 }, new List<int> { 14, 15, 16, 28 }, new List<int> { 28, 29, 30, 31 },
                                                                            new List<int> { 14, 15, 16, 29, 30 }, new List<int> { 14, 15, 16, 28, 29 }, new List<int> { 14, 15, 16, 28, 30 }, new List<int> { 1, 14, 15, 16, 29 }, new List<int> { 0, 1, 15, 29, 30 }, new List<int> { 1, 2, 15, 28, 29 }, new List<int> { 0, 1, 2, 16, 30 }, new List<int> { 1, 14, 15, 16, 30 }, new List<int> { 1, 14, 15, 16, 28 }, new List<int> { 1, 15, 28, 29, 30 }, new List<int> { 0, 1, 15, 16, 30 },
                                                                            new List<int> { 0, 1, 2, 15, 16, 30 }, new List<int> { 1, 14, 15, 16, 28, 30 }, new List<int> { 1, 14, 15, 16, 29, 30 }, new List<int> { 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 14, 16, 28, 29, 30 }, new List<int> { 0, 14, 15, 16, 29, 30 }, new List<int> { 2, 14, 15, 16, 28, 29 }, new List<int> { 2, 14, 15, 16, 28, 30 }, new List<int> { 0, 14, 15, 16, 28, 30 }, new List<int> { 1, 15, 16, 28, 29, 30 }, new List<int> { 1, 14, 15, 28, 29, 30 }, new List<int> { 14, 15, 16, 28, 29, 30 } ,
                                                                            new List<int> { 1, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 28 }, new List<int> { 0, 2, 14, 15, 16, 29, 30 }, new List<int> { 0, 2, 14, 15, 16, 28, 29 }, new List<int> { 0, 1, 14, 15, 16, 29, 30 }, new List<int> { 0, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 15, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 29 } ,
                                                                            new List<int> { 0, 1, 2, 14, 16, 28, 29, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 28, 30 }, new List<int> { 0, 1, 2, 14, 15, 16, 29, 30 },
                                                                            new List<int> { 0, 1, 2, 14, 15, 16, 28, 29, 30 }};
    private List<List<int>> IntListList_DataOfFigure = new List<List<int>> { new List<int> { 0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14 }, new List<int> { 0, 1, 2, 4, 7, 9, 10, 13 }, new List<int> { 0, 1, 2, 3, 6, 7, 8, 11, 12, 13, 14 }, new List<int> { 0, 1, 2, 5, 6, 7, 8, 11, 12, 13, 14 }, new List<int> { 2, 5, 6, 7, 8, 9, 11, 12, 14 }, new List<int> { 0, 1, 2, 5, 6, 7, 8, 9, 12, 13, 14 }, new List<int> { 0, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14 }, new List<int> { 2, 5, 6, 8, 9, 11, 12, 13, 14 }, new List<int> { 0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14 }, new List<int> { 0, 1, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14 } };

    private List<List<int>> IntListList_SideLengthOfBlock = new List<List<int>> { new List<int> { 1, 1, 1, 1 },
                                                                                       new List<int> { 2, 1, 2, 1 },
                                                                                       new List<int> { 2, 2, 2, 2 }, new List<int> { 3, 1, 3, 1 },
                                                                                       new List<int> { 2, 2, 2, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 4, 1, 4, 1 },
                                                                                       new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 2, 3, 2 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                       new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 2, 3, 2 },
                                                                                       new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                       new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 }, new List<int> { 3, 3, 3, 3 },
                                                                                       new List<int> { 3, 3, 3, 3 } };
    private List<List<int>> IntListList_StartCoordinateOfBlock = new List<List<int>> { new List<int> { 380, 381, 382, 383, 384, 385, 386, 387, 388, 389 },
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386, 387, 388 } ,
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386, 387 },
                                                                                        new List<int> { 380, 381, 382, 383, 384, 385, 386 } };
    private List<List<int>> IntListList_ColorOfBlock = new List<List<int>> { new List<int> { 1,2,3,2,3,1,3,1,2 }, new List<int> { 1,3,2,3,2,1,2,1,3 }, new List<int> { 2,1,3,1,3,2,3,2,1 }, new List<int> { 2,3,1,3,1,2,1,2,3 }, new List<int> { 3,1,2,1,2,3,2,3,1 }, new List<int> { 3,2,1,2,1,3,1,3,2 },
                                                                             new List<int> { 1,2,3,3,1,2,2,3,1 }, new List<int> { 1,3,2,2,1,3,3,2,1 }, new List<int> { 2,1,3,3,2,1,1,3,2 }, new List<int> { 2,3,1,1,2,3,3,1,2 }, new List<int> { 3,1,2,2,3,1,1,2,3 }, new List<int> { 3,2,1,1,3,2,2,1,3 }};
    private List<int> IntList_Direction = new List<int> { 1, 2, 3, 4 };

    private List<float> FloatList_RateOfFreeFall = new List<float> { 0.65f, 0.60f, 0.55f, 0.50f, 0.45f, 0.40f, 0.35f, 0.30f, 0.25f, 0.20f, 0.15f, 0.10f, 0.09f, 0.08f, 0.07f, 0.06f, 0.05f, 0.04f, 0.03f, 0.02f, 0.01f };

    private List<int> IntList_Block1 = new List<int> { 1 };
    private List<int> IntList_Block2 = new List<int> { 2 };
    private List<int> IntList_Block3 = new List<int> { 3, 4 };
    private List<int> IntList_Block4 = new List<int> { 5, 6, 7, 8, 9, 10, 11 };
    private List<int> IntList_Block5 = new List<int> { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
    private List<int> IntList_Block6 = new List<int> { 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 };
    private List<int> IntList_Block7 = new List<int> { 35, 36, 37, 38, 39, 40, 41, 42, 43 };
    private List<int> IntList_Block8 = new List<int> { 44, 45, 46 };
    private List<int> IntList_Block9 = new List<int> { 47 };

    private List<int> IntList_OverlapCubeG = new List<int> { };

    private List<int> IntList_NextBlock = new List<int> { };
    private List<int> IntList_ColorOfNextBlock = new List<int> { };
    private List<List<int>> IntListList_ColorOfNextBlock = new List<List<int>> { };
    private List<int> IntList_DirectionOfNextBlock = new List<int> { };

    private List<int> IntList_NextBlock1 = new List<int> { };
    private List<int> IntList_NextBlock2 = new List<int> { };
    private List<int> IntList_NextBlock3 = new List<int> { };
    private List<int> IntList_NextBlock4 = new List<int> { };
    private List<int> IntList_NextBlock5 = new List<int> { };
    private List<int> IntList_NextBlock6 = new List<int> { };
    private List<int> IntList_NextBlock7 = new List<int> { };
    private List<int> IntList_NextBlock8 = new List<int> { };
    private List<int> IntList_NextBlock9 = new List<int> { };

    private int CurrentBlock;
    private List<int> IntList_DataOfCurrentBlock = new List<int> { };
    private List<int> IntList_LowerSideLengthOfCurrentBlock = new List<int> { };
    private int CoordinateOfCurrentBlock;
    private int DirectionOfCurrentBlock;
    private int ColorOfCurrentBlock;

    private int TemporaryBlock1;
    private List<int> IntList_DataOfTemporaryBlock1 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfTemporaryBlock1 = new List<int> { };
    private int DirectionOfTemporaryBlock1;
    private int ColorOfTemporaryBlock1;

    private int TemporaryBlock2;
    private List<int> IntList_DataOfTemporaryBlock2 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfTemporaryBlock2 = new List<int> { };
    private int DirectionOfTemporaryBlock2;
    private int ColorOfTemporaryBlock2;

    private int HoldBlock;
    private List<int> IntList_DataOfHoldBlock = new List<int> { };
    private List<int> IntList_LowerSideLengthOfHoldBlock = new List<int> { };
    private int DirectionOfHoldBlock;
    private int ColorOfHoldBlock;

    private int NextBlock1;
    private List<int> IntList_DataOfNextBlock1 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock1 = new List<int> { };
    private int DirectionOfNextBlock1;
    private int ColorOfNextBlock1;

    private int NextBlock2;
    private List<int> IntList_DataOfNextBlock2 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock2 = new List<int> { };
    private int DirectionOfNextBlock2;
    private int ColorOfNextBlock2;

    private int NextBlock3;
    private List<int> IntList_DataOfNextBlock3 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock3 = new List<int> { };
    private int DirectionOfNextBlock3;
    private int ColorOfNextBlock3;

    private int NextBlock4;
    private List<int> IntList_DataOfNextBlock4 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock4 = new List<int> { };
    private int DirectionOfNextBlock4;
    private int ColorOfNextBlock4;

    private int NextBlock5;
    private List<int> IntList_DataOfNextBlock5 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock5 = new List<int> { };
    private int DirectionOfNextBlock5;
    private int ColorOfNextBlock5;

    private int NextBlock6;
    private List<int> IntList_DataOfNextBlock6 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock6 = new List<int> { };
    private int DirectionOfNextBlock6;
    private int ColorOfNextBlock6;

    private int NextBlock7;
    private List<int> IntList_DataOfNextBlock7 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock7 = new List<int> { };
    private int DirectionOfNextBlock7;
    private int ColorOfNextBlock7;

    private int NextBlock8;
    private List<int> IntList_DataOfNextBlock8 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock8 = new List<int> { };
    private int DirectionOfNextBlock8;
    private int ColorOfNextBlock8;

    private int NextBlock9;
    private List<int> IntList_DataOfNextBlock9 = new List<int> { };
    private List<int> IntList_LowerSideLengthOfNextBlock9 = new List<int> { };
    private int DirectionOfNextBlock9;
    private int ColorOfNextBlock9;

    private int ScoreSinglePlay = 0;
    private int NumberOfCombos = 0;
    private int NumberOfRens = 0;
    private int CountOfContinuousSummonedCurrentBlock = 0;

    private float RateOfFreeFall;

    private float CameraAngleX;
    private float CameraAngleY;

    private Color Albedo_Red = new Color(1, 0, 0, 1);
    private Color Emission_Red = new Color(1, 0, 0.5f, 10);

    private Color Albedo_Green = new Color(0, 1, 0, 1);
    private Color Emission_Green = new Color(0, 1, 0.25f, 10);

    private Color Albedo_Blue = new Color(0, 0, 1, 1);
    private Color Emission_Blue = new Color(0, 0.5f, 1, 10);

    private Color Albedo_Yellow = new Color(1, 1, 0, 1);
    private Color Emission_Yellow = new Color(1, 1, 0, 10);

    private Color Albedo_White = new Color(1, 1, 1, 1);
    private Color Emission_White = new Color(1, 1, 1, 10);

    private Color Albedo_Gray = new Color(0.25f, 0.25f, 0.25f, 1);
    private Color Emission_Gray = new Color(0.25f, 0.25f, 0.25f, 0);

    private Color Albedo_Default = new Color(1, 1, 1, 1);
    private Color Emission_Default = new Color(0, 0, 0, 0);

    private string BonusBlock1 = "";
    private string BonusBlock2 = "";
    private string BonusBlock3 = "";
    private string BonusBlock4 = "";
    private string BonusBlock5 = "";

    private bool QU = false;
    private bool WU = false;
    private bool EU = false;
    private bool RU = false;
    private bool TU = false;
    private bool YU = false;
    private bool UU = false;
    private bool IU = false;
    private bool OU = false;
    private bool PU = false;
    private bool AU = false;
    private bool SU = false;
    private bool DU = false;
    private bool FU = false;
    private bool GU = false;
    private bool HU = false;
    private bool JU = false;
    private bool KU = false;
    private bool LU = false;
    private bool ZU = false;
    private bool XU = false;
    private bool CU = false;
    private bool VU = false;
    private bool BU = false;
    private bool NU = false;
    private bool MU = false;
    private bool Alpha0U = false;
    private bool Alpha1U = false;
    private bool Alpha2U = false;
    private bool Alpha3U = false;
    private bool Alpha4U = false;
    private bool Alpha5U = false;
    private bool Alpha6U = false;
    private bool Alpha7U = false;
    private bool Alpha8U = false;
    private bool Alpha9U = false;
    private bool BackSpaceU = false;
    private bool SpaceU = false;
    private bool RightShiftU = false;
    private bool LeftShiftU = false;
    private bool RightCtrlU = false;
    private bool LeftCtrlU = false;
    private bool TabU = false;
    private bool EscapeU = false;
    private bool EnterU = false;
    private bool UpArrowU = false;
    private bool DownArrowU = false;
    private bool RightArrowU = false;
    private bool LeftArrowU = false;

    private bool Q = false;
    private bool W = false;
    private bool E = false;
    private bool R = false;
    private bool T = false;
    private bool Y = false;
    private bool U = false;
    private bool I = false;
    private bool O = false;
    private bool P = false;
    private bool A = false;
    private bool S = false;
    private bool D = false;
    private bool F = false;
    private bool G = false;
    private bool H = false;
    private bool J = false;
    private bool K = false;
    private bool L = false;
    private bool Z = false;
    private bool X = false;
    private bool C = false;
    private bool V = false;
    private bool B = false;
    private bool N = false;
    private bool M = false;
    private bool Alpha0 = false;
    private bool Alpha1 = false;
    private bool Alpha2 = false;
    private bool Alpha3 = false;
    private bool Alpha4 = false;
    private bool Alpha5 = false;
    private bool Alpha6 = false;
    private bool Alpha7 = false;
    private bool Alpha8 = false;
    private bool Alpha9 = false;
    private bool BackSpace = false;
    private bool Space = false;
    private bool RightShift = false;
    private bool LeftShift = false;
    private bool RightCtrl = false;
    private bool LeftCtrl = false;
    private bool Tab = false;
    private bool Escape = false;
    private bool Enter = false;
    private bool UpArrow = false;
    private bool DownArrow = false;
    private bool RightArrow = false;
    private bool LeftArrow = false;

    private bool QD = false;
    private bool WD = false;
    private bool ED = false;
    private bool RD = false;
    private bool TD = false;
    private bool YD = false;
    private bool UD = false;
    private bool ID = false;
    private bool OD = false;
    private bool PD = false;
    private bool AD = false;
    private bool SD = false;
    private bool DD = false;
    private bool FD = false;
    private bool GD = false;
    private bool HD = false;
    private bool JD = false;
    private bool KD = false;
    private bool LD = false;
    private bool ZD = false;
    private bool XD = false;
    private bool CD = false;
    private bool VD = false;
    private bool BD = false;
    private bool ND = false;
    private bool MD = false;
    private bool Alpha0D = false;
    private bool Alpha1D = false;
    private bool Alpha2D = false;
    private bool Alpha3D = false;
    private bool Alpha4D = false;
    private bool Alpha5D = false;
    private bool Alpha6D = false;
    private bool Alpha7D = false;
    private bool Alpha8D = false;
    private bool Alpha9D = false;
    private bool BackSpaceD = false;
    private bool SpaceD = false;
    private bool RightShiftD = false;
    private bool LeftShiftD = false;
    private bool RightCtrlD = false;
    private bool LeftCtrlD = false;
    private bool TabD = false;
    private bool EscapeD = false;
    private bool EnterD = false;
    private bool UpArrowD = false;
    private bool DownArrowD = false;
    private bool RightArrowD = false;
    private bool LeftArrowD = false;

    private bool CanUseShortCutKey = true;
    private bool CanPlayFallingSound = true;
    private bool CanHoldCurrentBlock = true;
    private bool CanInvokeIntermittentRightMovement_CurrentBlock = true;
    private bool CanInvokeIntermittentLeftMovement_CurrentBlock = true;
    private bool CanInvokeDisassembly_CurrentBlock = true;

    private bool IsInitialStart = true;

    private bool FrameMode = false;
    private bool GhostMode = false;


    void Start()
    {
        MainCamera = GameObject.Find("MainCamera").gameObject;

        Cubes_CubeG = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeG").gameObject;
        Cubes_CubeH = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeH").gameObject;
        Cubes_CubeN1 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN1").gameObject;
        Cubes_CubeN2 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN2").gameObject;
        Cubes_CubeN3 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN3").gameObject;
        Cubes_CubeN4 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN4").gameObject;
        Cubes_CubeN5 = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeN5").gameObject;
        Cubes_CubeS = GameObject.Find("Cubes").gameObject.transform.Find("Cubes_CubeS").gameObject;

        Frames_FrameMode = GameObject.Find("Frames").gameObject.transform.Find("Frames_FrameMode").gameObject;

        AudioSources = GameObject.Find("AudioSources").gameObject;

        CubeG = (GameObject)Resources.Load("Object/CubeG");
        CubeH = (GameObject)Resources.Load("Object/CubeH");
        CubeN = (GameObject)Resources.Load("Object/CubeN");
        CubeS = (GameObject)Resources.Load("Object/CubeS");

        AudioSource_AudioSource_1 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_1").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_2 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_2").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_3 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_3").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_4 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_4").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_5 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_5").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_6 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_6").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_7 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_7").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_8 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_8").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_9 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_9").gameObject.transform.GetComponent<AudioSource>();
        AudioSource_AudioSource_10 = GameObject.Find("AudioSources").gameObject.transform.Find("AudioSource_10").gameObject.transform.GetComponent<AudioSource>();

        //CubeG召喚
        for (int i = 0; i < IntList_ColorOfCubeG.Count; i++)
        {
            if (i % 14 + 1 >= 3 & i % 14 + 1 <= 12 & Mathf.FloorToInt(i / 14) + 1 >= 3 & Mathf.FloorToInt(i / 14) + 1 <= 28)
            {
                GameObject GameObject_CubeG = Instantiate(CubeG) as GameObject;
                GameObject_CubeG.name = "CubeG_" + i;
                GameObject_CubeG.transform.position = new Vector3(i % 14 + 1, Mathf.FloorToInt(i / 14) + 1, 0);
                GameObject_CubeG.transform.position += new Vector3(-2, -2, 0);
                GameObject_CubeG.transform.parent = Cubes_CubeG.transform;
                GameObjectList_CubeG.Add(GameObject_CubeG);
            }
            if (i % 14 + 1 <= 2 | i % 14 + 1 >= 13 | Mathf.FloorToInt(i / 14) + 1 <= 2)
            {
                IntList_TypeOfCubeG[i] = 10;
            }
        }
        //CubeH召喚
        for (int i = 0; i < IntList_ColorOfCubeH.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH_" + i;

                GameObject_CubeH.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 23.5f, 0);
                GameObject_CubeH.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                GameObjectList_CubeH.Add(GameObject_CubeH);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH_" + i;

                GameObject_CubeH.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 23.5f, 0);
                GameObject_CubeH.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                GameObjectList_CubeH.Add(GameObject_CubeH);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH_" + i;

                GameObject_CubeH.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 23.5f, 0);
                GameObject_CubeH.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                GameObjectList_CubeH.Add(GameObject_CubeH);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeH = Instantiate(CubeH) as GameObject;
                GameObject_CubeH.name = "CubeH_" + i;

                GameObject_CubeH.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeH.transform.position += new Vector3(-3, 23.5f, 0);
                GameObject_CubeH.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeH.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeH.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeH.transform.parent = Cubes_CubeH.transform;
                GameObject_CubeH.SetActive(false);
                GameObjectList_CubeH.Add(GameObject_CubeH);
            }
        }
        //CubeN1召喚
        for (int i = 0; i < IntList_ColorOfCubeN1.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1_" + i;

                GameObject_CubeN1.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 23.5f, 0);
                GameObject_CubeN1.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                GameObjectList_CubeN1.Add(GameObject_CubeN1);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1_" + i;

                GameObject_CubeN1.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 23.5f, 0);
                GameObject_CubeN1.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                GameObjectList_CubeN1.Add(GameObject_CubeN1);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1_" + i;

                GameObject_CubeN1.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 23.5f, 0);
                GameObject_CubeN1.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                GameObjectList_CubeN1.Add(GameObject_CubeN1);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeN1 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN1.name = "CubeN1_" + i;

                GameObject_CubeN1.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeN1.transform.position += new Vector3(12, 23.5f, 0);
                GameObject_CubeN1.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeN1.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN1.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN1.transform.parent = Cubes_CubeN1.transform;
                GameObject_CubeN1.SetActive(false);
                GameObjectList_CubeN1.Add(GameObject_CubeN1);
            }
        }
        //CubeN2召喚
        for (int i = 0; i < IntList_ColorOfCubeN2.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2_" + i;

                GameObject_CubeN2.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 19.5f, 0);
                GameObject_CubeN2.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                GameObjectList_CubeN2.Add(GameObject_CubeN2);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2_" + i;

                GameObject_CubeN2.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 19.5f, 0);
                GameObject_CubeN2.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                GameObjectList_CubeN2.Add(GameObject_CubeN2);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2_" + i;

                GameObject_CubeN2.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 19.5f, 0);
                GameObject_CubeN2.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                GameObjectList_CubeN2.Add(GameObject_CubeN2);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeN2 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN2.name = "CubeN2_" + i;

                GameObject_CubeN2.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeN2.transform.position += new Vector3(12, 19.5f, 0);
                GameObject_CubeN2.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeN2.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN2.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN2.transform.parent = Cubes_CubeN2.transform;
                GameObject_CubeN2.SetActive(false);
                GameObjectList_CubeN2.Add(GameObject_CubeN2);
            }
        }
        //CubeN3召喚
        for (int i = 0; i < IntList_ColorOfCubeN3.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3_" + i;

                GameObject_CubeN3.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 15.5f, 0);
                GameObject_CubeN3.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                GameObjectList_CubeN3.Add(GameObject_CubeN3);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3_" + i;

                GameObject_CubeN3.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 15.5f, 0);
                GameObject_CubeN3.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                GameObjectList_CubeN3.Add(GameObject_CubeN3);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3_" + i;

                GameObject_CubeN3.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 15.5f, 0);
                GameObject_CubeN3.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                GameObjectList_CubeN3.Add(GameObject_CubeN3);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeN3 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN3.name = "CubeN3_" + i;

                GameObject_CubeN3.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeN3.transform.position += new Vector3(12, 15.5f, 0);
                GameObject_CubeN3.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeN3.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN3.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN3.transform.parent = Cubes_CubeN3.transform;
                GameObject_CubeN3.SetActive(false);
                GameObjectList_CubeN3.Add(GameObject_CubeN3);
            }
        }
        //CubeN4召喚
        for (int i = 0; i < IntList_ColorOfCubeN4.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4_" + i;

                GameObject_CubeN4.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 11.5f, 0);
                GameObject_CubeN4.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                GameObjectList_CubeN4.Add(GameObject_CubeN4);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4_" + i;

                GameObject_CubeN4.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 11.5f, 0);
                GameObject_CubeN4.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                GameObjectList_CubeN4.Add(GameObject_CubeN4);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4_" + i;

                GameObject_CubeN4.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 11.5f, 0);
                GameObject_CubeN4.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                GameObjectList_CubeN4.Add(GameObject_CubeN4);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeN4 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN4.name = "CubeN4_" + i;

                GameObject_CubeN4.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeN4.transform.position += new Vector3(12, 11.5f, 0);
                GameObject_CubeN4.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeN4.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN4.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN4.transform.parent = Cubes_CubeN4.transform;
                GameObject_CubeN4.SetActive(false);
                GameObjectList_CubeN4.Add(GameObject_CubeN4);
            }
        }
        //CubeN5召喚
        for (int i = 0; i < IntList_ColorOfCubeN5.Count; i++)
        {
            if (i == 0)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5_" + i;

                GameObject_CubeN5.transform.position = new Vector3((i - 0) % 1 + 1, Mathf.FloorToInt((i - 0) / 1) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 7.5f, 0);
                GameObject_CubeN5.transform.position -= new Vector3((i - 0) % 1 * 0.5f, Mathf.FloorToInt((i - 0) / 1) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(0, 0, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                GameObjectList_CubeN5.Add(GameObject_CubeN5);
            }
            if (i >= 1 & i <= 4)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5_" + i;

                GameObject_CubeN5.transform.position = new Vector3((i - 1) % 2 + 1, Mathf.FloorToInt((i - 1) / 2) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 7.5f, 0);
                GameObject_CubeN5.transform.position -= new Vector3((i - 1) % 2 * 0.5f, Mathf.FloorToInt((i - 1) / 2) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.25f, -0.25f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                GameObjectList_CubeN5.Add(GameObject_CubeN5);
            }
            if (i >= 5 & i <= 13)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5_" + i;

                GameObject_CubeN5.transform.position = new Vector3((i - 5) % 3 + 1, Mathf.FloorToInt((i - 5) / 3) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 7.5f, 0);
                GameObject_CubeN5.transform.position -= new Vector3((i - 5) % 3 * 0.5f, Mathf.FloorToInt((i - 5) / 3) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.5f, -0.5f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                GameObjectList_CubeN5.Add(GameObject_CubeN5);
            }
            if (i >= 14)
            {
                GameObject GameObject_CubeN5 = Instantiate(CubeN) as GameObject;
                GameObject_CubeN5.name = "CubeN5_" + i;

                GameObject_CubeN5.transform.position = new Vector3((i - 14) % 4 + 1, Mathf.FloorToInt((i - 14) / 4) + 1, 0);
                GameObject_CubeN5.transform.position += new Vector3(12, 7.5f, 0);
                GameObject_CubeN5.transform.position -= new Vector3((i - 14) % 4 * 0.5f, Mathf.FloorToInt((i - 14) / 4) * 0.5f, 0);
                GameObject_CubeN5.transform.position += new Vector3(-0.75f, -0.75f, 0);

                GameObject_CubeN5.transform.localScale = new Vector3(0.5f, 0.5f, 1);
                GameObject_CubeN5.transform.parent = Cubes_CubeN5.transform;
                GameObject_CubeN5.SetActive(false);
                GameObjectList_CubeN5.Add(GameObject_CubeN5);
            }
        }
        //CubeS召喚
        for (int i = 0; i < IntList_ColorOfCubeS.Count; i++)
        {
            GameObject GameObject_CubeS = Instantiate(CubeS) as GameObject;
            GameObject_CubeS.name = "CubeS_" + i;

            GameObject_CubeS.transform.position = new Vector3(i % 3 + 1, Mathf.FloorToInt(i / 3) + 1, 0);
            GameObject_CubeS.transform.position += new Vector3(26.25f,22.25f,0);
            GameObject_CubeS.transform.position -= new Vector3(i % 3 * 0.5f, Mathf.FloorToInt(i / 3) * 0.5f, 0);
            GameObject_CubeS.transform.position -= new Vector3(Mathf.FloorToInt(i / 15) * 2, Mathf.FloorToInt(i / 15) * 2.5f, 0);

            GameObject_CubeS.transform.localScale = new Vector3(0.5f, 0.5f, 1);
            GameObject_CubeS.transform.parent = Cubes_CubeS.transform;
            GameObject_CubeS.SetActive(false);
            GameObjectList_CubeS.Add(GameObject_CubeS);
        }


        //SinglePlayのセット
        if (IsInitialStart == true)
        {
            IntList_NextBlock1 = new List<int>(IntList_Block1);
            IntList_NextBlock2 = new List<int>(IntList_Block2);
            IntList_NextBlock3 = new List<int>(IntList_Block3);
            IntList_NextBlock4 = new List<int>(IntList_Block4);
            IntList_NextBlock5 = new List<int>(IntList_Block5);
            IntList_NextBlock6 = new List<int>(IntList_Block6);
            IntList_NextBlock7 = new List<int>(IntList_Block7);
            IntList_NextBlock8 = new List<int>(IntList_Block8);
            IntList_NextBlock9 = new List<int>(IntList_Block9);
            IntListList_ColorOfNextBlock = new List<List<int>>(IntListList_ColorOfBlock);

            int a = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock1.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock1[a]);
            IntList_NextBlock1.Remove(IntList_NextBlock1[a]);
            int b = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock2.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock2[b]);
            IntList_NextBlock2.Remove(IntList_NextBlock2[b]);
            int c = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock3.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock3[c]);
            IntList_NextBlock3.Remove(IntList_NextBlock3[c]);
            int d = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock4.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock4[d]);
            IntList_NextBlock4.Remove(IntList_NextBlock4[d]);
            int e = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock5.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock5[e]);
            IntList_NextBlock5.Remove(IntList_NextBlock5[e]);
            int f = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock6.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock6[f]);
            IntList_NextBlock6.Remove(IntList_NextBlock6[f]);
            int g = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock7.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock7[g]);
            IntList_NextBlock7.Remove(IntList_NextBlock7[g]);
            int h = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock8.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock8[h]);
            IntList_NextBlock8.Remove(IntList_NextBlock8[h]);
            int i = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock9.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock9[i]);
            IntList_NextBlock9.Remove(IntList_NextBlock9[i]);
            int j = Mathf.FloorToInt(Random.Range(1, IntListList_ColorOfNextBlock.Count + 1)) - 1;
            IntList_ColorOfNextBlock = IntListList_ColorOfNextBlock[j];
            IntListList_ColorOfNextBlock.Remove(IntListList_ColorOfNextBlock[j]);
            for (int k = 0; k < 9; k++)
            {
                IntList_DirectionOfNextBlock.Add(Mathf.FloorToInt(Random.Range(1, IntList_Direction.Count + 1)));
            }


            int l = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock1 = IntList_NextBlock[l];
            IntList_DataOfNextBlock1 = IntListList_DataOfBlock[IntList_NextBlock[l] - 1];
            IntList_LowerSideLengthOfNextBlock1 = IntListList_SideLengthOfBlock[IntList_NextBlock[l] - 1];
            DirectionOfNextBlock1 = IntList_DirectionOfNextBlock[l];
            for (int ll = 1; ll < DirectionOfNextBlock1; ll++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int lll = 0; lll < IntList_DataOfNextBlock1.Count; lll++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock1.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock1[lll] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock1[lll] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock1 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock1 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock1.Count - 1];
            IntList_NextBlock.Remove(NextBlock1);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock1);

            int m = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock2 = IntList_NextBlock[m];
            IntList_DataOfNextBlock2 = IntListList_DataOfBlock[IntList_NextBlock[m] - 1];
            IntList_LowerSideLengthOfNextBlock2 = IntListList_SideLengthOfBlock[IntList_NextBlock[m] - 1];
            DirectionOfNextBlock2 = IntList_DirectionOfNextBlock[m];
            for (int mm = 1; mm < DirectionOfNextBlock2; mm++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int mmm = 0; mmm < IntList_DataOfNextBlock2.Count; mmm++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock2.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock2[mmm] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock2[mmm] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock2 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock2 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock2.Count - 1];
            IntList_NextBlock.Remove(NextBlock2);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock2);

            int n = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock3 = IntList_NextBlock[n];
            IntList_DataOfNextBlock3 = IntListList_DataOfBlock[IntList_NextBlock[n] - 1];
            IntList_LowerSideLengthOfNextBlock3 = IntListList_SideLengthOfBlock[IntList_NextBlock[n] - 1];
            DirectionOfNextBlock3 = IntList_DirectionOfNextBlock[n];
            for (int nn = 1; nn < DirectionOfNextBlock3; nn++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int nnn = 0; nnn < IntList_DataOfNextBlock3.Count; nnn++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock3.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock3[nnn] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock3[nnn] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock3 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock3 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock3.Count - 1];
            IntList_NextBlock.Remove(NextBlock3);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock3);

            int o = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock4 = IntList_NextBlock[o];
            IntList_DataOfNextBlock4 = IntListList_DataOfBlock[IntList_NextBlock[o] - 1];
            IntList_LowerSideLengthOfNextBlock4 = IntListList_SideLengthOfBlock[IntList_NextBlock[o] - 1];
            DirectionOfNextBlock4 = IntList_DirectionOfNextBlock[o];
            for (int oo = 1; oo < DirectionOfNextBlock4; oo++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int ooo = 0; ooo < IntList_DataOfNextBlock4.Count; ooo++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock4.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock4[ooo] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock4[ooo] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock4 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock4 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock4.Count - 1];
            IntList_NextBlock.Remove(NextBlock4);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock4);

            int p = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock5 = IntList_NextBlock[p];
            IntList_DataOfNextBlock5 = IntListList_DataOfBlock[IntList_NextBlock[p] - 1];
            IntList_LowerSideLengthOfNextBlock5 = IntListList_SideLengthOfBlock[IntList_NextBlock[p] - 1];
            DirectionOfNextBlock5 = IntList_DirectionOfNextBlock[p];
            for (int pp = 1; pp < DirectionOfNextBlock5; pp++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int ppp = 0; ppp < IntList_DataOfNextBlock5.Count; ppp++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock5.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock5[ppp] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock5[ppp] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock5 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock5 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock5.Count - 1];
            IntList_NextBlock.Remove(NextBlock5);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock5);

            int q = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock6 = IntList_NextBlock[q];
            IntList_DataOfNextBlock6 = IntListList_DataOfBlock[IntList_NextBlock[q] - 1];
            IntList_LowerSideLengthOfNextBlock6 = IntListList_SideLengthOfBlock[IntList_NextBlock[q] - 1];
            DirectionOfNextBlock6 = IntList_DirectionOfNextBlock[q];
            for (int qq = 1; qq < DirectionOfNextBlock6; qq++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int qqq = 0; qqq < IntList_DataOfNextBlock6.Count; qqq++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock6.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock6[qqq] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock6[qqq] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock6 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock6 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock6.Count - 1];
            IntList_NextBlock.Remove(NextBlock6);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock6);

            int r = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock7 = IntList_NextBlock[r];
            IntList_DataOfNextBlock7 = IntListList_DataOfBlock[IntList_NextBlock[r] - 1];
            IntList_LowerSideLengthOfNextBlock7 = IntListList_SideLengthOfBlock[IntList_NextBlock[r] - 1];
            DirectionOfNextBlock7 = IntList_DirectionOfNextBlock[r];
            for (int rr = 1; rr < DirectionOfNextBlock7; rr++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int rrr = 0; rrr < IntList_DataOfNextBlock7.Count; rrr++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock7.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock7[rrr] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock7[rrr] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock7 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock7 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock7.Count - 1];
            IntList_NextBlock.Remove(NextBlock7);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock7);

            int s = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock8 = IntList_NextBlock[s];
            IntList_DataOfNextBlock8 = IntListList_DataOfBlock[IntList_NextBlock[s] - 1];
            IntList_LowerSideLengthOfNextBlock8 = IntListList_SideLengthOfBlock[IntList_NextBlock[s] - 1];
            DirectionOfNextBlock8 = IntList_DirectionOfNextBlock[s];
            for (int ss = 1; ss < DirectionOfNextBlock8; ss++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int sss = 0; sss < IntList_DataOfNextBlock8.Count; sss++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock8.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock8[sss] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock8[sss] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock8 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock8 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock8.Count - 1];
            IntList_NextBlock.Remove(NextBlock8);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock8);

            int t = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
            NextBlock9 = IntList_NextBlock[t];
            IntList_DataOfNextBlock9 = IntListList_DataOfBlock[IntList_NextBlock[t] - 1];
            IntList_LowerSideLengthOfNextBlock9 = IntListList_SideLengthOfBlock[IntList_NextBlock[t] - 1];
            DirectionOfNextBlock9 = IntList_DirectionOfNextBlock[t];
            for (int tt = 1; tt < DirectionOfNextBlock9; tt++)
            {
                IntList_DataOfTemporaryBlock1 = new List<int> { };

                for (int ttt = 0; ttt < IntList_DataOfNextBlock9.Count; ttt++)
                {
                    IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock9.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock9[ttt] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock9[ttt] % 14 + 1 - 1));
                }

                IntList_DataOfNextBlock9 = IntList_DataOfTemporaryBlock1;
            }
            ColorOfNextBlock9 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock9.Count - 1];
            IntList_NextBlock.Remove(NextBlock9);
            IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock9);

            Invoke("FreeFall_CurrentBlock", FloatList_RateOfFreeFall[0]);
            Invoke("Resetting_SinglePlay", 0);
        }
        else
        {

        }
    }


    void Update()
    {
        //ShortCutKey
        if (CanUseShortCutKey == true)
        {
            if (Input.GetKeyUp(KeyCode.Q))
            {
                QU = true;
            }
            else
            {
                QU = false;
            }
            if (Input.GetKeyUp(KeyCode.W))
            {
                WU = true;
            }
            else
            {
                WU = false;
            }
            if (Input.GetKeyUp(KeyCode.E))
            {
                EU = true;
            }
            else
            {
                EU = false;
            }
            if (Input.GetKeyUp(KeyCode.R))
            {
                RU = true;
            }
            else
            {
                RU = false;
            }
            if (Input.GetKeyUp(KeyCode.T))
            {
                TU = true;
            }
            else
            {
                TU = false;
            }
            if (Input.GetKeyUp(KeyCode.Y))
            {
                YU = true;
            }
            else
            {
                YU = false;
            }
            if (Input.GetKeyUp(KeyCode.U))
            {
                UU = true;
            }
            else
            {
                UU = false;
            }
            if (Input.GetKeyUp(KeyCode.I))
            {
                IU = true;
            }
            else
            {
                IU = false;
            }
            if (Input.GetKeyUp(KeyCode.O))
            {
                OU = true;
            }
            else
            {
                OU = false;
            }
            if (Input.GetKeyUp(KeyCode.P))
            {
                PU = true;
            }
            else
            {
                PU = false;
            }
            if (Input.GetKeyUp(KeyCode.A))
            {
                AU = true;
            }
            else
            {
                AU = false;
            }
            if (Input.GetKeyUp(KeyCode.S))
            {
                SU = true;
            }
            else
            {
                SU = false;
            }
            if (Input.GetKeyUp(KeyCode.D))
            {
                DU = true;
            }
            else
            {
                DU = false;
            }
            if (Input.GetKeyUp(KeyCode.F))
            {
                FU = true;
            }
            else
            {
                FU = false;
            }
            if (Input.GetKeyUp(KeyCode.G))
            {
                GU = true;
            }
            else
            {
                GU = false;
            }
            if (Input.GetKeyUp(KeyCode.H))
            {
                HU = true;
            }
            else
            {
                HU = false;
            }
            if (Input.GetKeyUp(KeyCode.J))
            {
                JU = true;
            }
            else
            {
                JU = false;
            }
            if (Input.GetKeyUp(KeyCode.K))
            {
                KU = true;
            }
            else
            {
                KU = false;
            }
            if (Input.GetKeyUp(KeyCode.L))
            {
                LU = true;
            }
            else
            {
                LU = false;
            }
            if (Input.GetKeyUp(KeyCode.Z))
            {
                ZU = true;
            }
            else
            {
                ZU = false;
            }
            if (Input.GetKeyUp(KeyCode.X))
            {
                XU = true;
            }
            else
            {
                XU = false;
            }
            if (Input.GetKeyUp(KeyCode.C))
            {
                CU = true;
            }
            else
            {
                CU = false;
            }
            if (Input.GetKeyUp(KeyCode.V))
            {
                VU = true;
            }
            else
            {
                VU = false;
            }
            if (Input.GetKeyUp(KeyCode.B))
            {
                BU = true;
            }
            else
            {
                BU = false;
            }
            if (Input.GetKeyUp(KeyCode.N))
            {
                NU = true;
            }
            else
            {
                NU = false;
            }
            if (Input.GetKeyUp(KeyCode.M))
            {
                MU = true;
            }
            else
            {
                MU = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha0))
            {
                Alpha0U = true;
            }
            else
            {
                Alpha0U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha1))
            {
                Alpha1U = true;
            }
            else
            {
                Alpha1U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha2))
            {
                Alpha2U = true;
            }
            else
            {
                Alpha2U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha3))
            {
                Alpha3U = true;
            }
            else
            {
                Alpha3U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha4))
            {
                Alpha4U = true;
            }
            else
            {
                Alpha4U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha5))
            {
                Alpha5U = true;
            }
            else
            {
                Alpha5U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha6))
            {
                Alpha6U = true;
            }
            else
            {
                Alpha6U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha7))
            {
                Alpha7U = true;
            }
            else
            {
                Alpha7U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha8))
            {
                Alpha8U = true;
            }
            else
            {
                Alpha8U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha9))
            {
                Alpha9U = true;
            }
            else
            {
                Alpha9U = false;
            }
            if (Input.GetKeyUp(KeyCode.Backspace))
            {
                BackSpaceU = true;
            }
            else
            {
                BackSpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.Space))
            {
                SpaceU = true;
            }
            else
            {
                SpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightShift))
            {
                RightShiftU = true;
            }
            else
            {
                RightShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftShift))
            {
                LeftShiftU = true;
            }
            else
            {
                LeftShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightControl))
            {
                RightCtrlU = true;
            }
            else
            {
                RightCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftControl))
            {
                LeftCtrlU = true;
            }
            else
            {
                LeftCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.Tab))
            {
                TabU = true;
            }
            else
            {
                TabU = false;
            }
            if (Input.GetKeyUp(KeyCode.Escape))
            {
                EscapeU = true;
            }
            else
            {
                EscapeU = false;
            }
            if (Input.GetKeyUp(KeyCode.Return))
            {
                EnterU = true;
            }
            else
            {
                EnterU = false;
            }
            if (Input.GetKeyUp(KeyCode.UpArrow))
            {
                UpArrowU = true;
            }
            else
            {
                UpArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.DownArrow))
            {
                DownArrowU = true;
            }
            else
            {
                DownArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightArrow))
            {
                RightArrowU = true;
            }
            else
            {
                RightArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftArrow))
            {
                LeftArrowU = true;
            }
            else
            {
                LeftArrowU = false;
            }

            if (Input.GetKey(KeyCode.Q))
            {
                Q = true;
            }
            else
            {
                Q = false;
            }
            if (Input.GetKey(KeyCode.W))
            {
                W = true;
            }
            else
            {
                W = false;
            }
            if (Input.GetKey(KeyCode.E))
            {
                E = true;
            }
            else
            {
                E = false;
            }
            if (Input.GetKey(KeyCode.R))
            {
                R = true;
            }
            else
            {
                R = false;
            }
            if (Input.GetKey(KeyCode.T))
            {
                T = true;
            }
            else
            {
                T = false;
            }
            if (Input.GetKey(KeyCode.Y))
            {
                Y = true;
            }
            else
            {
                Y = false;
            }
            if (Input.GetKey(KeyCode.U))
            {
                U = true;
            }
            else
            {
                U = false;
            }
            if (Input.GetKey(KeyCode.I))
            {
                I = true;
            }
            else
            {
                I = false;
            }
            if (Input.GetKey(KeyCode.O))
            {
                O = true;
            }
            else
            {
                O = false;
            }
            if (Input.GetKey(KeyCode.P))
            {
                P = true;
            }
            else
            {
                P = false;
            }
            if (Input.GetKey(KeyCode.A))
            {
                A = true;
            }
            else
            {
                A = false;
            }
            if (Input.GetKey(KeyCode.S))
            {
                S = true;
            }
            else
            {
                S = false;
            }
            if (Input.GetKey(KeyCode.D))
            {
                D = true;
            }
            else
            {
                D = false;
            }
            if (Input.GetKey(KeyCode.F))
            {
                F = true;
            }
            else
            {
                F = false;
            }
            if (Input.GetKey(KeyCode.G))
            {
                G = true;
            }
            else
            {
                G = false;
            }
            if (Input.GetKey(KeyCode.H))
            {
                H = true;
            }
            else
            {
                H = false;
            }
            if (Input.GetKey(KeyCode.J))
            {
                J = true;
            }
            else
            {
                J = false;
            }
            if (Input.GetKey(KeyCode.K))
            {
                K = true;
            }
            else
            {
                K = false;
            }
            if (Input.GetKey(KeyCode.L))
            {
                L = true;
            }
            else
            {
                L = false;
            }
            if (Input.GetKey(KeyCode.Z))
            {
                Z = true;
            }
            else
            {
                Z = false;
            }
            if (Input.GetKey(KeyCode.X))
            {
                X = true;
            }
            else
            {
                X = false;
            }
            if (Input.GetKey(KeyCode.C))
            {
                C = true;
            }
            else
            {
                C = false;
            }
            if (Input.GetKey(KeyCode.V))
            {
                V = true;
            }
            else
            {
                V = false;
            }
            if (Input.GetKey(KeyCode.B))
            {
                B = true;
            }
            else
            {
                B = false;
            }
            if (Input.GetKey(KeyCode.N))
            {
                N = true;
            }
            else
            {
                N = false;
            }
            if (Input.GetKey(KeyCode.M))
            {
                M = true;
            }
            else
            {
                M = false;
            }
            if (Input.GetKey(KeyCode.Alpha0))
            {
                Alpha0 = true;
            }
            else
            {
                Alpha0 = false;
            }
            if (Input.GetKey(KeyCode.Alpha1))
            {
                Alpha1 = true;
            }
            else
            {
                Alpha1 = false;
            }
            if (Input.GetKey(KeyCode.Alpha2))
            {
                Alpha2 = true;
            }
            else
            {
                Alpha2 = false;
            }
            if (Input.GetKey(KeyCode.Alpha3))
            {
                Alpha3 = true;
            }
            else
            {
                Alpha3 = false;
            }
            if (Input.GetKey(KeyCode.Alpha4))
            {
                Alpha4 = true;
            }
            else
            {
                Alpha4 = false;
            }
            if (Input.GetKey(KeyCode.Alpha5))
            {
                Alpha5 = true;
            }
            else
            {
                Alpha5 = false;
            }
            if (Input.GetKey(KeyCode.Alpha6))
            {
                Alpha6 = true;
            }
            else
            {
                Alpha6 = false;
            }
            if (Input.GetKey(KeyCode.Alpha7))
            {
                Alpha7 = true;
            }
            else
            {
                Alpha7 = false;
            }
            if (Input.GetKey(KeyCode.Alpha8))
            {
                Alpha8 = true;
            }
            else
            {
                Alpha8 = false;
            }
            if (Input.GetKey(KeyCode.Alpha9))
            {
                Alpha9 = true;
            }
            else
            {
                Alpha9 = false;
            }
            if (Input.GetKey(KeyCode.Backspace))
            {
                BackSpace = true;
            }
            else
            {
                BackSpace = false;
            }
            if (Input.GetKey(KeyCode.Space))
            {
                Space = true;
            }
            else
            {
                Space = false;
            }
            if (Input.GetKey(KeyCode.RightShift))
            {
                RightShift = true;
            }
            else
            {
                RightShift = false;
            }
            if (Input.GetKey(KeyCode.LeftShift))
            {
                LeftShift = true;
            }
            else
            {
                LeftShift = false;
            }
            if (Input.GetKey(KeyCode.RightControl))
            {
                RightCtrl = true;
            }
            else
            {
                RightCtrl = false;
            }
            if (Input.GetKey(KeyCode.LeftControl))
            {
                LeftCtrl = true;
            }
            else
            {
                LeftCtrl = false;
            }
            if (Input.GetKey(KeyCode.Tab))
            {
                Tab = true;
            }
            else
            {
                Tab = false;
            }
            if (Input.GetKey(KeyCode.Escape))
            {
                Escape = true;
            }
            else
            {
                Escape = false;
            }
            if (Input.GetKey(KeyCode.Return))
            {
                Enter = true;
            }
            else
            {
                Enter = false;
            }
            if (Input.GetKey(KeyCode.UpArrow))
            {
                UpArrow = true;
            }
            else
            {
                UpArrow = false;
            }
            if (Input.GetKey(KeyCode.DownArrow))
            {
                DownArrow = true;
            }
            else
            {
                DownArrow = false;
            }
            if (Input.GetKey(KeyCode.RightArrow))
            {
                RightArrow = true;
            }
            else
            {
                RightArrow = false;
            }
            if (Input.GetKey(KeyCode.LeftArrow))
            {
                LeftArrow = true;
            }
            else
            {
                LeftArrow = false;
            }

            if (Input.GetKeyDown(KeyCode.Q))
            {
                QD = true;
            }
            else
            {
                QD = false;
            }
            if (Input.GetKeyDown(KeyCode.W))
            {
                WD = true;
            }
            else
            {
                WD = false;
            }
            if (Input.GetKeyDown(KeyCode.E))
            {
                ED = true;
            }
            else
            {
                ED = false;
            }
            if (Input.GetKeyDown(KeyCode.R))
            {
                RD = true;
            }
            else
            {
                RD = false;
            }
            if (Input.GetKeyDown(KeyCode.T))
            {
                TD = true;
            }
            else
            {
                TD = false;
            }
            if (Input.GetKeyDown(KeyCode.Y))
            {
                YD = true;
            }
            else
            {
                YD = false;
            }
            if (Input.GetKeyDown(KeyCode.U))
            {
                UD = true;
            }
            else
            {
                UD = false;
            }
            if (Input.GetKeyDown(KeyCode.I))
            {
                ID = true;
            }
            else
            {
                ID = false;
            }
            if (Input.GetKeyDown(KeyCode.O))
            {
                OD = true;
            }
            else
            {
                OD = false;
            }
            if (Input.GetKeyDown(KeyCode.P))
            {
                PD = true;
            }
            else
            {
                PD = false;
            }
            if (Input.GetKeyDown(KeyCode.A))
            {
                AD = true;
            }
            else
            {
                AD = false;
            }
            if (Input.GetKeyDown(KeyCode.S))
            {
                SD = true;
            }
            else
            {
                SD = false;
            }
            if (Input.GetKeyDown(KeyCode.D))
            {
                DD = true;
            }
            else
            {
                DD = false;
            }
            if (Input.GetKeyDown(KeyCode.F))
            {
                FD = true;
            }
            else
            {
                FD = false;
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                GD = true;
            }
            else
            {
                GD = false;
            }
            if (Input.GetKeyDown(KeyCode.H))
            {
                HD = true;
            }
            else
            {
                HD = false;
            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                JD = true;
            }
            else
            {
                JD = false;
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                KD = true;
            }
            else
            {
                KD = false;
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                LD = true;
            }
            else
            {
                LD = false;
            }
            if (Input.GetKeyDown(KeyCode.Z))
            {
                ZD = true;
            }
            else
            {
                ZD = false;
            }
            if (Input.GetKeyDown(KeyCode.X))
            {
                XD = true;
            }
            else
            {
                XD = false;
            }
            if (Input.GetKeyDown(KeyCode.C))
            {
                CD = true;
            }
            else
            {
                CD = false;
            }
            if (Input.GetKeyDown(KeyCode.V))
            {
                VD = true;
            }
            else
            {
                VD = false;
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                BD = true;
            }
            else
            {
                BD = false;
            }
            if (Input.GetKeyDown(KeyCode.N))
            {
                ND = true;
            }
            else
            {
                ND = false;
            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                MD = true;
            }
            else
            {
                MD = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha0))
            {
                Alpha0D = true;
            }
            else
            {
                Alpha0D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha1))
            {
                Alpha1D = true;
            }
            else
            {
                Alpha1D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha2))
            {
                Alpha2D = true;
            }
            else
            {
                Alpha2D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha3))
            {
                Alpha3D = true;
            }
            else
            {
                Alpha3D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha4))
            {
                Alpha4D = true;
            }
            else
            {
                Alpha4D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha5))
            {
                Alpha5D = true;
            }
            else
            {
                Alpha5D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha6))
            {
                Alpha6D = true;
            }
            else
            {
                Alpha6D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha7))
            {
                Alpha7D = true;
            }
            else
            {
                Alpha7D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha8))
            {
                Alpha8D = true;
            }
            else
            {
                Alpha8D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha9))
            {
                Alpha9D = true;
            }
            else
            {
                Alpha9D = false;
            }
            if (Input.GetKeyDown(KeyCode.Backspace))
            {
                BackSpaceD = true;
            }
            else
            {
                BackSpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.Space))
            {
                SpaceD = true;
            }
            else
            {
                SpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightShift))
            {
                RightShiftD = true;
            }
            else
            {
                RightShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftShift))
            {
                LeftShiftD = true;
            }
            else
            {
                LeftShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightControl))
            {
                RightCtrlD = true;
            }
            else
            {
                RightCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftControl))
            {
                LeftCtrlD = true;
            }
            else
            {
                LeftCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.Tab))
            {
                TabD = true;
            }
            else
            {
                TabD = false;
            }
            if (Input.GetKeyDown(KeyCode.Escape))
            {
                EscapeD = true;
            }
            else
            {
                EscapeD = false;
            }
            if (Input.GetKeyDown(KeyCode.Return))
            {
                EnterD = true;
            }
            else
            {
                EnterD = false;
            }
            if (Input.GetKeyDown(KeyCode.UpArrow))
            {
                UpArrowD = true;
            }
            else
            {
                UpArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.DownArrow))
            {
                DownArrowD = true;
            }
            else
            {
                DownArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightArrow))
            {
                RightArrowD = true;
            }
            else
            {
                RightArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftArrow))
            {
                LeftArrowD = true;
            }
            else
            {
                LeftArrowD = false;
            }
        }

        //CurrentBlockのRateOfFreeFall
        if (Mathf.FloorToInt(ScoreSinglePlay / 10000) <= 19)
        {
            RateOfFreeFall = FloatList_RateOfFreeFall[Mathf.FloorToInt(ScoreSinglePlay / 10000)];
        }
        else
        {
            RateOfFreeFall = FloatList_RateOfFreeFall[20];
        }

        //CurrentBlockの操作
        if (true)
        {
            //CurrentBlockの下移動
            if (SD & !D & !A & !E & !Q)
            {
                Invoke("IntermittentDownMovement_CurrentBlock", 0);
            }
            //CurrentBlockの右移動
            if (D & !S & !A & !E & !Q)
            {
                if (CanInvokeIntermittentRightMovement_CurrentBlock == true)
                {
                    CanInvokeIntermittentRightMovement_CurrentBlock = false;

                    Invoke("IntermittentRightMovement_CurrentBlock", 0);
                    Invoke("ContinuousRightMovement_CurrentBlock", 0.25f);
                }
            }
            if (DU)
            {
                CanInvokeIntermittentRightMovement_CurrentBlock = true;

                CancelInvoke("ContinuousRightMovement_CurrentBlock");
            }
            //CurrentBlockの左移動
            if (A & !S & !D & !E & !Q)
            {
                if (CanInvokeIntermittentLeftMovement_CurrentBlock == true)
                {
                    CanInvokeIntermittentLeftMovement_CurrentBlock = false;

                    Invoke("IntermittentLeftMovement_CurrentBlock", 0);
                    Invoke("ContinuousLeftMovement_CurrentBlock", 0.25f);
                }
            }
            if (AU)
            {
                CanInvokeIntermittentLeftMovement_CurrentBlock = true;

                CancelInvoke("ContinuousLeftMovement_CurrentBlock");
            }
            //CurrentBlockの右回転
            if (ED & !S & !D & !A & !Q)
            {
                Invoke("RightRoll_CurrentBlock", 0);
            }
            //CurrentBlockの左回転
            if (QD & !S & !D & !A & !E)
            {
                Invoke("LeftRoll_CurrentBlock", 0);
            }

            //CurrentBlockのホールド
            if (WD & !S & !D & !A & !E & !Q)
            {
                Invoke("Holding_CurrentBlock", 0);
            }
        }

        //FrameModeの切り替え
        if (FD)
        {
            if(FrameMode == true)
            {
                FrameMode = false;

                Invoke("Switching_Frame", 0);
            }
            else
            {
                FrameMode = true;

                Invoke("Switching_Frame", 0);
            }
        }

        //GhostModeの切り替え
        if (GD)
        {
            if (GhostMode == true)
            {
                GhostMode = false;

                Invoke("Switching_GhostBlock", 0);
            }
            else
            {
                GhostMode = true;

                Invoke("Switching_GhostBlock", 0);
            }
        }









        if (Alpha1D)
        {
            Invoke("Painting_CubeS", 0);
        }
        if (Alpha2D)
        {
            Debug.Log(ScoreSinglePlay);
        }
        if (Alpha3D)
        {
            Debug.Log(Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, 3))) / (Mathf.Pow(10, 3 - 1))));
        }
        if (Alpha4D)
        {
            for (int i = 0; i < GameObjectList_CubeH.Count; i++)
            {
                GameObjectList_CubeS[i].SetActive(false);
            }
        }
        if (Alpha5D)
        {
            Debug.Log(Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, 4))) / (Mathf.Pow(10, 4 - 1))) + " : " + Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, 3))) / (Mathf.Pow(10, 3 - 1))) + " : " + Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, 2))) / (Mathf.Pow(10, 2 - 1))) + " : " + Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, 1))) / (Mathf.Pow(10, 1 - 1))));
        }
    }


    private void FixedUpdate()
    {
        //MainCameraの操作
        if (UpArrow)
        {
            if (CameraAngleX >= -20)
            {
                CameraAngleX += -0.3f;
            }
        }
        if (DownArrow)
        {
            if (CameraAngleX <= 20)
            {
                CameraAngleX += 0.3f;
            }
        }
        if (RightArrow)
        {
            if (CameraAngleY <= 20)
            {
                CameraAngleY += 0.3f;
            }
        }
        if (LeftArrow)
        {
            if (CameraAngleY >= -20)
            {
                CameraAngleY += -0.3f;
            }
        }
        if (RD)
        {
            CameraAngleX = 0;
            CameraAngleY = 0;
        }
        MainCamera.transform.eulerAngles = new Vector3(CameraAngleX, CameraAngleY, 0);
    }


    //SinglePlayのリセット
    void Resetting_SinglePlay()
    {
        AudioSource_AudioSource_2.Play();

        if (IntList_NextBlock.Count == 0)
        {
            if (IntList_NextBlock1.Count == 0)
            {
                IntList_NextBlock1 = new List<int>(IntList_Block1);
            }
            if (IntList_NextBlock2.Count == 0)
            {
                IntList_NextBlock2 = new List<int>(IntList_Block2);
            }
            if (IntList_NextBlock3.Count == 0)
            {
                IntList_NextBlock3 = new List<int>(IntList_Block3);
            }
            if (IntList_NextBlock4.Count == 0)
            {
                IntList_NextBlock4 = new List<int>(IntList_Block4);
            }
            if (IntList_NextBlock5.Count == 0)
            {
                IntList_NextBlock5 = new List<int>(IntList_Block5);
            }
            if (IntList_NextBlock6.Count == 0)
            {
                IntList_NextBlock6 = new List<int>(IntList_Block6);
            }
            if (IntList_NextBlock7.Count == 0)
            {
                IntList_NextBlock7 = new List<int>(IntList_Block7);
            }
            if (IntList_NextBlock8.Count == 0)
            {
                IntList_NextBlock8 = new List<int>(IntList_Block8);
            }
            if (IntList_NextBlock9.Count == 0)
            {
                IntList_NextBlock9 = new List<int>(IntList_Block9);
            }
            if (IntListList_ColorOfNextBlock.Count == 0)
            {
                IntListList_ColorOfNextBlock = new List<List<int>>(IntListList_ColorOfBlock);
            }

            int a = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock1.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock1[a]);
            IntList_NextBlock1.Remove(IntList_NextBlock1[a]);
            int b = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock2.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock2[b]);
            IntList_NextBlock2.Remove(IntList_NextBlock2[b]);
            int c = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock3.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock3[c]);
            IntList_NextBlock3.Remove(IntList_NextBlock3[c]);
            int d = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock4.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock4[d]);
            IntList_NextBlock4.Remove(IntList_NextBlock4[d]);
            int e = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock5.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock5[e]);
            IntList_NextBlock5.Remove(IntList_NextBlock5[e]);
            int f = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock6.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock6[f]);
            IntList_NextBlock6.Remove(IntList_NextBlock6[f]);
            int g = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock7.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock7[g]);
            IntList_NextBlock7.Remove(IntList_NextBlock7[g]);
            int h = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock8.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock8[h]);
            IntList_NextBlock8.Remove(IntList_NextBlock8[h]);
            int i = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock9.Count + 1)) - 1;
            IntList_NextBlock.Add(IntList_NextBlock9[i]);
            IntList_NextBlock9.Remove(IntList_NextBlock9[i]);
            int j = Mathf.FloorToInt(Random.Range(1, IntListList_ColorOfNextBlock.Count + 1)) - 1;
            IntList_ColorOfNextBlock = IntListList_ColorOfNextBlock[j];
            IntListList_ColorOfNextBlock.Remove(IntListList_ColorOfNextBlock[j]);
            for (int k = 0; k < 9; k++)
            {
                IntList_DirectionOfNextBlock.Add(Mathf.FloorToInt(Random.Range(1, IntList_Direction.Count + 1)));
            }
        }

        CurrentBlock = NextBlock1;
        IntList_DataOfCurrentBlock = IntList_DataOfNextBlock1;
        IntList_LowerSideLengthOfCurrentBlock = IntList_LowerSideLengthOfNextBlock1;
        DirectionOfCurrentBlock = DirectionOfNextBlock1;
        ColorOfCurrentBlock = ColorOfNextBlock1;

        NextBlock1 = NextBlock2;
        IntList_DataOfNextBlock1 = IntList_DataOfNextBlock2;
        IntList_LowerSideLengthOfNextBlock1 = IntList_LowerSideLengthOfNextBlock2;
        DirectionOfNextBlock1 = DirectionOfNextBlock2;
        ColorOfNextBlock1 = ColorOfNextBlock2;

        NextBlock2 = NextBlock3;
        IntList_DataOfNextBlock2 = IntList_DataOfNextBlock3;
        IntList_LowerSideLengthOfNextBlock2 = IntList_LowerSideLengthOfNextBlock3;
        DirectionOfNextBlock2 = DirectionOfNextBlock3;
        ColorOfNextBlock2 = ColorOfNextBlock3;

        NextBlock3 = NextBlock4;
        IntList_DataOfNextBlock3 = IntList_DataOfNextBlock4;
        IntList_LowerSideLengthOfNextBlock3 = IntList_LowerSideLengthOfNextBlock4;
        DirectionOfNextBlock3 = DirectionOfNextBlock4;
        ColorOfNextBlock3 = ColorOfNextBlock4;

        NextBlock4 = NextBlock5;
        IntList_DataOfNextBlock4 = IntList_DataOfNextBlock5;
        IntList_LowerSideLengthOfNextBlock4 = IntList_LowerSideLengthOfNextBlock5;
        DirectionOfNextBlock4 = DirectionOfNextBlock5;
        ColorOfNextBlock4 = ColorOfNextBlock5;

        NextBlock5 = NextBlock6;
        IntList_DataOfNextBlock5 = IntList_DataOfNextBlock6;
        IntList_LowerSideLengthOfNextBlock5 = IntList_LowerSideLengthOfNextBlock6;
        DirectionOfNextBlock5 = DirectionOfNextBlock6;
        ColorOfNextBlock5 = ColorOfNextBlock6;

        NextBlock6 = NextBlock7;
        IntList_DataOfNextBlock6 = IntList_DataOfNextBlock7;
        IntList_LowerSideLengthOfNextBlock6 = IntList_LowerSideLengthOfNextBlock7;
        DirectionOfNextBlock6 = DirectionOfNextBlock7;
        ColorOfNextBlock6 = ColorOfNextBlock7;

        NextBlock7 = NextBlock8;
        IntList_DataOfNextBlock7 = IntList_DataOfNextBlock8;
        IntList_LowerSideLengthOfNextBlock7 = IntList_LowerSideLengthOfNextBlock8;
        DirectionOfNextBlock7 = DirectionOfNextBlock8;
        ColorOfNextBlock7 = ColorOfNextBlock8;

        NextBlock8 = NextBlock9;
        IntList_DataOfNextBlock8 = IntList_DataOfNextBlock9;
        IntList_LowerSideLengthOfNextBlock8 = IntList_LowerSideLengthOfNextBlock9;
        DirectionOfNextBlock8 = DirectionOfNextBlock9;
        ColorOfNextBlock8 = ColorOfNextBlock9;

        int l = Mathf.FloorToInt(Random.Range(1, IntList_NextBlock.Count + 1)) - 1;
        NextBlock9 = IntList_NextBlock[l];
        IntList_DataOfNextBlock9 = IntListList_DataOfBlock[IntList_NextBlock[l] - 1];
        IntList_LowerSideLengthOfNextBlock9 = IntListList_SideLengthOfBlock[IntList_NextBlock[l] - 1];
        DirectionOfNextBlock9 = IntList_DirectionOfNextBlock[l];
        for (int ii = 1; ii < DirectionOfNextBlock9; ii++)
        {
            IntList_DataOfTemporaryBlock1 = new List<int> { };

            for (int iii = 0; iii < IntList_DataOfNextBlock9.Count; iii++)
            {
                IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfNextBlock9.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfNextBlock9[iii] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfNextBlock9[iii] % 14 + 1 - 1));
            }

            IntList_DataOfNextBlock9 = IntList_DataOfTemporaryBlock1;
        }
        ColorOfNextBlock9 = IntList_ColorOfNextBlock[IntList_DataOfNextBlock9.Count - 1];
        IntList_NextBlock.Remove(NextBlock9);
        IntList_DirectionOfNextBlock.Remove(DirectionOfNextBlock9);

        CoordinateOfCurrentBlock = IntListList_StartCoordinateOfBlock[IntList_LowerSideLengthOfCurrentBlock.Max() - 1][Mathf.FloorToInt(Random.Range(1, IntListList_StartCoordinateOfBlock[IntList_LowerSideLengthOfCurrentBlock.Max() - 1].Count + 1)) - 1];

        for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
        {
            IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
            IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
        }

        CanInvokeDisassembly_CurrentBlock = true;
        CanPlayFallingSound = true;

        NumberOfCombos = 0;
        if (NumberOfRens >= 1)
        {
            CountOfContinuousSummonedCurrentBlock += 1;

            if (CountOfContinuousSummonedCurrentBlock == 2)
            {
                NumberOfRens = 0;
            }
        }
        ScoreSinglePlay += 30;

        Invoke("Switching_GhostBlock", 0);
        Invoke("Painting_CubeG", 0);
        Invoke("Painting_CubeN", 0);
        Invoke("Painting_CubeS", 0);
    }


    //CurrentBlockの自由落下
    void FreeFall_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            int a = 0;
            for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
            {
                if (CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] >= 44)
                {
                    if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] - 14] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] - 14] == 1)
                    {
                        a += 1;
                    }
                }
            }

            if (IntList_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの下移動が可能な時
                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;
                CanPlayFallingSound = true;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 14;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Painting_CubeG", 0);
            }
            else
            {
                //CurrentBlockの下移動が不可能な時
                if (CanPlayFallingSound == true)
                {
                    CanPlayFallingSound = false;

                    AudioSource_AudioSource_7.Play();
                }

                if (CanInvokeDisassembly_CurrentBlock == true)
                {
                    CanInvokeDisassembly_CurrentBlock = false;

                    Invoke("Disassembly_CurrentBlock", 0.5f);
                }
            }
            a = 0;
        }

        Invoke("FreeFall_CurrentBlock", RateOfFreeFall);
    }
    //CurrentBlockの下移動(S)
    void IntermittentDownMovement_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            CanPlayFallingSound = false;

            int a = 0;
            int b = 0;
            int c = 0;
            while (true)
            {
                a = 0;
                b += 1;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    if (CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] >= 44)
                    {
                        if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] - (14 * b)] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i] - (14 * b)] == 1)
                        {
                            a += 1;
                        }
                    }
                }

                if (IntList_DataOfCurrentBlock.Count == a)
                {
                    c += 1;
                }
                else
                {
                    break;
                }
            }

            if(c >= 1)
            {
                //CurrentBlockの下移動が可能な時
                AudioSource_AudioSource_7.Play();

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 14 * c;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Painting_CubeG", 0);
            }
            else
            {
                //CurrentBlockの下移動が不可能な時
                if (CanInvokeDisassembly_CurrentBlock == true)
                {
                    CanInvokeDisassembly_CurrentBlock = false;

                    Invoke("Disassembly_CurrentBlock", 0);
                }
            }
        }
    }
    //CurrentBlockの右移動(S)
    void IntermittentRightMovement_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            IntList_DataOfTemporaryBlock1 = new List<int> { };

            for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
            {
                IntList_DataOfTemporaryBlock1.Add(IntList_DataOfCurrentBlock[i] + 1);
            }

            int a = 0;
            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
            {
                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
            }

            if (IntList_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの右移動が可能な時
                AudioSource_AudioSource_3.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock += 1;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Switching_GhostBlock", 0);
            }
            a = 0;
        }
    }
    //CurrentBlockの右移動(F)
    void ContinuousRightMovement_CurrentBlock()
    {
        if (D & !S & !A & !E & !Q)
        {
            Invoke("ContinuousRightMovement_CurrentBlock", 0.05f);
            Invoke("IntermittentRightMovement_CurrentBlock", 0);
        }
    }
    //CurrentBlockの左移動(S)
    void IntermittentLeftMovement_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            IntList_DataOfTemporaryBlock1 = new List<int> { };

            for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
            {
                IntList_DataOfTemporaryBlock1.Add(IntList_DataOfCurrentBlock[i] - 1);
            }

            int a = 0;
            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
            {
                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
            }

            if (IntList_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの左移動が可能な時
                AudioSource_AudioSource_4.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                CoordinateOfCurrentBlock -= 1;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Switching_GhostBlock", 0);
            }
            a = 0;
        }
    }
    //CurrentBlockの左移動(F)
    void ContinuousLeftMovement_CurrentBlock()
    {
        if (A & !S & !D & !E & !Q)
        {
            Invoke("ContinuousLeftMovement_CurrentBlock", 0.05f);
            Invoke("IntermittentLeftMovement_CurrentBlock", 0);
        }
    }
    //CurrentBlockの右回転
    void RightRoll_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            IntList_DataOfTemporaryBlock1 = new List<int> { };
            IntList_OverlapCubeG = new List<int> { };

            for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
            {
                IntList_DataOfTemporaryBlock1.Add((IntList_LowerSideLengthOfCurrentBlock.Max() - 1) * 14 + (Mathf.FloorToInt(IntList_DataOfCurrentBlock[i] / 14) + 1 - 1) - 1 * 14 * (IntList_DataOfCurrentBlock[i] % 14 + 1 - 1));
            }

            int a = 0;
            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
            {
                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
                else if (IntList_LowerSideLengthOfCurrentBlock.Max() != IntList_LowerSideLengthOfCurrentBlock.Min())
                {
                    IntList_OverlapCubeG.Add(IntList_DataOfTemporaryBlock1[i]);
                }
            }

            if (IntList_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの右回転が可能な時
                AudioSource_AudioSource_5.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                if (DirectionOfCurrentBlock < 4)
                {
                    DirectionOfCurrentBlock += 1;
                }
                else
                {
                    DirectionOfCurrentBlock = 1;
                }

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Switching_GhostBlock", 0);
            }
            else if (IntList_LowerSideLengthOfCurrentBlock.Max() != IntList_LowerSideLengthOfCurrentBlock.Min())
            {
                //CurrentBlockの右回転が不可能な時
                switch (IntList_LowerSideLengthOfCurrentBlock.Max())
                {
                    case 2:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(14) == true |
                            IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(0) == true |
                            IntList_OverlapCubeG.Contains(15) == true & IntList_DataOfTemporaryBlock1.Contains(14) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(1) == true |
                            IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                    case 3:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(14) == false & IntList_DataOfTemporaryBlock1.Contains(28) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(14) == false & IntList_DataOfTemporaryBlock1.Contains(28) == false |
                            IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(2) == false & IntList_DataOfTemporaryBlock1.Contains(16) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(2) == false & IntList_DataOfTemporaryBlock1.Contains(16) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(16) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(30) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(16) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                    case 4:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_OverlapCubeG.Contains(15) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_OverlapCubeG.Contains(16) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(17) == true & IntList_OverlapCubeG.Contains(16) == false |
                            IntList_OverlapCubeG.Contains(31) == true & IntList_OverlapCubeG.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_OverlapCubeG.Contains(15) == false |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_OverlapCubeG.Contains(29) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //上+2
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_OverlapCubeG.Contains(15) == true |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_OverlapCubeG.Contains(16) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 28);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 28;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+2
                        if (IntList_OverlapCubeG.Contains(17) == true & IntList_OverlapCubeG.Contains(16) == true |
                            IntList_OverlapCubeG.Contains(31) == true & IntList_OverlapCubeG.Contains(30) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 2);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 2;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+2
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_OverlapCubeG.Contains(15) == true |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_OverlapCubeG.Contains(29) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 2);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの右回転が可能な時
                                AudioSource_AudioSource_5.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 2;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                }
            }
            a = 0;
        }
    }
    //CurrentBlockの左回転
    void LeftRoll_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            IntList_DataOfTemporaryBlock1 = new List<int> { };
            IntList_OverlapCubeG = new List<int> { };

            for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
            {
                IntList_DataOfTemporaryBlock1.Add((IntList_DataOfCurrentBlock[i] % 14 + 1 - 1) * 14 + (IntList_LowerSideLengthOfCurrentBlock.Max() - (Mathf.FloorToInt(IntList_DataOfCurrentBlock[i] / 14) + 1)));
            }

            int a = 0;
            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
            {
                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock1[i]] == 1)
                {
                    a += 1;
                }
                else if (IntList_LowerSideLengthOfCurrentBlock.Max() != IntList_LowerSideLengthOfCurrentBlock.Min())
                {
                    IntList_OverlapCubeG.Add(IntList_DataOfTemporaryBlock1[i]);
                }
            }

            if (IntList_DataOfCurrentBlock.Count == a)
            {
                //CurrentBlockの左回転が可能な時
                AudioSource_AudioSource_6.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                if (DirectionOfCurrentBlock > 1)
                {
                    DirectionOfCurrentBlock -= 1;
                }
                else
                {
                    DirectionOfCurrentBlock = 4;
                }

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                }

                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;

                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                {
                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                }

                Invoke("Switching_GhostBlock", 0);
            }
            else if (IntList_LowerSideLengthOfCurrentBlock.Max() != IntList_LowerSideLengthOfCurrentBlock.Min())
            {
                //CurrentBlockの左回転が不可能な時
                switch (IntList_LowerSideLengthOfCurrentBlock.Max())
                {
                    case 2:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(14) == true |
                            IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(0) == true |
                            IntList_OverlapCubeG.Contains(15) == true & IntList_DataOfTemporaryBlock1.Contains(14) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(1) == true |
                            IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(15) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                    case 3:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(14) == false & IntList_DataOfTemporaryBlock1.Contains(28) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(14) == false & IntList_DataOfTemporaryBlock1.Contains(28) == false |
                            IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(2) == false & IntList_DataOfTemporaryBlock1.Contains(16) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(1) == true & IntList_DataOfTemporaryBlock1.Contains(2) == false & IntList_DataOfTemporaryBlock1.Contains(16) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(16) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(30) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(16) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_DataOfTemporaryBlock1.Contains(0) == false & IntList_DataOfTemporaryBlock1.Contains(1) == false & IntList_DataOfTemporaryBlock1.Contains(2) == false |
                            IntList_OverlapCubeG.Contains(14) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false |
                            IntList_OverlapCubeG.Contains(0) == true & IntList_DataOfTemporaryBlock1.Contains(28) == false & IntList_DataOfTemporaryBlock1.Contains(29) == false & IntList_DataOfTemporaryBlock1.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                    case 4:
                        //上+1
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_OverlapCubeG.Contains(15) == false |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_OverlapCubeG.Contains(16) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 14);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 14;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+1
                        if (IntList_OverlapCubeG.Contains(17) == true & IntList_OverlapCubeG.Contains(16) == false |
                            IntList_OverlapCubeG.Contains(31) == true & IntList_OverlapCubeG.Contains(30) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+1
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_OverlapCubeG.Contains(15) == false |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_OverlapCubeG.Contains(29) == false)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 1);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 1;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //上+2
                        if (IntList_OverlapCubeG.Contains(1) == true & IntList_OverlapCubeG.Contains(15) == true |
                            IntList_OverlapCubeG.Contains(2) == true & IntList_OverlapCubeG.Contains(16) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 28);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 28;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //左+2
                        if (IntList_OverlapCubeG.Contains(17) == true & IntList_OverlapCubeG.Contains(16) == true |
                            IntList_OverlapCubeG.Contains(31) == true & IntList_OverlapCubeG.Contains(30) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] - 2);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock -= 2;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        //右+2
                        if (IntList_OverlapCubeG.Contains(14) == true & IntList_OverlapCubeG.Contains(15) == true |
                            IntList_OverlapCubeG.Contains(28) == true & IntList_OverlapCubeG.Contains(29) == true)
                        {
                            IntList_DataOfTemporaryBlock2 = new List<int> { };
                            a = 0;

                            for (int i = 0; i < IntList_DataOfTemporaryBlock1.Count; i++)
                            {
                                IntList_DataOfTemporaryBlock2.Add(IntList_DataOfTemporaryBlock1[i] + 2);
                            }

                            for (int i = 0; i < IntList_DataOfTemporaryBlock2.Count; i++)
                            {
                                if (IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 0 | IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfTemporaryBlock2[i]] == 1)
                                {
                                    a += 1;
                                }
                            }

                            if (IntList_DataOfTemporaryBlock1.Count == a)
                            {
                                //CurrentBlockの左回転が可能な時
                                AudioSource_AudioSource_6.Play();

                                CancelInvoke("Disassembly_CurrentBlock");
                                CanInvokeDisassembly_CurrentBlock = true;

                                if (DirectionOfCurrentBlock < 4)
                                {
                                    DirectionOfCurrentBlock += 1;
                                }
                                else
                                {
                                    DirectionOfCurrentBlock = 1;
                                }

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 0;
                                }

                                IntList_DataOfCurrentBlock = IntList_DataOfTemporaryBlock1;
                                CoordinateOfCurrentBlock += 2;

                                for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                                {
                                    IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                                    IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                                }

                                Invoke("Switching_GhostBlock", 0);
                            }
                        }
                        break;
                }
            }
            a = 0;
        }
    }
    //CurrentBlockのホールド
    void Holding_CurrentBlock()
    {
        if (CanHoldCurrentBlock == true)
        {
            if (IntList_TypeOfCubeG.Contains(1) == true)
            {
                AudioSource_AudioSource_10.Play();

                CancelInvoke("Disassembly_CurrentBlock");
                CanInvokeDisassembly_CurrentBlock = true;

                if (IntList_DataOfHoldBlock.Count == 0)
                {
                    IntList_DataOfHoldBlock = IntList_DataOfCurrentBlock;
                    IntList_LowerSideLengthOfHoldBlock = IntList_LowerSideLengthOfCurrentBlock;
                    HoldBlock = CurrentBlock;
                    DirectionOfHoldBlock = DirectionOfCurrentBlock;
                    ColorOfHoldBlock = ColorOfCurrentBlock;

                    for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
                    {
                        if (IntList_TypeOfCubeG[i] == 1)
                        {
                            IntList_TypeOfCubeG[i] = 0;
                            IntList_ColorOfCubeG[i] = 0;
                        }
                    }

                    Invoke("Resetting_SinglePlay", 0.25f);
                    Invoke("Painting_CubeG", 0);
                    Invoke("Painting_CubeH", 0);
                }
                else
                {
                    CanHoldCurrentBlock = false;

                    IntList_DataOfTemporaryBlock1 = IntList_DataOfCurrentBlock;
                    IntList_LowerSideLengthOfTemporaryBlock1 = IntList_LowerSideLengthOfCurrentBlock;
                    TemporaryBlock1 = CurrentBlock;
                    DirectionOfTemporaryBlock1 = DirectionOfCurrentBlock;
                    ColorOfTemporaryBlock1 = ColorOfCurrentBlock;

                    IntList_DataOfCurrentBlock = IntList_DataOfHoldBlock;
                    IntList_LowerSideLengthOfCurrentBlock = IntList_LowerSideLengthOfHoldBlock;
                    CurrentBlock = HoldBlock;
                    DirectionOfCurrentBlock = DirectionOfHoldBlock;
                    ColorOfCurrentBlock = ColorOfHoldBlock;

                    IntList_DataOfHoldBlock = IntList_DataOfTemporaryBlock1;
                    IntList_LowerSideLengthOfHoldBlock = IntList_LowerSideLengthOfTemporaryBlock1;
                    HoldBlock = TemporaryBlock1;
                    DirectionOfHoldBlock = DirectionOfTemporaryBlock1;
                    ColorOfHoldBlock = ColorOfTemporaryBlock1;

                    CoordinateOfCurrentBlock = IntListList_StartCoordinateOfBlock[IntList_LowerSideLengthOfCurrentBlock.Max() - 1][Mathf.FloorToInt(Random.Range(1, IntListList_StartCoordinateOfBlock[IntList_LowerSideLengthOfCurrentBlock.Max() - 1].Count + 1)) - 1];

                    for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
                    {
                        if (IntList_TypeOfCubeG[i] == 1)
                        {
                            IntList_TypeOfCubeG[i] = 0;
                            IntList_ColorOfCubeG[i] = 0;
                        }
                    }

                    for (int i = 0; i < IntList_DataOfCurrentBlock.Count; i++)
                    {
                        IntList_ColorOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = ColorOfCurrentBlock;
                        IntList_TypeOfCubeG[CoordinateOfCurrentBlock + IntList_DataOfCurrentBlock[i]] = 1;
                    }

                    Invoke("Painting_CubeG", 0);
                    Invoke("Painting_CubeH", 0);
                }

                Invoke("Switching_GhostBlock", 0);
            }
        }
    }


    //CurrentBlockの分解
    void Disassembly_CurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(1) == true)
        {
            for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
            {
                if (IntList_TypeOfCubeG[i] == 1)
                {
                    IntList_TypeOfCubeG[i] = 2;
                }
            }
        }

        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (IntList_TypeOfCubeG[i] == 2)
            {
                if (i >= 44)
                {
                    //PartOfCurrentBlockが最下行ではない時
                    if (IntList_TypeOfCubeG[i - 14] == 0)
                    {
                        //PartOfCurrentBlockの下の座標に何もなかった時
                        IntList_ColorOfCubeG[i - 14] = ColorOfCurrentBlock;
                        IntList_ColorOfCubeG[i] = 0;

                        IntList_TypeOfCubeG[i - 14] = 2;
                        IntList_TypeOfCubeG[i] = 0;
                    }
                    if (IntList_TypeOfCubeG[i - 14] != 0 & IntList_TypeOfCubeG[i - 14] != 1 & IntList_TypeOfCubeG[i - 14] != 2)
                    {
                        //PartOfCurrentBlockの下の座標に何かあった時
                        IntList_TypeOfCubeG[i] = 3;
                    }
                }
                if (i < 44)
                {
                    //PartOfCurrentBlockが最下行の時
                    IntList_TypeOfCubeG[i] = 3;
                }
            }
        }

        if (IntList_TypeOfCubeG.Contains(2) == true)
        {
            Invoke("Disassembly_CurrentBlock", 0.15f);
        }

        if (IntList_TypeOfCubeG.Contains(1) == false & IntList_TypeOfCubeG.Contains(2) == false)
        {
            Invoke("Sorting_PartOfCurrentBlock", 0);
        }

        Invoke("Painting_CubeG", 0);
    }
    //PartOfCurrentBlockの仕分け
    void Sorting_PartOfCurrentBlock()
    {
        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (i % 14 + 1 == 3)
            {
                if (IntList_TypeOfCubeG[i] == 3)
                {
                    switch (IntList_ColorOfCubeG[i])
                    {
                        case 1:
                            IntList_TypeOfCubeG[i] = 4;
                            break;
                        case 2:
                            IntList_TypeOfCubeG[i] = 6;
                            break;
                        case 3:
                            IntList_TypeOfCubeG[i] = 8;
                            break;
                    }
                }
            }
        }

        bool a = false;
        while (a == false)
        {
            a = true;

            for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
            {
                if (IntList_TypeOfCubeG[i] == 3)
                {
                    switch (IntList_ColorOfCubeG[i])
                    {
                        case 1:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 4)
                                {
                                    IntList_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 4)
                                {
                                    IntList_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 4)
                                {
                                    IntList_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 4)
                                {
                                    IntList_TypeOfCubeG[i] = 4;
                                    a = false;
                                }
                            }
                            break;
                        case 2:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 6)
                                {
                                    IntList_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 6)
                                {
                                    IntList_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 6)
                                {
                                    IntList_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 6)
                                {
                                    IntList_TypeOfCubeG[i] = 6;
                                    a = false;
                                }
                            }
                            break;
                        case 3:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 8)
                                {
                                    IntList_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 8)
                                {
                                    IntList_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 8)
                                {
                                    IntList_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 8)
                                {
                                    IntList_TypeOfCubeG[i] = 8;
                                    a = false;
                                }
                            }
                            break;
                    }
                }
            }
        }

        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (i % 14 + 1 == 12)
            {
                if (IntList_TypeOfCubeG[i] == 4 | IntList_TypeOfCubeG[i] == 6 | IntList_TypeOfCubeG[i] == 8)
                {
                    switch (IntList_TypeOfCubeG[i])
                    {
                        case 4:
                            IntList_TypeOfCubeG[i] = 5;
                            break;
                        case 6:
                            IntList_TypeOfCubeG[i] = 7;
                            break;
                        case 8:
                            IntList_TypeOfCubeG[i] = 9;
                            break;
                    }
                }
            }
        }

        bool b = false;
        while (b == false)
        {
            b = true;

            for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
            {
                if (IntList_TypeOfCubeG[i] == 4 | IntList_TypeOfCubeG[i] == 6 | IntList_TypeOfCubeG[i] == 8)
                {
                    switch (IntList_TypeOfCubeG[i])
                    {
                        case 4:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 5)
                                {
                                    IntList_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 5)
                                {
                                    IntList_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 5)
                                {
                                    IntList_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 5)
                                {
                                    IntList_TypeOfCubeG[i] = 5;
                                    b = false;
                                }
                            }
                            break;
                        case 6:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 7)
                                {
                                    IntList_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 7)
                                {
                                    IntList_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 7)
                                {
                                    IntList_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 7)
                                {
                                    IntList_TypeOfCubeG[i] = 7;
                                    b = false;
                                }
                            }
                            break;
                        case 8:
                            //上調査
                            if (i <= 375)
                            {
                                if (IntList_TypeOfCubeG[i + 14] == 9)
                                {
                                    IntList_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //下調査
                            if (i >= 14)
                            {
                                if (IntList_TypeOfCubeG[i - 14] == 9)
                                {
                                    IntList_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //右調査
                            if (i % 14 + 1 <= 11)
                            {
                                if (IntList_TypeOfCubeG[i + 1] == 9)
                                {
                                    IntList_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            //左調査
                            if (i % 14 + 1 >= 4)
                            {
                                if (IntList_TypeOfCubeG[i - 1] == 9)
                                {
                                    IntList_TypeOfCubeG[i] = 9;
                                    b = false;
                                }
                            }
                            break;
                    }
                }
            }
        }

        if (IntList_TypeOfCubeG.Contains(5) == true | IntList_TypeOfCubeG.Contains(7) == true | IntList_TypeOfCubeG.Contains(9) == true)
        {
            Invoke("Calculation_ScoreSinglePlay", 0);
        }
        else
        {
            CanHoldCurrentBlock = true;

            Invoke("Resetting_SinglePlay", 0);
        }
    }
    //ScoreSinglePlayの換算
    void Calculation_ScoreSinglePlay()
    {
        NumberOfCombos += 1;
        NumberOfRens += 1;
        CountOfContinuousSummonedCurrentBlock = 0;

        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (IntList_TypeOfCubeG[i] == 5 | IntList_TypeOfCubeG[i] == 7 | IntList_TypeOfCubeG[i] == 9)
            {
                //通常換算
                ScoreSinglePlay += 50;
            }
        }
        if (IntList_TypeOfCubeG.Contains(3) == false & IntList_TypeOfCubeG.Contains(4) == false & IntList_TypeOfCubeG.Contains(6) == false & IntList_TypeOfCubeG.Contains(8) == false)
        {
            //ALLCLEAR換算
            ScoreSinglePlay += 500;
        }
        if (NumberOfCombos >= 2)
        {
            //COMBO換算
            ScoreSinglePlay += 1000;
        }
        if (NumberOfRens >= 2)
        {
            //REN換算
            ScoreSinglePlay += 300;
        }
        if (IntList_TypeOfCubeG.Contains(5) == true & IntList_TypeOfCubeG.Contains(7) == false & IntList_TypeOfCubeG.Contains(9) == false |
            IntList_TypeOfCubeG.Contains(5) == false & IntList_TypeOfCubeG.Contains(7) == true & IntList_TypeOfCubeG.Contains(9) == false |
            IntList_TypeOfCubeG.Contains(5) == false & IntList_TypeOfCubeG.Contains(7) == false & IntList_TypeOfCubeG.Contains(9) == true)
        {
            //SINGLE換算
            ScoreSinglePlay += 0;
        }
        if (IntList_TypeOfCubeG.Contains(5) == true & IntList_TypeOfCubeG.Contains(7) == true & IntList_TypeOfCubeG.Contains(9) == false |
            IntList_TypeOfCubeG.Contains(5) == true & IntList_TypeOfCubeG.Contains(7) == false & IntList_TypeOfCubeG.Contains(9) == true |
            IntList_TypeOfCubeG.Contains(5) == false & IntList_TypeOfCubeG.Contains(7) == true & IntList_TypeOfCubeG.Contains(9) == true)
        {
            //DOUBLE換算
            ScoreSinglePlay += 2000;
        }
        if (IntList_TypeOfCubeG.Contains(5) == true & IntList_TypeOfCubeG.Contains(7) == true & IntList_TypeOfCubeG.Contains(9) == true)
        {
            //TRIPLE換算
            ScoreSinglePlay += 3000;
        }

        Invoke("Destruction_PartOfCurrentBlock", 0.3f);
    }
    //PartOfCurrentBlockの消去
    void Destruction_PartOfCurrentBlock()
    {
        AudioSource_AudioSource_8.Play();

        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (IntList_TypeOfCubeG[i] == 5 | IntList_TypeOfCubeG[i] == 7 | IntList_TypeOfCubeG[i] == 9)
            {
                IntList_TypeOfCubeG[i] = 0;
                IntList_ColorOfCubeG[i] = 0;
            }
        }

        Invoke("Painting_CubeG", 0);
        Invoke("Painting_CubeS", 0);
        Invoke("FreeFall_PartOfCurrentBlock", 0);
    }
    //PartOfCurrentBlockの自由落下
    void FreeFall_PartOfCurrentBlock()
    {
        if (IntList_TypeOfCubeG.Contains(3) == true | IntList_TypeOfCubeG.Contains(4) == true | IntList_TypeOfCubeG.Contains(6) == true | IntList_TypeOfCubeG.Contains(8) == true)
        {
            for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
            {
                if (IntList_TypeOfCubeG[i] == 3 | IntList_TypeOfCubeG[i] == 4 | IntList_TypeOfCubeG[i] == 6 | IntList_TypeOfCubeG[i] == 8)
                {
                    IntList_TypeOfCubeG[i] = 2;
                }
            }
        }

        for (int i = 0; i < IntList_TypeOfCubeG.Count; i++)
        {
            if (IntList_TypeOfCubeG[i] == 2)
            {
                if (i >= 44)
                {
                    if (IntList_TypeOfCubeG[i - 14] == 0)
                    {
                        IntList_ColorOfCubeG[i - 14] = IntList_ColorOfCubeG[i];
                        IntList_ColorOfCubeG[i] = 0;

                        IntList_TypeOfCubeG[i - 14] = 2;
                        IntList_TypeOfCubeG[i] = 0;
                    }
                    if (IntList_TypeOfCubeG[i - 14] != 0 & IntList_TypeOfCubeG[i - 14] != 1 & IntList_TypeOfCubeG[i - 14] != 2)
                    {
                        IntList_TypeOfCubeG[i] = 3;
                    }
                }
                if (i < 44)
                {
                    IntList_TypeOfCubeG[i] = 3;
                }
            }
        }

        if (IntList_TypeOfCubeG.Contains(2) == true)
        {
            Invoke("FreeFall_PartOfCurrentBlock", 0.15f);
        }

        if (IntList_TypeOfCubeG.Contains(2) == false)
        {
            Invoke("Sorting_PartOfCurrentBlock", 0.5f);
        }

        Invoke("Painting_CubeG", 0);
    }


    //GhostBlockの切り替え
    void Switching_GhostBlock()
    {
        if (GhostMode == true)
        {
            int a = 0;
            int b = 0;
            int c = 0;
            int d = 0;
            int e = 0;
            int f = 0;
            int g = 0;
            int h = 0;
            int i = 0;
            int j = 0;

            for (int z = 0; z < IntList_TypeOfCubeG.Count; z++)
            {
                if (IntList_TypeOfCubeG[z] == 11 | IntList_ColorOfCubeG[z] == 4)
                {
                    IntList_ColorOfCubeG[z] = 0;
                    IntList_TypeOfCubeG[z] = 0;
                }
            }

            for (int z = 0; z < IntList_TypeOfCubeG.Count; z++)
            {
                switch (z % 14 + 1)
                {
                    case 3:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            a += 1;
                        }
                        break;
                    case 4:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            b += 1;
                        }
                        break;
                    case 5:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            c += 1;
                        }
                        break;
                    case 6:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            d += 1;
                        }
                        break;
                    case 7:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            e += 1;
                        }
                        break;
                    case 8:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            f += 1;
                        }
                        break;
                    case 9:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            g += 1;
                        }
                        break;
                    case 10:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            h += 1;
                        }
                        break;
                    case 11:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            i += 1;
                        }
                        break;
                    case 12:
                        if (IntList_TypeOfCubeG[z] == 1)
                        {
                            j += 1;
                        }
                        break;
                }
            }

            for (int z = 0; z < IntList_TypeOfCubeG.Count; z++)
            {
                switch (z % 14 + 1)
                {
                    case 3:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (a > 0)
                            {
                                a -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 4:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (b > 0)
                            {
                                b -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 5:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (c > 0)
                            {
                                c -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 6:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (d > 0)
                            {
                                d -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 7:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (e > 0)
                            {
                                e -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 8:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (f > 0)
                            {
                                f -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 9:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (g > 0)
                            {
                                g -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 10:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (h > 0)
                            {
                                h -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 11:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (i > 0)
                            {
                                i -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                    case 12:
                        if (IntList_TypeOfCubeG[z] == 0)
                        {
                            if (j > 0)
                            {
                                j -= 1;
                                IntList_ColorOfCubeG[z] = 4;
                            }
                        }
                        break;
                }

                if (IntList_TypeOfCubeG[z] == 1)
                {
                    break;
                }
            }
        }
        else
        {
            for (int z = 0; z < IntList_TypeOfCubeG.Count; z++)
            {
                if (IntList_TypeOfCubeG[z] == 11 | IntList_ColorOfCubeG[z] == 4)
                {
                    IntList_ColorOfCubeG[z] = 0;
                    IntList_TypeOfCubeG[z] = 0;
                }
            }
        }
        Invoke("Painting_CubeG", 0);
    }
    //Frameの切り替え
    void Switching_Frame()
    {
        if (FrameMode == true)
        {
            Frames_FrameMode.SetActive(true);
        }
        else
        {
            Frames_FrameMode.SetActive(false);
        }
    }


    //CubeGの染色
    void Painting_CubeG()
    {
        int a = 0;
        int b = 0;

        for (int i = 0; i < IntList_ColorOfCubeG.Count; i++)
        {
            if (i % 14 + 1 >= 3 & i % 14 + 1 <= 12 & Mathf.FloorToInt(i / 14) + 1 >= 3 & Mathf.FloorToInt(i / 14) + 1 <= 28)
            {
                switch (IntList_ColorOfCubeG[i])
                {
                    case 0:
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                        break;
                    case 1:
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                        break;
                    case 2:
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                        break;
                    case 3:
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                        break;
                    case 4:
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.color = Albedo_Gray;
                        GameObjectList_CubeG[i - 30 - b].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Gray);
                        break;
                }

                a += 1;

                if (a == 10)
                {
                    a = 0;
                    b += 4;
                }
            }
        }
    }
    //CubeHの染色
    void Painting_CubeH()
    {
        for (int i = 0; i < IntList_ColorOfCubeH.Count; i++)
        {
            IntList_ColorOfCubeH[i] = 0;
            GameObjectList_CubeH[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfHoldBlock.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfHoldBlock.Count; i++)
                {
                    switch (IntList_DataOfHoldBlock[i])
                    {
                        case 0:
                            IntList_ColorOfCubeH[0] = ColorOfHoldBlock;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeH[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfHoldBlock.Count; i++)
                {
                    switch (IntList_DataOfHoldBlock[i])
                    {
                        case 0:
                            IntList_ColorOfCubeH[1] = ColorOfHoldBlock;
                            break;
                        case 1:
                            IntList_ColorOfCubeH[2] = ColorOfHoldBlock;
                            break;
                        case 14:
                            IntList_ColorOfCubeH[3] = ColorOfHoldBlock;
                            break;
                        case 15:
                            IntList_ColorOfCubeH[4] = ColorOfHoldBlock;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeH[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfHoldBlock.Count; i++)
                {
                    switch (IntList_DataOfHoldBlock[i])
                    {
                        case 0:
                            IntList_ColorOfCubeH[5] = ColorOfHoldBlock;
                            break;
                        case 1:
                            IntList_ColorOfCubeH[6] = ColorOfHoldBlock;
                            break;
                        case 2:
                            IntList_ColorOfCubeH[7] = ColorOfHoldBlock;
                            break;
                        case 14:
                            IntList_ColorOfCubeH[8] = ColorOfHoldBlock;
                            break;
                        case 15:
                            IntList_ColorOfCubeH[9] = ColorOfHoldBlock;
                            break;
                        case 16:
                            IntList_ColorOfCubeH[10] = ColorOfHoldBlock;
                            break;
                        case 28:
                            IntList_ColorOfCubeH[11] = ColorOfHoldBlock;
                            break;
                        case 29:
                            IntList_ColorOfCubeH[12] = ColorOfHoldBlock;
                            break;
                        case 30:
                            IntList_ColorOfCubeH[13] = ColorOfHoldBlock;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeH[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfHoldBlock.Count; i++)
                {
                    switch (IntList_DataOfHoldBlock[i])
                    {
                        case 0:
                            IntList_ColorOfCubeH[14] = ColorOfHoldBlock;
                            break;
                        case 1:
                            IntList_ColorOfCubeH[15] = ColorOfHoldBlock;
                            break;
                        case 2:
                            IntList_ColorOfCubeH[16] = ColorOfHoldBlock;
                            break;
                        case 3:
                            IntList_ColorOfCubeH[17] = ColorOfHoldBlock;
                            break;
                        case 14:
                            IntList_ColorOfCubeH[18] = ColorOfHoldBlock;
                            break;
                        case 15:
                            IntList_ColorOfCubeH[19] = ColorOfHoldBlock;
                            break;
                        case 16:
                            IntList_ColorOfCubeH[20] = ColorOfHoldBlock;
                            break;
                        case 17:
                            IntList_ColorOfCubeH[21] = ColorOfHoldBlock;
                            break;
                        case 28:
                            IntList_ColorOfCubeH[22] = ColorOfHoldBlock;
                            break;
                        case 29:
                            IntList_ColorOfCubeH[23] = ColorOfHoldBlock;
                            break;
                        case 30:
                            IntList_ColorOfCubeH[24] = ColorOfHoldBlock;
                            break;
                        case 31:
                            IntList_ColorOfCubeH[25] = ColorOfHoldBlock;
                            break;
                        case 42:
                            IntList_ColorOfCubeH[26] = ColorOfHoldBlock;
                            break;
                        case 43:
                            IntList_ColorOfCubeH[27] = ColorOfHoldBlock;
                            break;
                        case 44:
                            IntList_ColorOfCubeH[28] = ColorOfHoldBlock;
                            break;
                        case 45:
                            IntList_ColorOfCubeH[29] = ColorOfHoldBlock;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeH[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeH.Count; i++)
        {
            switch (IntList_ColorOfCubeH[i])
            {
                case 0:
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeH[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeH[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeH[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
    }
    //CubeNの染色
    void Painting_CubeN()
    {
        //CubeN1
        for (int i = 0; i < IntList_ColorOfCubeN1.Count; i++)
        {
            IntList_ColorOfCubeN1[i] = 0;
            GameObjectList_CubeN1[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfNextBlock1.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfNextBlock1.Count; i++)
                {
                    switch (IntList_DataOfNextBlock1[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN1[0] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeN1[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfNextBlock1.Count; i++)
                {
                    switch (IntList_DataOfNextBlock1[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN1[1] = ColorOfNextBlock1;
                            break;
                        case 1:
                            IntList_ColorOfCubeN1[2] = ColorOfNextBlock1;
                            break;
                        case 14:
                            IntList_ColorOfCubeN1[3] = ColorOfNextBlock1;
                            break;
                        case 15:
                            IntList_ColorOfCubeN1[4] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeN1[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfNextBlock1.Count; i++)
                {
                    switch (IntList_DataOfNextBlock1[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN1[5] = ColorOfNextBlock1;
                            break;
                        case 1:
                            IntList_ColorOfCubeN1[6] = ColorOfNextBlock1;
                            break;
                        case 2:
                            IntList_ColorOfCubeN1[7] = ColorOfNextBlock1;
                            break;
                        case 14:
                            IntList_ColorOfCubeN1[8] = ColorOfNextBlock1;
                            break;
                        case 15:
                            IntList_ColorOfCubeN1[9] = ColorOfNextBlock1;
                            break;
                        case 16:
                            IntList_ColorOfCubeN1[10] = ColorOfNextBlock1;
                            break;
                        case 28:
                            IntList_ColorOfCubeN1[11] = ColorOfNextBlock1;
                            break;
                        case 29:
                            IntList_ColorOfCubeN1[12] = ColorOfNextBlock1;
                            break;
                        case 30:
                            IntList_ColorOfCubeN1[13] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeN1[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfNextBlock1.Count; i++)
                {
                    switch (IntList_DataOfNextBlock1[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN1[14] = ColorOfNextBlock1;
                            break;
                        case 1:
                            IntList_ColorOfCubeN1[15] = ColorOfNextBlock1;
                            break;
                        case 2:
                            IntList_ColorOfCubeN1[16] = ColorOfNextBlock1;
                            break;
                        case 3:
                            IntList_ColorOfCubeN1[17] = ColorOfNextBlock1;
                            break;
                        case 14:
                            IntList_ColorOfCubeN1[18] = ColorOfNextBlock1;
                            break;
                        case 15:
                            IntList_ColorOfCubeN1[19] = ColorOfNextBlock1;
                            break;
                        case 16:
                            IntList_ColorOfCubeN1[20] = ColorOfNextBlock1;
                            break;
                        case 17:
                            IntList_ColorOfCubeN1[21] = ColorOfNextBlock1;
                            break;
                        case 28:
                            IntList_ColorOfCubeN1[22] = ColorOfNextBlock1;
                            break;
                        case 29:
                            IntList_ColorOfCubeN1[23] = ColorOfNextBlock1;
                            break;
                        case 30:
                            IntList_ColorOfCubeN1[24] = ColorOfNextBlock1;
                            break;
                        case 31:
                            IntList_ColorOfCubeN1[25] = ColorOfNextBlock1;
                            break;
                        case 42:
                            IntList_ColorOfCubeN1[26] = ColorOfNextBlock1;
                            break;
                        case 43:
                            IntList_ColorOfCubeN1[27] = ColorOfNextBlock1;
                            break;
                        case 44:
                            IntList_ColorOfCubeN1[28] = ColorOfNextBlock1;
                            break;
                        case 45:
                            IntList_ColorOfCubeN1[29] = ColorOfNextBlock1;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeN1[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeN1.Count; i++)
        {
            switch (IntList_ColorOfCubeN1[i])
            {
                case 0:
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeN1[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeN1[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeN1[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN2
        for (int i = 0; i < IntList_ColorOfCubeN2.Count; i++)
        {
            IntList_ColorOfCubeN2[i] = 0;
            GameObjectList_CubeN2[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfNextBlock2.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfNextBlock2.Count; i++)
                {
                    switch (IntList_DataOfNextBlock2[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN2[0] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeN2[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfNextBlock2.Count; i++)
                {
                    switch (IntList_DataOfNextBlock2[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN2[1] = ColorOfNextBlock2;
                            break;
                        case 1:
                            IntList_ColorOfCubeN2[2] = ColorOfNextBlock2;
                            break;
                        case 14:
                            IntList_ColorOfCubeN2[3] = ColorOfNextBlock2;
                            break;
                        case 15:
                            IntList_ColorOfCubeN2[4] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeN2[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfNextBlock2.Count; i++)
                {
                    switch (IntList_DataOfNextBlock2[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN2[5] = ColorOfNextBlock2;
                            break;
                        case 1:
                            IntList_ColorOfCubeN2[6] = ColorOfNextBlock2;
                            break;
                        case 2:
                            IntList_ColorOfCubeN2[7] = ColorOfNextBlock2;
                            break;
                        case 14:
                            IntList_ColorOfCubeN2[8] = ColorOfNextBlock2;
                            break;
                        case 15:
                            IntList_ColorOfCubeN2[9] = ColorOfNextBlock2;
                            break;
                        case 16:
                            IntList_ColorOfCubeN2[10] = ColorOfNextBlock2;
                            break;
                        case 28:
                            IntList_ColorOfCubeN2[11] = ColorOfNextBlock2;
                            break;
                        case 29:
                            IntList_ColorOfCubeN2[12] = ColorOfNextBlock2;
                            break;
                        case 30:
                            IntList_ColorOfCubeN2[13] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeN2[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfNextBlock2.Count; i++)
                {
                    switch (IntList_DataOfNextBlock2[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN2[14] = ColorOfNextBlock2;
                            break;
                        case 1:
                            IntList_ColorOfCubeN2[15] = ColorOfNextBlock2;
                            break;
                        case 2:
                            IntList_ColorOfCubeN2[16] = ColorOfNextBlock2;
                            break;
                        case 3:
                            IntList_ColorOfCubeN2[17] = ColorOfNextBlock2;
                            break;
                        case 14:
                            IntList_ColorOfCubeN2[18] = ColorOfNextBlock2;
                            break;
                        case 15:
                            IntList_ColorOfCubeN2[19] = ColorOfNextBlock2;
                            break;
                        case 16:
                            IntList_ColorOfCubeN2[20] = ColorOfNextBlock2;
                            break;
                        case 17:
                            IntList_ColorOfCubeN2[21] = ColorOfNextBlock2;
                            break;
                        case 28:
                            IntList_ColorOfCubeN2[22] = ColorOfNextBlock2;
                            break;
                        case 29:
                            IntList_ColorOfCubeN2[23] = ColorOfNextBlock2;
                            break;
                        case 30:
                            IntList_ColorOfCubeN2[24] = ColorOfNextBlock2;
                            break;
                        case 31:
                            IntList_ColorOfCubeN2[25] = ColorOfNextBlock2;
                            break;
                        case 42:
                            IntList_ColorOfCubeN2[26] = ColorOfNextBlock2;
                            break;
                        case 43:
                            IntList_ColorOfCubeN2[27] = ColorOfNextBlock2;
                            break;
                        case 44:
                            IntList_ColorOfCubeN2[28] = ColorOfNextBlock2;
                            break;
                        case 45:
                            IntList_ColorOfCubeN2[29] = ColorOfNextBlock2;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeN2[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeN2.Count; i++)
        {
            switch (IntList_ColorOfCubeN2[i])
            {
                case 0:
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeN2[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeN2[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeN2[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN3
        for (int i = 0; i < IntList_ColorOfCubeN3.Count; i++)
        {
            IntList_ColorOfCubeN3[i] = 0;
            GameObjectList_CubeN3[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfNextBlock3.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfNextBlock3.Count; i++)
                {
                    switch (IntList_DataOfNextBlock3[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN3[0] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeN3[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfNextBlock3.Count; i++)
                {
                    switch (IntList_DataOfNextBlock3[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN3[1] = ColorOfNextBlock3;
                            break;
                        case 1:
                            IntList_ColorOfCubeN3[2] = ColorOfNextBlock3;
                            break;
                        case 14:
                            IntList_ColorOfCubeN3[3] = ColorOfNextBlock3;
                            break;
                        case 15:
                            IntList_ColorOfCubeN3[4] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeN3[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfNextBlock3.Count; i++)
                {
                    switch (IntList_DataOfNextBlock3[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN3[5] = ColorOfNextBlock3;
                            break;
                        case 1:
                            IntList_ColorOfCubeN3[6] = ColorOfNextBlock3;
                            break;
                        case 2:
                            IntList_ColorOfCubeN3[7] = ColorOfNextBlock3;
                            break;
                        case 14:
                            IntList_ColorOfCubeN3[8] = ColorOfNextBlock3;
                            break;
                        case 15:
                            IntList_ColorOfCubeN3[9] = ColorOfNextBlock3;
                            break;
                        case 16:
                            IntList_ColorOfCubeN3[10] = ColorOfNextBlock3;
                            break;
                        case 28:
                            IntList_ColorOfCubeN3[11] = ColorOfNextBlock3;
                            break;
                        case 29:
                            IntList_ColorOfCubeN3[12] = ColorOfNextBlock3;
                            break;
                        case 30:
                            IntList_ColorOfCubeN3[13] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeN3[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfNextBlock3.Count; i++)
                {
                    switch (IntList_DataOfNextBlock3[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN3[14] = ColorOfNextBlock3;
                            break;
                        case 1:
                            IntList_ColorOfCubeN3[15] = ColorOfNextBlock3;
                            break;
                        case 2:
                            IntList_ColorOfCubeN3[16] = ColorOfNextBlock3;
                            break;
                        case 3:
                            IntList_ColorOfCubeN3[17] = ColorOfNextBlock3;
                            break;
                        case 14:
                            IntList_ColorOfCubeN3[18] = ColorOfNextBlock3;
                            break;
                        case 15:
                            IntList_ColorOfCubeN3[19] = ColorOfNextBlock3;
                            break;
                        case 16:
                            IntList_ColorOfCubeN3[20] = ColorOfNextBlock3;
                            break;
                        case 17:
                            IntList_ColorOfCubeN3[21] = ColorOfNextBlock3;
                            break;
                        case 28:
                            IntList_ColorOfCubeN3[22] = ColorOfNextBlock3;
                            break;
                        case 29:
                            IntList_ColorOfCubeN3[23] = ColorOfNextBlock3;
                            break;
                        case 30:
                            IntList_ColorOfCubeN3[24] = ColorOfNextBlock3;
                            break;
                        case 31:
                            IntList_ColorOfCubeN3[25] = ColorOfNextBlock3;
                            break;
                        case 42:
                            IntList_ColorOfCubeN3[26] = ColorOfNextBlock3;
                            break;
                        case 43:
                            IntList_ColorOfCubeN3[27] = ColorOfNextBlock3;
                            break;
                        case 44:
                            IntList_ColorOfCubeN3[28] = ColorOfNextBlock3;
                            break;
                        case 45:
                            IntList_ColorOfCubeN3[29] = ColorOfNextBlock3;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeN3[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeN3.Count; i++)
        {
            switch (IntList_ColorOfCubeN3[i])
            {
                case 0:
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeN3[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeN3[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeN3[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN4
        for (int i = 0; i < IntList_ColorOfCubeN4.Count; i++)
        {
            IntList_ColorOfCubeN4[i] = 0;
            GameObjectList_CubeN4[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfNextBlock4.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfNextBlock4.Count; i++)
                {
                    switch (IntList_DataOfNextBlock4[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN4[0] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeN4[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfNextBlock4.Count; i++)
                {
                    switch (IntList_DataOfNextBlock4[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN4[1] = ColorOfNextBlock4;
                            break;
                        case 1:
                            IntList_ColorOfCubeN4[2] = ColorOfNextBlock4;
                            break;
                        case 14:
                            IntList_ColorOfCubeN4[3] = ColorOfNextBlock4;
                            break;
                        case 15:
                            IntList_ColorOfCubeN4[4] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeN4[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfNextBlock4.Count; i++)
                {
                    switch (IntList_DataOfNextBlock4[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN4[5] = ColorOfNextBlock4;
                            break;
                        case 1:
                            IntList_ColorOfCubeN4[6] = ColorOfNextBlock4;
                            break;
                        case 2:
                            IntList_ColorOfCubeN4[7] = ColorOfNextBlock4;
                            break;
                        case 14:
                            IntList_ColorOfCubeN4[8] = ColorOfNextBlock4;
                            break;
                        case 15:
                            IntList_ColorOfCubeN4[9] = ColorOfNextBlock4;
                            break;
                        case 16:
                            IntList_ColorOfCubeN4[10] = ColorOfNextBlock4;
                            break;
                        case 28:
                            IntList_ColorOfCubeN4[11] = ColorOfNextBlock4;
                            break;
                        case 29:
                            IntList_ColorOfCubeN4[12] = ColorOfNextBlock4;
                            break;
                        case 30:
                            IntList_ColorOfCubeN4[13] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeN4[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfNextBlock4.Count; i++)
                {
                    switch (IntList_DataOfNextBlock4[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN4[14] = ColorOfNextBlock4;
                            break;
                        case 1:
                            IntList_ColorOfCubeN4[15] = ColorOfNextBlock4;
                            break;
                        case 2:
                            IntList_ColorOfCubeN4[16] = ColorOfNextBlock4;
                            break;
                        case 3:
                            IntList_ColorOfCubeN4[17] = ColorOfNextBlock4;
                            break;
                        case 14:
                            IntList_ColorOfCubeN4[18] = ColorOfNextBlock4;
                            break;
                        case 15:
                            IntList_ColorOfCubeN4[19] = ColorOfNextBlock4;
                            break;
                        case 16:
                            IntList_ColorOfCubeN4[20] = ColorOfNextBlock4;
                            break;
                        case 17:
                            IntList_ColorOfCubeN4[21] = ColorOfNextBlock4;
                            break;
                        case 28:
                            IntList_ColorOfCubeN4[22] = ColorOfNextBlock4;
                            break;
                        case 29:
                            IntList_ColorOfCubeN4[23] = ColorOfNextBlock4;
                            break;
                        case 30:
                            IntList_ColorOfCubeN4[24] = ColorOfNextBlock4;
                            break;
                        case 31:
                            IntList_ColorOfCubeN4[25] = ColorOfNextBlock4;
                            break;
                        case 42:
                            IntList_ColorOfCubeN4[26] = ColorOfNextBlock4;
                            break;
                        case 43:
                            IntList_ColorOfCubeN4[27] = ColorOfNextBlock4;
                            break;
                        case 44:
                            IntList_ColorOfCubeN4[28] = ColorOfNextBlock4;
                            break;
                        case 45:
                            IntList_ColorOfCubeN4[29] = ColorOfNextBlock4;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeN4[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeN4.Count; i++)
        {
            switch (IntList_ColorOfCubeN4[i])
            {
                case 0:
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeN4[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeN4[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeN4[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
        //CubeN5
        for (int i = 0; i < IntList_ColorOfCubeN5.Count; i++)
        {
            IntList_ColorOfCubeN5[i] = 0;
            GameObjectList_CubeN5[i].SetActive(false);
        }
        switch (IntList_LowerSideLengthOfNextBlock5.Max())
        {
            case 1:
                for (int i = 0; i < IntList_DataOfNextBlock5.Count; i++)
                {
                    switch (IntList_DataOfNextBlock5[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN5[0] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 0; i < 1; i++)
                {
                    GameObjectList_CubeN5[i].SetActive(true);
                }
                break;
            case 2:
                for (int i = 0; i < IntList_DataOfNextBlock5.Count; i++)
                {
                    switch (IntList_DataOfNextBlock5[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN5[1] = ColorOfNextBlock5;
                            break;
                        case 1:
                            IntList_ColorOfCubeN5[2] = ColorOfNextBlock5;
                            break;
                        case 14:
                            IntList_ColorOfCubeN5[3] = ColorOfNextBlock5;
                            break;
                        case 15:
                            IntList_ColorOfCubeN5[4] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 1; i < 5; i++)
                {
                    GameObjectList_CubeN5[i].SetActive(true);
                }
                break;
            case 3:
                for (int i = 0; i < IntList_DataOfNextBlock5.Count; i++)
                {
                    switch (IntList_DataOfNextBlock5[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN5[5] = ColorOfNextBlock5;
                            break;
                        case 1:
                            IntList_ColorOfCubeN5[6] = ColorOfNextBlock5;
                            break;
                        case 2:
                            IntList_ColorOfCubeN5[7] = ColorOfNextBlock5;
                            break;
                        case 14:
                            IntList_ColorOfCubeN5[8] = ColorOfNextBlock5;
                            break;
                        case 15:
                            IntList_ColorOfCubeN5[9] = ColorOfNextBlock5;
                            break;
                        case 16:
                            IntList_ColorOfCubeN5[10] = ColorOfNextBlock5;
                            break;
                        case 28:
                            IntList_ColorOfCubeN5[11] = ColorOfNextBlock5;
                            break;
                        case 29:
                            IntList_ColorOfCubeN5[12] = ColorOfNextBlock5;
                            break;
                        case 30:
                            IntList_ColorOfCubeN5[13] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 5; i < 14; i++)
                {
                    GameObjectList_CubeN5[i].SetActive(true);
                }
                break;
            case 4:
                for (int i = 0; i < IntList_DataOfNextBlock5.Count; i++)
                {
                    switch (IntList_DataOfNextBlock5[i])
                    {
                        case 0:
                            IntList_ColorOfCubeN5[14] = ColorOfNextBlock5;
                            break;
                        case 1:
                            IntList_ColorOfCubeN5[15] = ColorOfNextBlock5;
                            break;
                        case 2:
                            IntList_ColorOfCubeN5[16] = ColorOfNextBlock5;
                            break;
                        case 3:
                            IntList_ColorOfCubeN5[17] = ColorOfNextBlock5;
                            break;
                        case 14:
                            IntList_ColorOfCubeN5[18] = ColorOfNextBlock5;
                            break;
                        case 15:
                            IntList_ColorOfCubeN5[19] = ColorOfNextBlock5;
                            break;
                        case 16:
                            IntList_ColorOfCubeN5[20] = ColorOfNextBlock5;
                            break;
                        case 17:
                            IntList_ColorOfCubeN5[21] = ColorOfNextBlock5;
                            break;
                        case 28:
                            IntList_ColorOfCubeN5[22] = ColorOfNextBlock5;
                            break;
                        case 29:
                            IntList_ColorOfCubeN5[23] = ColorOfNextBlock5;
                            break;
                        case 30:
                            IntList_ColorOfCubeN5[24] = ColorOfNextBlock5;
                            break;
                        case 31:
                            IntList_ColorOfCubeN5[25] = ColorOfNextBlock5;
                            break;
                        case 42:
                            IntList_ColorOfCubeN5[26] = ColorOfNextBlock5;
                            break;
                        case 43:
                            IntList_ColorOfCubeN5[27] = ColorOfNextBlock5;
                            break;
                        case 44:
                            IntList_ColorOfCubeN5[28] = ColorOfNextBlock5;
                            break;
                        case 45:
                            IntList_ColorOfCubeN5[29] = ColorOfNextBlock5;
                            break;
                    }
                }
                for (int i = 14; i < 30; i++)
                {
                    GameObjectList_CubeN5[i].SetActive(true);
                }
                break;
        }
        for (int i = 0; i < IntList_ColorOfCubeN5.Count; i++)
        {
            switch (IntList_ColorOfCubeN5[i])
            {
                case 0:
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Default;
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Default);
                    GameObjectList_CubeN5[i].transform.Find("Frames").gameObject.SetActive(true);
                    break;
                case 1:
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Red;
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Red);
                    GameObjectList_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 2:
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Green;
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Green);
                    GameObjectList_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
                case 3:
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.EnableKeyword("_EMISSION");
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.color = Albedo_Blue;
                    GameObjectList_CubeN5[i].transform.GetComponent<Renderer>().material.SetColor("_EmissionColor", Emission_Blue);
                    GameObjectList_CubeN5[i].transform.Find("Frames").gameObject.SetActive(false);
                    break;
            }
        }
    }
    //CubeSの染色
    void Painting_CubeS()
    {
        for (int i = 0; i < IntList_ColorOfCubeS.Count; i++)
        {
            IntList_ColorOfCubeS[i] = 0;
            GameObjectList_CubeS[i].SetActive(false);
        }
        int a = 0;
        if(ScoreSinglePlay == 0)
        {
            a = 1;
        }
        else
        {
            a = Mathf.FloorToInt(Mathf.Log10(ScoreSinglePlay)) + 1;
        }
        for (int b = 1; b <= a; b++)
        {
            for (int c = 0; c < IntListList_DataOfFigure[Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, b))) / (Mathf.Pow(10, b - 1)))].Count; c++)
            {
                switch (IntListList_DataOfFigure[Mathf.FloorToInt((ScoreSinglePlay % (Mathf.Pow(10, b))) / (Mathf.Pow(10, b - 1)))][c])
                {
                    case 0:
                        IntList_ColorOfCubeS[0 + (b - 1) * 15] = 1;
                        break;
                    case 1:
                        IntList_ColorOfCubeS[1 + (b - 1) * 15] = 1;
                        break;
                    case 2:
                        IntList_ColorOfCubeS[2 + (b - 1) * 15] = 1;
                        break;
                    case 3:
                        IntList_ColorOfCubeS[3 + (b - 1) * 15] = 1;
                        break;
                    case 4:
                        IntList_ColorOfCubeS[4 + (b - 1) * 15] = 1;
                        break;
                    case 5:
                        IntList_ColorOfCubeS[5 + (b - 1) * 15] = 1;
                        break;
                    case 6:
                        IntList_ColorOfCubeS[6 + (b - 1) * 15] = 1;
                        break;
                    case 7:
                        IntList_ColorOfCubeS[7 + (b - 1) * 15] = 1;
                        break;
                    case 8:
                        IntList_ColorOfCubeS[8 + (b - 1) * 15] = 1;
                        break;
                    case 9:
                        IntList_ColorOfCubeS[9 + (b - 1) * 15] = 1;
                        break;
                    case 10:
                        IntList_ColorOfCubeS[10 + (b - 1) * 15] = 1;
                        break;
                    case 11:
                        IntList_ColorOfCubeS[11 + (b - 1) * 15] = 1;
                        break;
                    case 12:
                        IntList_ColorOfCubeS[12 + (b - 1) * 15] = 1;
                        break;
                    case 13:
                        IntList_ColorOfCubeS[13 + (b - 1) * 15] = 1;
                        break;
                    case 14:
                        IntList_ColorOfCubeS[14 + (b - 1) * 15] = 1;
                        break;
                }
            }
        }
        for (int i = 0; i < IntList_ColorOfCubeS.Count; i++)
        {
            switch (IntList_ColorOfCubeS[i])
            {
                case 0:
                    GameObjectList_CubeS[i].SetActive(false);
                    break;
                case 1:
                    GameObjectList_CubeS[i].SetActive(true);
                    break;
            }
        }
    }
}

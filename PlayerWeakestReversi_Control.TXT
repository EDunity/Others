using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class PlayerWeakestReversi_Control : MonoBehaviour
{
    private GameObject MainCameraJointWeakestReversi;

    private GameObject CursorBlack;
    private GameObject CursorWhite;
    private GameObject StoneBlack;
    private GameObject StoneWhite;

    private GameObject Transform_Cursor;
    private GameObject Transform_Stone;

    private List<int> IntList_Color = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
    private List<int> IntList_PositionStoneBlack = new List<int> { 27, 36 };
    private List<int> IntList_PositionStoneWhite = new List<int> { 28, 35 };
    private List<int> IntList_PointPlayer = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_PointEnemy = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_PositionAroundStonePlayer = new List<int> { };
    private List<int> IntList_PositionAroundStoneEnemy = new List<int> { };
    private List<int> IntList_PositionPointPlayer = new List<int> { };
    private List<int> IntList_PositionPointEnemy = new List<int> { };

    private int PositionCursorPlayer = 0;
    private int CursorEnemyPosition = 0;

    private int UpperDistanceFromPositionCursorPlayer = 1;
    private int LowerDistanceFromPositionCursorPlayer = 1;
    private int RightDistanceFromPositionCursorPlayer = 1;
    private int LeftDistanceFromPositionCursorPlayer = 1;
    private int UpperRightDistanceFromPositionCursorPlayer = 1;
    private int UpperLeftDistanceFromPositionCursorPlayer = 1;
    private int LowerRightDistanceFromPositionCursorPlayer = 1;
    private int LowerLeftDistanceFromPositionCursorPlayer = 1;

    private int UpperDistanceFromPositionAroundStonePlayer = 1;
    private int LowerDistanceFromPositionAroundStonePlayer = 1;
    private int RightDistanceFromPositionAroundStonePlayer = 1;
    private int LeftDistanceFromPositionAroundStonePlayer = 1;
    private int UpperRightDistanceFromPositionAroundStonePlayer = 1;
    private int UpperLeftDistanceFromPositionAroundStonePlayer = 1;
    private int LowerRightDistanceFromPositionAroundStonePlayer = 1;
    private int LowerLeftDistanceFromPositionAroundStonePlayer = 1;

    private int UpperDistanceFromPositionAroundStoneEnemy = 1;
    private int LowerDistanceFromPositionAroundStoneEnemy = 1;
    private int RightDistanceFromPositionAroundStoneEnemy = 1;
    private int LeftDistanceFromPositionAroundStoneEnemy = 1;
    private int UpperRightDistanceFromPositionAroundStoneEnemy = 1;
    private int UpperLeftDistanceFromPositionAroundStoneEnemy = 1;
    private int LowerRightDistanceFromPositionAroundStoneEnemy = 1;
    private int LowerLeftDistanceFromPositionAroundStoneEnemy = 1;

    private int UpperCandidatePointPlayer = 0;
    private int LowerCandidatePointPlayer = 0;
    private int RightCandidatePointPlayer = 0;
    private int LeftCandidatePointPlayer = 0;
    private int UpperRightCandidatePointPlayer = 0;
    private int UpperLeftCandidatePointPlayer = 0;
    private int LowerRightCandidatePointPlayer = 0;
    private int LowerLeftCandidatePointPlayer = 0;
    private int TotalCandidatePointPlayer = 0;

    private int UpperCandidatePointEnemy = 0;
    private int LowerCandidatePointEnemy = 0;
    private int RightCandidatePointEnemy = 0;
    private int LeftCandidatePointEnemy = 0;
    private int UpperRightCandidatePointEnemy = 0;
    private int UpperLeftCandidatePointEnemy = 0;
    private int LowerRightCandidatePointEnemy = 0;
    private int LowerLeftCandidatePointEnemy = 0;
    private int TotalCandidatePointEnemy = 0;

    private int abc;

    private string PlayerColor = "White";
    private string Turn = "Player";

    private bool CanInvokeCounting_StoneEnemyReturned = true;
    private bool CanInvokeFinding_PositionAroundStonePlayer = true;

    private bool IsFinishedUpperCounting_StoneEnemyReturned = false;
    private bool IsFinishedLowerCounting_StoneEnemyReturned = false;
    private bool IsFinishedRightCounting_StoneEnemyReturned = false;
    private bool IsFinishedLeftCounting_StoneEnemyReturned = false;
    private bool IsFinishedUpperRightCounting_StoneEnemyReturned = false;
    private bool IsFinishedUpperLeftCounting_StoneEnemyReturned = false;
    private bool IsFinishedLowerRightCounting_StoneEnemyReturned = false;
    private bool IsFinishedLowerLeftCounting_StoneEnemyReturned = false;

    private bool IsFinishedUpperCounting_StonePlayerReturned = false;
    private bool IsFinishedLowerCounting_StonePlayerReturned = false;
    private bool IsFinishedRightCounting_StonePlayerReturned = false;
    private bool IsFinishedLeftCounting_StonePlayerReturned = false;
    private bool IsFinishedUpperRightCounting_StonePlayerReturned = false;
    private bool IsFinishedUpperLeftCounting_StonePlayerReturned = false;
    private bool IsFinishedLowerRightCounting_StonePlayerReturned = false;
    private bool IsFinishedLowerLeftCounting_StonePlayerReturned = false;











    private bool QU = false;
    private bool WU = false;
    private bool EU = false;
    private bool RU = false;
    private bool TU = false;
    private bool YU = false;
    private bool UU = false;
    private bool IU = false;
    private bool OU = false;
    private bool PU = false;
    private bool AU = false;
    private bool SU = false;
    private bool DU = false;
    private bool FU = false;
    private bool GU = false;
    private bool HU = false;
    private bool JU = false;
    private bool KU = false;
    private bool LU = false;
    private bool ZU = false;
    private bool XU = false;
    private bool CU = false;
    private bool VU = false;
    private bool BU = false;
    private bool NU = false;
    private bool MU = false;
    private bool Alpha0U = false;
    private bool Alpha1U = false;
    private bool Alpha2U = false;
    private bool Alpha3U = false;
    private bool Alpha4U = false;
    private bool Alpha5U = false;
    private bool Alpha6U = false;
    private bool Alpha7U = false;
    private bool Alpha8U = false;
    private bool Alpha9U = false;
    private bool BackSpaceU = false;
    private bool SpaceU = false;
    private bool RightShiftU = false;
    private bool LeftShiftU = false;
    private bool RightCtrlU = false;
    private bool LeftCtrlU = false;
    private bool TabU = false;
    private bool EscapeU = false;
    private bool EnterU = false;
    private bool UpArrowU = false;
    private bool DownArrowU = false;
    private bool RightArrowU = false;
    private bool LeftArrowU = false;

    private bool Q = false;
    private bool W = false;
    private bool E = false;
    private bool R = false;
    private bool T = false;
    private bool Y = false;
    private bool U = false;
    private bool I = false;
    private bool O = false;
    private bool P = false;
    private bool A = false;
    private bool S = false;
    private bool D = false;
    private bool F = false;
    private bool G = false;
    private bool H = false;
    private bool J = false;
    private bool K = false;
    private bool L = false;
    private bool Z = false;
    private bool X = false;
    private bool C = false;
    private bool V = false;
    private bool B = false;
    private bool N = false;
    private bool M = false;
    private bool Alpha0 = false;
    private bool Alpha1 = false;
    private bool Alpha2 = false;
    private bool Alpha3 = false;
    private bool Alpha4 = false;
    private bool Alpha5 = false;
    private bool Alpha6 = false;
    private bool Alpha7 = false;
    private bool Alpha8 = false;
    private bool Alpha9 = false;
    private bool BackSpace = false;
    private bool Space = false;
    private bool RightShift = false;
    private bool LeftShift = false;
    private bool RightCtrl = false;
    private bool LeftCtrl = false;
    private bool Tab = false;
    private bool Escape = false;
    private bool Enter = false;
    private bool UpArrow = false;
    private bool DownArrow = false;
    private bool RightArrow = false;
    private bool LeftArrow = false;

    private bool QD = false;
    private bool WD = false;
    private bool ED = false;
    private bool RD = false;
    private bool TD = false;
    private bool YD = false;
    private bool UD = false;
    private bool ID = false;
    private bool OD = false;
    private bool PD = false;
    private bool AD = false;
    private bool SD = false;
    private bool DD = false;
    private bool FD = false;
    private bool GD = false;
    private bool HD = false;
    private bool JD = false;
    private bool KD = false;
    private bool LD = false;
    private bool ZD = false;
    private bool XD = false;
    private bool CD = false;
    private bool VD = false;
    private bool BD = false;
    private bool ND = false;
    private bool MD = false;
    private bool Alpha0D = false;
    private bool Alpha1D = false;
    private bool Alpha2D = false;
    private bool Alpha3D = false;
    private bool Alpha4D = false;
    private bool Alpha5D = false;
    private bool Alpha6D = false;
    private bool Alpha7D = false;
    private bool Alpha8D = false;
    private bool Alpha9D = false;
    private bool BackSpaceD = false;
    private bool SpaceD = false;
    private bool RightShiftD = false;
    private bool LeftShiftD = false;
    private bool RightCtrlD = false;
    private bool LeftCtrlD = false;
    private bool TabD = false;
    private bool EscapeD = false;
    private bool EnterD = false;
    private bool UpArrowD = false;
    private bool DownArrowD = false;
    private bool RightArrowD = false;
    private bool LeftArrowD = false;

    private bool CanUseShortCutKey = true;

    void Start()
    {
        MainCameraJointWeakestReversi = GameObject.Find("MainCameraJointWeakestReversi");

        CursorBlack = (GameObject)Resources.Load("Object/Cursor/CursorBlack");
        CursorWhite = (GameObject)Resources.Load("Object/Cursor/CursorWhite");
        StoneBlack = (GameObject)Resources.Load("Object/Stone/StoneBlack");
        StoneWhite = (GameObject)Resources.Load("Object/Stone/StoneWhite");

        Transform_Cursor = GameObject.Find("Transform_Cursor");
        Transform_Stone = GameObject.Find("Transform_Stone");
















































        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            Invoke("Summoning_CursorPlayer", 0);

            for (int a = 0; a <= IntList_PositionStoneBlack.Count - 1; a++)
            {
                GameObject GameObject_StoneBlack = Instantiate(StoneBlack) as GameObject;
                GameObject_StoneBlack.name = "StoneEnemy";
                GameObject_StoneBlack.tag = "StoneEnemy";
                GameObject_StoneBlack.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneBlack[a] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneBlack[a] / 8) + 1);
            }
            for (int b = 0; b <= IntList_PositionStoneWhite.Count - 1; b++)
            {
                GameObject GameObject_StoneWhite = Instantiate(StoneWhite) as GameObject;
                GameObject_StoneWhite.name = "StonePlayer";
                GameObject_StoneWhite.tag = "StonePlayer";
                GameObject_StoneWhite.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneWhite[b] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneWhite[b] / 8) + 1);
            }
        }
    }






    void FixedUpdate()
    {
        //MainCameraJointWeakestReversi操作
        if (UpArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0.3f, 0, 0);
        }
        if (DownArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(-0.3f, 0, 0);
        }
        if (RightArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0, -0.3f, 0);
        }
        if (LeftArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0, 0.3f, 0);
        }
        if (RD)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles = new Vector3(0, 0, 0);
        }
    }







    void Update()
    {
        //ShortCutKey
        if (CanUseShortCutKey == true)
        {
            if (Input.GetKeyUp(KeyCode.Q))
            {
                QU = true;
            }
            else
            {
                QU = false;
            }
            if (Input.GetKeyUp(KeyCode.W))
            {
                WU = true;
            }
            else
            {
                WU = false;
            }
            if (Input.GetKeyUp(KeyCode.E))
            {
                EU = true;
            }
            else
            {
                EU = false;
            }
            if (Input.GetKeyUp(KeyCode.R))
            {
                RU = true;
            }
            else
            {
                RU = false;
            }
            if (Input.GetKeyUp(KeyCode.T))
            {
                TU = true;
            }
            else
            {
                TU = false;
            }
            if (Input.GetKeyUp(KeyCode.Y))
            {
                YU = true;
            }
            else
            {
                YU = false;
            }
            if (Input.GetKeyUp(KeyCode.U))
            {
                UU = true;
            }
            else
            {
                UU = false;
            }
            if (Input.GetKeyUp(KeyCode.I))
            {
                IU = true;
            }
            else
            {
                IU = false;
            }
            if (Input.GetKeyUp(KeyCode.O))
            {
                OU = true;
            }
            else
            {
                OU = false;
            }
            if (Input.GetKeyUp(KeyCode.P))
            {
                PU = true;
            }
            else
            {
                PU = false;
            }
            if (Input.GetKeyUp(KeyCode.A))
            {
                AU = true;
            }
            else
            {
                AU = false;
            }
            if (Input.GetKeyUp(KeyCode.S))
            {
                SU = true;
            }
            else
            {
                SU = false;
            }
            if (Input.GetKeyUp(KeyCode.D))
            {
                DU = true;
            }
            else
            {
                DU = false;
            }
            if (Input.GetKeyUp(KeyCode.F))
            {
                FU = true;
            }
            else
            {
                FU = false;
            }
            if (Input.GetKeyUp(KeyCode.G))
            {
                GU = true;
            }
            else
            {
                GU = false;
            }
            if (Input.GetKeyUp(KeyCode.H))
            {
                HU = true;
            }
            else
            {
                HU = false;
            }
            if (Input.GetKeyUp(KeyCode.J))
            {
                JU = true;
            }
            else
            {
                JU = false;
            }
            if (Input.GetKeyUp(KeyCode.K))
            {
                KU = true;
            }
            else
            {
                KU = false;
            }
            if (Input.GetKeyUp(KeyCode.L))
            {
                LU = true;
            }
            else
            {
                LU = false;
            }
            if (Input.GetKeyUp(KeyCode.Z))
            {
                ZU = true;
            }
            else
            {
                ZU = false;
            }
            if (Input.GetKeyUp(KeyCode.X))
            {
                XU = true;
            }
            else
            {
                XU = false;
            }
            if (Input.GetKeyUp(KeyCode.C))
            {
                CU = true;
            }
            else
            {
                CU = false;
            }
            if (Input.GetKeyUp(KeyCode.V))
            {
                VU = true;
            }
            else
            {
                VU = false;
            }
            if (Input.GetKeyUp(KeyCode.B))
            {
                BU = true;
            }
            else
            {
                BU = false;
            }
            if (Input.GetKeyUp(KeyCode.N))
            {
                NU = true;
            }
            else
            {
                NU = false;
            }
            if (Input.GetKeyUp(KeyCode.M))
            {
                MU = true;
            }
            else
            {
                MU = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha0))
            {
                Alpha0U = true;
            }
            else
            {
                Alpha0U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha1))
            {
                Alpha1U = true;
            }
            else
            {
                Alpha1U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha2))
            {
                Alpha2U = true;
            }
            else
            {
                Alpha2U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha3))
            {
                Alpha3U = true;
            }
            else
            {
                Alpha3U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha4))
            {
                Alpha4U = true;
            }
            else
            {
                Alpha4U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha5))
            {
                Alpha5U = true;
            }
            else
            {
                Alpha5U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha6))
            {
                Alpha6U = true;
            }
            else
            {
                Alpha6U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha7))
            {
                Alpha7U = true;
            }
            else
            {
                Alpha7U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha8))
            {
                Alpha8U = true;
            }
            else
            {
                Alpha8U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha9))
            {
                Alpha9U = true;
            }
            else
            {
                Alpha9U = false;
            }
            if (Input.GetKeyUp(KeyCode.Backspace))
            {
                BackSpaceU = true;
            }
            else
            {
                BackSpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.Space))
            {
                SpaceU = true;
            }
            else
            {
                SpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightShift))
            {
                RightShiftU = true;
            }
            else
            {
                RightShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftShift))
            {
                LeftShiftU = true;
            }
            else
            {
                LeftShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightControl))
            {
                RightCtrlU = true;
            }
            else
            {
                RightCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftControl))
            {
                LeftCtrlU = true;
            }
            else
            {
                LeftCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.Tab))
            {
                TabU = true;
            }
            else
            {
                TabU = false;
            }
            if (Input.GetKeyUp(KeyCode.Escape))
            {
                EscapeU = true;
            }
            else
            {
                EscapeU = false;
            }
            if (Input.GetKeyUp(KeyCode.Return))
            {
                EnterU = true;
            }
            else
            {
                EnterU = false;
            }
            if (Input.GetKeyUp(KeyCode.UpArrow))
            {
                UpArrowU = true;
            }
            else
            {
                UpArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.DownArrow))
            {
                DownArrowU = true;
            }
            else
            {
                DownArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightArrow))
            {
                RightArrowU = true;
            }
            else
            {
                RightArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftArrow))
            {
                LeftArrowU = true;
            }
            else
            {
                LeftArrowU = false;
            }

            if (Input.GetKey(KeyCode.Q))
            {
                Q = true;
            }
            else
            {
                Q = false;
            }
            if (Input.GetKey(KeyCode.W))
            {
                W = true;
            }
            else
            {
                W = false;
            }
            if (Input.GetKey(KeyCode.E))
            {
                E = true;
            }
            else
            {
                E = false;
            }
            if (Input.GetKey(KeyCode.R))
            {
                R = true;
            }
            else
            {
                R = false;
            }
            if (Input.GetKey(KeyCode.T))
            {
                T = true;
            }
            else
            {
                T = false;
            }
            if (Input.GetKey(KeyCode.Y))
            {
                Y = true;
            }
            else
            {
                Y = false;
            }
            if (Input.GetKey(KeyCode.U))
            {
                U = true;
            }
            else
            {
                U = false;
            }
            if (Input.GetKey(KeyCode.I))
            {
                I = true;
            }
            else
            {
                I = false;
            }
            if (Input.GetKey(KeyCode.O))
            {
                O = true;
            }
            else
            {
                O = false;
            }
            if (Input.GetKey(KeyCode.P))
            {
                P = true;
            }
            else
            {
                P = false;
            }
            if (Input.GetKey(KeyCode.A))
            {
                A = true;
            }
            else
            {
                A = false;
            }
            if (Input.GetKey(KeyCode.S))
            {
                S = true;
            }
            else
            {
                S = false;
            }
            if (Input.GetKey(KeyCode.D))
            {
                D = true;
            }
            else
            {
                D = false;
            }
            if (Input.GetKey(KeyCode.F))
            {
                F = true;
            }
            else
            {
                F = false;
            }
            if (Input.GetKey(KeyCode.G))
            {
                G = true;
            }
            else
            {
                G = false;
            }
            if (Input.GetKey(KeyCode.H))
            {
                H = true;
            }
            else
            {
                H = false;
            }
            if (Input.GetKey(KeyCode.J))
            {
                J = true;
            }
            else
            {
                J = false;
            }
            if (Input.GetKey(KeyCode.K))
            {
                K = true;
            }
            else
            {
                K = false;
            }
            if (Input.GetKey(KeyCode.L))
            {
                L = true;
            }
            else
            {
                L = false;
            }
            if (Input.GetKey(KeyCode.Z))
            {
                Z = true;
            }
            else
            {
                Z = false;
            }
            if (Input.GetKey(KeyCode.X))
            {
                X = true;
            }
            else
            {
                X = false;
            }
            if (Input.GetKey(KeyCode.C))
            {
                C = true;
            }
            else
            {
                C = false;
            }
            if (Input.GetKey(KeyCode.V))
            {
                V = true;
            }
            else
            {
                V = false;
            }
            if (Input.GetKey(KeyCode.B))
            {
                B = true;
            }
            else
            {
                B = false;
            }
            if (Input.GetKey(KeyCode.N))
            {
                N = true;
            }
            else
            {
                N = false;
            }
            if (Input.GetKey(KeyCode.M))
            {
                M = true;
            }
            else
            {
                M = false;
            }
            if (Input.GetKey(KeyCode.Alpha0))
            {
                Alpha0 = true;
            }
            else
            {
                Alpha0 = false;
            }
            if (Input.GetKey(KeyCode.Alpha1))
            {
                Alpha1 = true;
            }
            else
            {
                Alpha1 = false;
            }
            if (Input.GetKey(KeyCode.Alpha2))
            {
                Alpha2 = true;
            }
            else
            {
                Alpha2 = false;
            }
            if (Input.GetKey(KeyCode.Alpha3))
            {
                Alpha3 = true;
            }
            else
            {
                Alpha3 = false;
            }
            if (Input.GetKey(KeyCode.Alpha4))
            {
                Alpha4 = true;
            }
            else
            {
                Alpha4 = false;
            }
            if (Input.GetKey(KeyCode.Alpha5))
            {
                Alpha5 = true;
            }
            else
            {
                Alpha5 = false;
            }
            if (Input.GetKey(KeyCode.Alpha6))
            {
                Alpha6 = true;
            }
            else
            {
                Alpha6 = false;
            }
            if (Input.GetKey(KeyCode.Alpha7))
            {
                Alpha7 = true;
            }
            else
            {
                Alpha7 = false;
            }
            if (Input.GetKey(KeyCode.Alpha8))
            {
                Alpha8 = true;
            }
            else
            {
                Alpha8 = false;
            }
            if (Input.GetKey(KeyCode.Alpha9))
            {
                Alpha9 = true;
            }
            else
            {
                Alpha9 = false;
            }
            if (Input.GetKey(KeyCode.Backspace))
            {
                BackSpace = true;
            }
            else
            {
                BackSpace = false;
            }
            if (Input.GetKey(KeyCode.Space))
            {
                Space = true;
            }
            else
            {
                Space = false;
            }
            if (Input.GetKey(KeyCode.RightShift))
            {
                RightShift = true;
            }
            else
            {
                RightShift = false;
            }
            if (Input.GetKey(KeyCode.LeftShift))
            {
                LeftShift = true;
            }
            else
            {
                LeftShift = false;
            }
            if (Input.GetKey(KeyCode.RightControl))
            {
                RightCtrl = true;
            }
            else
            {
                RightCtrl = false;
            }
            if (Input.GetKey(KeyCode.LeftControl))
            {
                LeftCtrl = true;
            }
            else
            {
                LeftCtrl = false;
            }
            if (Input.GetKey(KeyCode.Tab))
            {
                Tab = true;
            }
            else
            {
                Tab = false;
            }
            if (Input.GetKey(KeyCode.Escape))
            {
                Escape = true;
            }
            else
            {
                Escape = false;
            }
            if (Input.GetKey(KeyCode.Return))
            {
                Enter = true;
            }
            else
            {
                Enter = false;
            }
            if (Input.GetKey(KeyCode.UpArrow))
            {
                UpArrow = true;
            }
            else
            {
                UpArrow = false;
            }
            if (Input.GetKey(KeyCode.DownArrow))
            {
                DownArrow = true;
            }
            else
            {
                DownArrow = false;
            }
            if (Input.GetKey(KeyCode.RightArrow))
            {
                RightArrow = true;
            }
            else
            {
                RightArrow = false;
            }
            if (Input.GetKey(KeyCode.LeftArrow))
            {
                LeftArrow = true;
            }
            else
            {
                LeftArrow = false;
            }

            if (Input.GetKeyDown(KeyCode.Q))
            {
                QD = true;
            }
            else
            {
                QD = false;
            }
            if (Input.GetKeyDown(KeyCode.W))
            {
                WD = true;
            }
            else
            {
                WD = false;
            }
            if (Input.GetKeyDown(KeyCode.E))
            {
                ED = true;
            }
            else
            {
                ED = false;
            }
            if (Input.GetKeyDown(KeyCode.R))
            {
                RD = true;
            }
            else
            {
                RD = false;
            }
            if (Input.GetKeyDown(KeyCode.T))
            {
                TD = true;
            }
            else
            {
                TD = false;
            }
            if (Input.GetKeyDown(KeyCode.Y))
            {
                YD = true;
            }
            else
            {
                YD = false;
            }
            if (Input.GetKeyDown(KeyCode.U))
            {
                UD = true;
            }
            else
            {
                UD = false;
            }
            if (Input.GetKeyDown(KeyCode.I))
            {
                ID = true;
            }
            else
            {
                ID = false;
            }
            if (Input.GetKeyDown(KeyCode.O))
            {
                OD = true;
            }
            else
            {
                OD = false;
            }
            if (Input.GetKeyDown(KeyCode.P))
            {
                PD = true;
            }
            else
            {
                PD = false;
            }
            if (Input.GetKeyDown(KeyCode.A))
            {
                AD = true;
            }
            else
            {
                AD = false;
            }
            if (Input.GetKeyDown(KeyCode.S))
            {
                SD = true;
            }
            else
            {
                SD = false;
            }
            if (Input.GetKeyDown(KeyCode.D))
            {
                DD = true;
            }
            else
            {
                DD = false;
            }
            if (Input.GetKeyDown(KeyCode.F))
            {
                FD = true;
            }
            else
            {
                FD = false;
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                GD = true;
            }
            else
            {
                GD = false;
            }
            if (Input.GetKeyDown(KeyCode.H))
            {
                HD = true;
            }
            else
            {
                HD = false;
            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                JD = true;
            }
            else
            {
                JD = false;
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                KD = true;
            }
            else
            {
                KD = false;
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                LD = true;
            }
            else
            {
                LD = false;
            }
            if (Input.GetKeyDown(KeyCode.Z))
            {
                ZD = true;
            }
            else
            {
                ZD = false;
            }
            if (Input.GetKeyDown(KeyCode.X))
            {
                XD = true;
            }
            else
            {
                XD = false;
            }
            if (Input.GetKeyDown(KeyCode.C))
            {
                CD = true;
            }
            else
            {
                CD = false;
            }
            if (Input.GetKeyDown(KeyCode.V))
            {
                VD = true;
            }
            else
            {
                VD = false;
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                BD = true;
            }
            else
            {
                BD = false;
            }
            if (Input.GetKeyDown(KeyCode.N))
            {
                ND = true;
            }
            else
            {
                ND = false;
            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                MD = true;
            }
            else
            {
                MD = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha0))
            {
                Alpha0D = true;
            }
            else
            {
                Alpha0D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha1))
            {
                Alpha1D = true;
            }
            else
            {
                Alpha1D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha2))
            {
                Alpha2D = true;
            }
            else
            {
                Alpha2D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha3))
            {
                Alpha3D = true;
            }
            else
            {
                Alpha3D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha4))
            {
                Alpha4D = true;
            }
            else
            {
                Alpha4D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha5))
            {
                Alpha5D = true;
            }
            else
            {
                Alpha5D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha6))
            {
                Alpha6D = true;
            }
            else
            {
                Alpha6D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha7))
            {
                Alpha7D = true;
            }
            else
            {
                Alpha7D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha8))
            {
                Alpha8D = true;
            }
            else
            {
                Alpha8D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha9))
            {
                Alpha9D = true;
            }
            else
            {
                Alpha9D = false;
            }
            if (Input.GetKeyDown(KeyCode.Backspace))
            {
                BackSpaceD = true;
            }
            else
            {
                BackSpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.Space))
            {
                SpaceD = true;
            }
            else
            {
                SpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightShift))
            {
                RightShiftD = true;
            }
            else
            {
                RightShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftShift))
            {
                LeftShiftD = true;
            }
            else
            {
                LeftShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightControl))
            {
                RightCtrlD = true;
            }
            else
            {
                RightCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftControl))
            {
                LeftCtrlD = true;
            }
            else
            {
                LeftCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.Tab))
            {
                TabD = true;
            }
            else
            {
                TabD = false;
            }
            if (Input.GetKeyDown(KeyCode.Escape))
            {
                EscapeD = true;
            }
            else
            {
                EscapeD = false;
            }
            if (Input.GetKeyDown(KeyCode.Return))
            {
                EnterD = true;
            }
            else
            {
                EnterD = false;
            }
            if (Input.GetKeyDown(KeyCode.UpArrow))
            {
                UpArrowD = true;
            }
            else
            {
                UpArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.DownArrow))
            {
                DownArrowD = true;
            }
            else
            {
                DownArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightArrow))
            {
                RightArrowD = true;
            }
            else
            {
                RightArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftArrow))
            {
                LeftArrowD = true;
            }
            else
            {
                LeftArrowD = false;
            }
        }




        if (Turn == "Player")
        {
            //CursorPlayer操作
            if (GameObject.FindWithTag("Cursor"))
            {
                //上移動
                if (WD & PositionCursorPlayer <= 55)
                {
                    PositionCursorPlayer += 8;
                }
                //下移動
                if (SD & PositionCursorPlayer >= 8)
                {
                    PositionCursorPlayer -= 8;
                }
                //右移動
                if (DD &
                    PositionCursorPlayer != 7 &
                    PositionCursorPlayer != 15 &
                    PositionCursorPlayer != 23 &
                    PositionCursorPlayer != 31 &
                    PositionCursorPlayer != 39 &
                    PositionCursorPlayer != 47 &
                    PositionCursorPlayer != 55 &
                    PositionCursorPlayer != 63)
                {
                    PositionCursorPlayer += 1;
                }
                //左移動
                if (AD &
                    PositionCursorPlayer != 0 &
                    PositionCursorPlayer != 8 &
                    PositionCursorPlayer != 16 &
                    PositionCursorPlayer != 24 &
                    PositionCursorPlayer != 32 &
                    PositionCursorPlayer != 40 &
                    PositionCursorPlayer != 48 &
                    PositionCursorPlayer != 56)
                {
                    PositionCursorPlayer -= 1;
                }

                GameObject.FindWithTag("Cursor").transform.position = Transform_Cursor.transform.position + new Vector3(PositionCursorPlayer % 8 + 1, 0, Mathf.FloorToInt(PositionCursorPlayer / 8) + 1);
            }

            if (SpaceD)
            {
                if (IntList_Color[PositionCursorPlayer] == 0)
                {
                    if (CanInvokeCounting_StoneEnemyReturned == true)
                    {
                        CanInvokeCounting_StoneEnemyReturned = false;

                        Invoke("Counting_StoneEnemyReturned", 0);
                    }
                }
                else
                {
                    //Debug.Log("そこには置けません。");
                }
            }
        }
        if (Turn == "Enemy")
        {
            //if (Alpha0D)
            //{
            //    if (CanInvokeFinding_PositionAroundStonePlayer == true)
            //    {
            //        CanInvokeFinding_PositionAroundStonePlayer = false;

            //        Invoke("Finding_PositionAroundStonePlayer", 0.5f);
            //    }
            //}
            if (CanInvokeFinding_PositionAroundStonePlayer == true)
            {
                CanInvokeFinding_PositionAroundStonePlayer = false;

                Invoke("Finding_PositionAroundStonePlayer", 1);
            }
        }






        if (Alpha1D)
        {

        }
        if (Alpha2D)
        {

        }
        if (Alpha3D)
        {

        }
        if (Alpha4D)
        {

        }
        if (Alpha5D)
        {

        }
        if (Alpha6D)
        {

        }
        if (Alpha7D)
        {

        }
        if (Alpha8D)
        {

        }
        if (Alpha9D)
        {

        }
    }


    void Counting_StoneEnemyReturned()
    {
        //Debug.Log("Counting_StoneEnemyReturned was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            while (IsFinishedUpperCounting_StoneEnemyReturned == false |
                   IsFinishedLowerCounting_StoneEnemyReturned == false |
                   IsFinishedRightCounting_StoneEnemyReturned == false |
                   IsFinishedLeftCounting_StoneEnemyReturned == false |
                   IsFinishedUpperRightCounting_StoneEnemyReturned == false |
                   IsFinishedUpperLeftCounting_StoneEnemyReturned == false |
                   IsFinishedLowerRightCounting_StoneEnemyReturned == false |
                   IsFinishedLowerLeftCounting_StoneEnemyReturned == false)
            {
                //上調査
                if (IsFinishedUpperCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer <= 55 &
                        PositionCursorPlayer + (8 * UpperDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer + (8 * UpperDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (8 * UpperDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                UpperCandidatePointPlayer = 0;
                                IsFinishedUpperCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                UpperDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                UpperCandidatePointPlayer = UpperDistanceFromPositionCursorPlayer - 1;
                                IsFinishedUpperCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperCandidatePointPlayer = 0;
                        IsFinishedUpperCounting_StoneEnemyReturned = true;
                    }
                }
                //下調査
                if (IsFinishedLowerCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer >= 8 &
                        PositionCursorPlayer - (8 * LowerDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer - (8 * LowerDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (8 * LowerDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                LowerCandidatePointPlayer = 0;
                                IsFinishedLowerCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                LowerDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                LowerCandidatePointPlayer = LowerDistanceFromPositionCursorPlayer - 1;
                                IsFinishedLowerCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerCandidatePointPlayer = 0;
                        IsFinishedLowerCounting_StoneEnemyReturned = true;
                    }
                }
                //右調査
                if (IsFinishedRightCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 7 &
                        PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer != 55 &
                        PositionCursorPlayer != 63 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 0 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 8 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 16 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 24 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 32 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 40 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 48 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) != 56 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (1 * RightDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                RightCandidatePointPlayer = 0;
                                IsFinishedRightCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                RightDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                RightCandidatePointPlayer = RightDistanceFromPositionCursorPlayer - 1;
                                IsFinishedRightCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        RightCandidatePointPlayer = 0;
                        IsFinishedRightCounting_StoneEnemyReturned = true;
                    }
                }
                //左調査
                if (IsFinishedLeftCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 0 &
                        PositionCursorPlayer != 8 &
                        PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer != 56 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 7 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 15 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 23 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 31 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 39 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 47 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 55 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) != 63 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (1 * LeftDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                LeftCandidatePointPlayer = 0;
                                IsFinishedLeftCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                LeftDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                LeftCandidatePointPlayer = LeftDistanceFromPositionCursorPlayer - 1;
                                IsFinishedLeftCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LeftCandidatePointPlayer = 0;
                        IsFinishedLeftCounting_StoneEnemyReturned = true;
                    }
                }
                //右上調査
                if (IsFinishedUpperRightCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 7 &
                        PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer <= 54 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 0 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 8 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 16 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 24 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 32 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 40 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 48 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) != 56 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (9 * UpperRightDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                UpperRightCandidatePointPlayer = 0;
                                IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                UpperRightDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                UpperRightCandidatePointPlayer = UpperRightDistanceFromPositionCursorPlayer - 1;
                                IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperRightCandidatePointPlayer = 0;
                        IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                    }
                }
                //左上調査
                if (IsFinishedUpperLeftCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 0 &
                        PositionCursorPlayer != 8 &
                        PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer <= 55 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 7 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 15 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 23 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 31 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 39 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 47 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 55 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) != 63 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                UpperLeftCandidatePointPlayer = 0;
                                IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                UpperLeftDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                UpperLeftCandidatePointPlayer = UpperLeftDistanceFromPositionCursorPlayer - 1;
                                IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperLeftCandidatePointPlayer = 0;
                        IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                    }
                }
                //右下調査
                if (IsFinishedLowerRightCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer != 55 &
                        PositionCursorPlayer != 63 &
                        PositionCursorPlayer >= 8 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 0 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 8 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 16 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 24 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 32 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 40 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 48 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) != 56 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (7 * LowerRightDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                LowerRightCandidatePointPlayer = 0;
                                IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                LowerRightDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                LowerRightCandidatePointPlayer = LowerRightDistanceFromPositionCursorPlayer - 1;
                                IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerRightCandidatePointPlayer = 0;
                        IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                    }
                }
                //左下調査
                if (IsFinishedLowerLeftCounting_StoneEnemyReturned == false)
                {
                    if (PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer != 56 &
                        PositionCursorPlayer >= 9 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 7 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 15 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 23 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 31 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 39 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 47 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 55 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) != 63 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) >= 0 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionCursorPlayer)])
                        {
                            case 0:
                                LowerLeftCandidatePointPlayer = 0;
                                IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                                break;
                            case 1:
                                LowerLeftDistanceFromPositionCursorPlayer += 1;
                                break;
                            case 2:
                                LowerLeftCandidatePointPlayer = LowerLeftDistanceFromPositionCursorPlayer - 1;
                                IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerLeftCandidatePointPlayer = 0;
                        IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                    }
                }
            }
        }

        if (UpperCandidatePointPlayer == 0 &
            LowerCandidatePointPlayer == 0 &
            RightCandidatePointPlayer == 0 &
            LeftCandidatePointPlayer == 0 &
            UpperRightCandidatePointPlayer == 0 &
            UpperLeftCandidatePointPlayer == 0 &
            LowerRightCandidatePointPlayer == 0 &
            LowerLeftCandidatePointPlayer == 0)
        {
            //Debug.Log("そこには置けません。");

            UpperDistanceFromPositionCursorPlayer = 1;
            LowerDistanceFromPositionCursorPlayer = 1;
            RightDistanceFromPositionCursorPlayer = 1;
            LeftDistanceFromPositionCursorPlayer = 1;
            UpperRightDistanceFromPositionCursorPlayer = 1;
            UpperLeftDistanceFromPositionCursorPlayer = 1;
            LowerRightDistanceFromPositionCursorPlayer = 1;
            LowerLeftDistanceFromPositionCursorPlayer = 1;

            UpperCandidatePointPlayer = 0;
            LowerCandidatePointPlayer = 0;
            RightCandidatePointPlayer = 0;
            LeftCandidatePointPlayer = 0;
            UpperRightCandidatePointPlayer = 0;
            UpperLeftCandidatePointPlayer = 0;
            LowerRightCandidatePointPlayer = 0;
            LowerLeftCandidatePointPlayer = 0;
            TotalCandidatePointPlayer = 0;

            IsFinishedUpperCounting_StoneEnemyReturned = false;
            IsFinishedLowerCounting_StoneEnemyReturned = false;
            IsFinishedRightCounting_StoneEnemyReturned = false;
            IsFinishedLeftCounting_StoneEnemyReturned = false;
            IsFinishedUpperRightCounting_StoneEnemyReturned = false;
            IsFinishedUpperLeftCounting_StoneEnemyReturned = false;
            IsFinishedLowerRightCounting_StoneEnemyReturned = false;
            IsFinishedLowerLeftCounting_StoneEnemyReturned = false;

            CanInvokeCounting_StoneEnemyReturned = true;
        }
        else
        {
            //Debug.Log("そこには置けます。");

            UpperDistanceFromPositionCursorPlayer = 1;
            LowerDistanceFromPositionCursorPlayer = 1;
            RightDistanceFromPositionCursorPlayer = 1;
            LeftDistanceFromPositionCursorPlayer = 1;
            UpperRightDistanceFromPositionCursorPlayer = 1;
            UpperLeftDistanceFromPositionCursorPlayer = 1;
            LowerRightDistanceFromPositionCursorPlayer = 1;
            LowerLeftDistanceFromPositionCursorPlayer = 1;

            IsFinishedUpperCounting_StoneEnemyReturned = false;
            IsFinishedLowerCounting_StoneEnemyReturned = false;
            IsFinishedRightCounting_StoneEnemyReturned = false;
            IsFinishedLeftCounting_StoneEnemyReturned = false;
            IsFinishedUpperRightCounting_StoneEnemyReturned = false;
            IsFinishedUpperLeftCounting_StoneEnemyReturned = false;
            IsFinishedLowerRightCounting_StoneEnemyReturned = false;
            IsFinishedLowerLeftCounting_StoneEnemyReturned = false;

            Invoke("Reset_ColorPlayer", 0);
        }
    }

    void Finding_PositionAroundStonePlayer()
    {
        //Debug.Log("Finding_PositionAroundStonePlayer was called");

        IntList_PositionAroundStonePlayer = new List<int> { };

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            for (int i = 0; i < IntList_PositionStoneWhite.Count; i++)
            {
                //上
                if (IntList_PositionStoneWhite[i] + 8 >= 0 &
                    IntList_PositionStoneWhite[i] + 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 8] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] + 8);
                    }
                }
                //下
                if (IntList_PositionStoneWhite[i] - 8 >= 0 &
                    IntList_PositionStoneWhite[i] - 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 8] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] - 8);
                    }
                }
                //右
                if (IntList_PositionStoneWhite[i] + 1 >= 0 &
                    IntList_PositionStoneWhite[i] + 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 1] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] + 1);
                    }
                }
                //左
                if (IntList_PositionStoneWhite[i] - 1 >= 0 &
                    IntList_PositionStoneWhite[i] - 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 1] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] - 1);
                    }
                }
                //右上
                if (IntList_PositionStoneWhite[i] + 9 >= 0 &
                    IntList_PositionStoneWhite[i] + 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 9] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] + 9);
                    }
                }
                //左上
                if (IntList_PositionStoneWhite[i] + 7 >= 0 &
                    IntList_PositionStoneWhite[i] + 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 7] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] + 7);
                    }
                }
                //右下
                if (IntList_PositionStoneWhite[i] - 7 >= 0 &
                    IntList_PositionStoneWhite[i] - 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 7] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] - 7);
                    }
                }
                //左下
                if (IntList_PositionStoneWhite[i] - 9 >= 0 &
                    IntList_PositionStoneWhite[i] - 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 9] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneWhite[i] - 9);
                    }
                }
            }
            IntList_PositionAroundStonePlayer = IntList_PositionAroundStonePlayer.Distinct().ToList();
            IntList_PositionAroundStonePlayer.Sort();
            IntList_PositionAroundStonePlayer.Reverse();
        }






        Invoke("Counting_StonePlayerReturned", 0);
    }

    void Counting_StonePlayerReturned()
    {
        //Debug.Log("Counting_StonePlayerReturned was called");

        IntList_PointEnemy = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            for (int i = 0; i < IntList_PositionAroundStonePlayer.Count; i++)
            {
                while (IsFinishedUpperCounting_StonePlayerReturned == false |
                       IsFinishedLowerCounting_StonePlayerReturned == false |
                       IsFinishedRightCounting_StonePlayerReturned == false |
                       IsFinishedLeftCounting_StonePlayerReturned == false |
                       IsFinishedUpperRightCounting_StonePlayerReturned == false |
                       IsFinishedUpperLeftCounting_StonePlayerReturned == false |
                       IsFinishedLowerRightCounting_StonePlayerReturned == false |
                       IsFinishedLowerLeftCounting_StonePlayerReturned == false)
                {
                    //上調査
                    if (IsFinishedUpperCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] <= 55 &
                            IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    UpperCandidatePointEnemy = 0;
                                    IsFinishedUpperCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    UpperDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    UpperCandidatePointEnemy = UpperDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedUpperCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperCandidatePointEnemy = 0;
                            IsFinishedUpperCounting_StonePlayerReturned = true;
                        }
                    }
                    //下調査
                    if (IsFinishedLowerCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] >= 8 &
                            IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    LowerCandidatePointEnemy = 0;
                                    IsFinishedLowerCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    LowerDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    LowerCandidatePointEnemy = LowerDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedLowerCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerCandidatePointEnemy = 0;
                            IsFinishedLowerCounting_StonePlayerReturned = true;
                        }
                    }
                    //右調査
                    if (IsFinishedRightCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 7 &
                            IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] != 55 &
                            IntList_PositionAroundStonePlayer[i] != 63 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 0 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 8 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 16 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 24 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 32 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 40 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 48 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) != 56 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    RightCandidatePointEnemy = 0;
                                    IsFinishedRightCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    RightDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    RightCandidatePointEnemy = RightDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedRightCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            RightCandidatePointEnemy = 0;
                            IsFinishedRightCounting_StonePlayerReturned = true;
                        }
                    }
                    //左調査
                    if (IsFinishedLeftCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 0 &
                            IntList_PositionAroundStonePlayer[i] != 8 &
                            IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] != 56 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 7 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 15 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 23 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 31 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 39 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 47 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 55 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) != 63 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    LeftCandidatePointEnemy = 0;
                                    IsFinishedLeftCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    LeftDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    LeftCandidatePointEnemy = LeftDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedLeftCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LeftCandidatePointEnemy = 0;
                            IsFinishedLeftCounting_StonePlayerReturned = true;
                        }
                    }
                    //右上調査
                    if (IsFinishedUpperRightCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 7 &
                            IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] <= 54 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 0 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 8 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 16 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 24 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 32 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 40 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 48 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 56 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    UpperRightCandidatePointEnemy = 0;
                                    IsFinishedUpperRightCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    UpperRightDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    UpperRightCandidatePointEnemy = UpperRightDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedUpperRightCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperRightCandidatePointEnemy = 0;
                            IsFinishedUpperRightCounting_StonePlayerReturned = true;
                        }
                    }
                    //左上調査
                    if (IsFinishedUpperLeftCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 0 &
                            IntList_PositionAroundStonePlayer[i] != 8 &
                            IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] <= 55 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 7 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 15 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 23 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 31 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 39 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 47 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 55 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 63 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    UpperLeftCandidatePointEnemy = 0;
                                    IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    UpperLeftDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    UpperLeftCandidatePointEnemy = UpperLeftDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperLeftCandidatePointEnemy = 0;
                            IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                        }
                    }
                    //右下調査
                    if (IsFinishedLowerRightCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] != 55 &
                            IntList_PositionAroundStonePlayer[i] != 63 &
                            IntList_PositionAroundStonePlayer[i] >= 8 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 0 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 8 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 16 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 24 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 32 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 40 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 48 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 56 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    LowerRightCandidatePointEnemy = 0;
                                    IsFinishedLowerRightCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    LowerRightDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    LowerRightCandidatePointEnemy = LowerRightDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedLowerRightCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerRightCandidatePointEnemy = 0;
                            IsFinishedLowerRightCounting_StonePlayerReturned = true;
                        }
                    }
                    //左下調査
                    if (IsFinishedLowerLeftCounting_StonePlayerReturned == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] != 56 &
                            IntList_PositionAroundStonePlayer[i] >= 9 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 7 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 15 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 23 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 31 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 39 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 47 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 55 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 63 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStonePlayer)])
                            {
                                case 0:
                                    LowerLeftCandidatePointEnemy = 0;
                                    IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                                    break;
                                case 2:
                                    LowerLeftDistanceFromPositionAroundStonePlayer += 1;
                                    break;
                                case 1:
                                    LowerLeftCandidatePointEnemy = LowerLeftDistanceFromPositionAroundStonePlayer - 1;
                                    IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerLeftCandidatePointEnemy = 0;
                            IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                        }
                    }

                    if (IsFinishedUpperCounting_StonePlayerReturned == true &
                        IsFinishedLowerCounting_StonePlayerReturned == true &
                        IsFinishedRightCounting_StonePlayerReturned == true &
                        IsFinishedLeftCounting_StonePlayerReturned == true &
                        IsFinishedUpperRightCounting_StonePlayerReturned == true &
                        IsFinishedUpperLeftCounting_StonePlayerReturned == true &
                        IsFinishedLowerRightCounting_StonePlayerReturned == true &
                        IsFinishedLowerLeftCounting_StonePlayerReturned == true)
                    {
                        IntList_PointEnemy[IntList_PositionAroundStonePlayer[i]] = UpperCandidatePointEnemy + LowerCandidatePointEnemy + RightCandidatePointEnemy + LeftCandidatePointEnemy + UpperRightCandidatePointEnemy + UpperLeftCandidatePointEnemy + LowerRightCandidatePointEnemy + LowerLeftCandidatePointEnemy;

                        UpperDistanceFromPositionAroundStonePlayer = 1;
                        LowerDistanceFromPositionAroundStonePlayer = 1;
                        RightDistanceFromPositionAroundStonePlayer = 1;
                        LeftDistanceFromPositionAroundStonePlayer = 1;
                        UpperRightDistanceFromPositionAroundStonePlayer = 1;
                        UpperLeftDistanceFromPositionAroundStonePlayer = 1;
                        LowerRightDistanceFromPositionAroundStonePlayer = 1;
                        LowerLeftDistanceFromPositionAroundStonePlayer = 1;

                        UpperCandidatePointEnemy = 0;
                        LowerCandidatePointEnemy = 0;
                        RightCandidatePointEnemy = 0;
                        LeftCandidatePointEnemy = 0;
                        UpperRightCandidatePointEnemy = 0;
                        UpperLeftCandidatePointEnemy = 0;
                        LowerRightCandidatePointEnemy = 0;
                        LowerLeftCandidatePointEnemy = 0;
                        TotalCandidatePointEnemy = 0;

                        IsFinishedUpperCounting_StonePlayerReturned = false;
                        IsFinishedLowerCounting_StonePlayerReturned = false;
                        IsFinishedRightCounting_StonePlayerReturned = false;
                        IsFinishedLeftCounting_StonePlayerReturned = false;
                        IsFinishedUpperRightCounting_StonePlayerReturned = false;
                        IsFinishedUpperLeftCounting_StonePlayerReturned = false;
                        IsFinishedLowerRightCounting_StonePlayerReturned = false;
                        IsFinishedLowerLeftCounting_StonePlayerReturned = false;

                        break;
                    }
                }
            }
        }

        //for (int i = 0; i < IntList_PointEnemy.Count; i++)
        //{
        //    Debug.Log(IntList_PointEnemy[i] + "  :  " + i);
        //}
        //Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");


        Invoke("Determination_PositonSetStoneEnemy", 0);
    }

    void Determination_PositonSetStoneEnemy()
    {
        //Debug.Log("Determination_PositonSetStoneEnemy was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            if (IntList_PointEnemy.All(value => value == 0) == true)
            {
                Debug.Log("相手AIは置ける場所がありません。");

                Turn = "Player";
                Invoke("Summoning_CursorPlayer", 0);
                CanInvokeFinding_PositionAroundStonePlayer = true;
            }
            else
            {
                IntList_PositionPointEnemy = new List<int> { };

                for (int i = 1; i < 8; i++)
                {
                    if (IntList_PointEnemy.All(value => value != i) == true)
                    {
                        continue;
                    }
                    else
                    {
                        int PositionPoint = IntList_PointEnemy.IndexOf(i, 0);
                        if (PositionPoint >= 0)
                        {
                            IntList_PositionPointEnemy.Add(PositionPoint);

                            while (PositionPoint >= 0)
                            {
                                PositionPoint = IntList_PointEnemy.IndexOf(i, PositionPoint + 1);

                                if (PositionPoint >= 0)
                                {
                                    IntList_PositionPointEnemy.Add(PositionPoint);
                                }
                            }
                        }

                        break;
                    }
                }

                //for (int i = 0; i < IntList_PositionPointEnemy.Count; i++)
                //{
                //    Debug.Log(IntList_PositionPointEnemy[i] + "  :  " + i);
                //}
                //Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

                abc = IntList_PositionPointEnemy[Mathf.FloorToInt(Random.Range(0, IntList_PositionPointEnemy.Count))];

                Invoke("Reset_ColorEnemy", 0);
            }
        }
    }

    void Finding_PositionAroundStoneEnemy()
    {
        //Debug.Log("Finding_PositionAroundStoneEnemy was called");

        IntList_PositionAroundStoneEnemy = new List<int> { };

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            for (int i = 0; i < IntList_PositionStoneBlack.Count; i++)
            {
                //上
                if (IntList_PositionStoneBlack[i] + 8 >= 0 &
                    IntList_PositionStoneBlack[i] + 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 8] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] + 8);
                    }
                }
                //下
                if (IntList_PositionStoneBlack[i] - 8 >= 0 &
                    IntList_PositionStoneBlack[i] - 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 8] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] - 8);
                    }
                }
                //右
                if (IntList_PositionStoneBlack[i] + 1 >= 0 &
                    IntList_PositionStoneBlack[i] + 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 1] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] + 1);
                    }
                }
                //左
                if (IntList_PositionStoneBlack[i] - 1 >= 0 &
                    IntList_PositionStoneBlack[i] - 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 1] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] - 1);
                    }
                }
                //右上
                if (IntList_PositionStoneBlack[i] + 9 >= 0 &
                    IntList_PositionStoneBlack[i] + 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 9] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] + 9);
                    }
                }
                //左上
                if (IntList_PositionStoneBlack[i] + 7 >= 0 &
                    IntList_PositionStoneBlack[i] + 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 7] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] + 7);
                    }
                }
                //右下
                if (IntList_PositionStoneBlack[i] - 7 >= 0 &
                    IntList_PositionStoneBlack[i] - 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 7] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] - 7);
                    }
                }
                //左下
                if (IntList_PositionStoneBlack[i] - 9 >= 0 &
                    IntList_PositionStoneBlack[i] - 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 9] == 0)
                    {
                        IntList_PositionAroundStoneEnemy.Add(IntList_PositionStoneBlack[i] - 9);
                    }
                }
            }
            IntList_PositionAroundStoneEnemy = IntList_PositionAroundStoneEnemy.Distinct().ToList();
            IntList_PositionAroundStoneEnemy.Sort();
            IntList_PositionAroundStoneEnemy.Reverse();
        }

        Debug.Log("IntList_PositionAroundStoneEnemy");
        for (int i = 0; i < IntList_PositionAroundStoneEnemy.Count; i++)
        {
            Debug.Log(IntList_PositionAroundStoneEnemy[i] + "  :  " + i);
        }
        Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

        Invoke("aaa", 0);
    }

    void aaa()
    {
        //Debug.Log("aaa was called");

        IntList_PointPlayer = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            for (int i = 0; i < IntList_PositionAroundStoneEnemy.Count; i++)
            {
                while (IsFinishedUpperCounting_StoneEnemyReturned == false |
                       IsFinishedLowerCounting_StoneEnemyReturned == false |
                       IsFinishedRightCounting_StoneEnemyReturned == false |
                       IsFinishedLeftCounting_StoneEnemyReturned == false |
                       IsFinishedUpperRightCounting_StoneEnemyReturned == false |
                       IsFinishedUpperLeftCounting_StoneEnemyReturned == false |
                       IsFinishedLowerRightCounting_StoneEnemyReturned == false |
                       IsFinishedLowerLeftCounting_StoneEnemyReturned == false)
                {
                    //上調査
                    if (IsFinishedUpperCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] <= 55 &
                            IntList_PositionAroundStoneEnemy[i] + (8 * UpperDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] + (8 * UpperDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] + (8 * UpperDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    UpperCandidatePointPlayer = 0;
                                    IsFinishedUpperCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    UpperDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    UpperCandidatePointPlayer = UpperDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedUpperCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperCandidatePointPlayer = 0;
                            IsFinishedUpperCounting_StoneEnemyReturned = true;
                        }
                    }
                    //下調査
                    if (IsFinishedLowerCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] >= 8 &
                            IntList_PositionAroundStoneEnemy[i] - (8 * LowerDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] - (8 * LowerDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] - (8 * LowerDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    LowerCandidatePointPlayer = 0;
                                    IsFinishedLowerCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    LowerDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    LowerCandidatePointPlayer = LowerDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedLowerCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerCandidatePointPlayer = 0;
                            IsFinishedLowerCounting_StoneEnemyReturned = true;
                        }
                    }
                    //右調査
                    if (IsFinishedRightCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 7 &
                            IntList_PositionAroundStoneEnemy[i] != 15 &
                            IntList_PositionAroundStoneEnemy[i] != 23 &
                            IntList_PositionAroundStoneEnemy[i] != 31 &
                            IntList_PositionAroundStoneEnemy[i] != 39 &
                            IntList_PositionAroundStoneEnemy[i] != 47 &
                            IntList_PositionAroundStoneEnemy[i] != 55 &
                            IntList_PositionAroundStoneEnemy[i] != 63 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 0 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 8 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 16 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 24 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 32 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 40 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 48 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) != 56 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] + (1 * RightDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    RightCandidatePointPlayer = 0;
                                    IsFinishedRightCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    RightDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    RightCandidatePointPlayer = RightDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedRightCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            RightCandidatePointPlayer = 0;
                            IsFinishedRightCounting_StoneEnemyReturned = true;
                        }
                    }
                    //左調査
                    if (IsFinishedLeftCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 0 &
                            IntList_PositionAroundStoneEnemy[i] != 8 &
                            IntList_PositionAroundStoneEnemy[i] != 16 &
                            IntList_PositionAroundStoneEnemy[i] != 24 &
                            IntList_PositionAroundStoneEnemy[i] != 32 &
                            IntList_PositionAroundStoneEnemy[i] != 40 &
                            IntList_PositionAroundStoneEnemy[i] != 48 &
                            IntList_PositionAroundStoneEnemy[i] != 56 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 7 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 15 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 23 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 31 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 39 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 47 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 55 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) != 63 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] - (1 * LeftDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    LeftCandidatePointPlayer = 0;
                                    IsFinishedLeftCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    LeftDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    LeftCandidatePointPlayer = LeftDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedLeftCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LeftCandidatePointPlayer = 0;
                            IsFinishedLeftCounting_StoneEnemyReturned = true;
                        }
                    }
                    //右上調査
                    if (IsFinishedUpperRightCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 7 &
                            IntList_PositionAroundStoneEnemy[i] != 15 &
                            IntList_PositionAroundStoneEnemy[i] != 23 &
                            IntList_PositionAroundStoneEnemy[i] != 31 &
                            IntList_PositionAroundStoneEnemy[i] != 39 &
                            IntList_PositionAroundStoneEnemy[i] != 47 &
                            IntList_PositionAroundStoneEnemy[i] <= 54 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 0 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 8 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 16 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 24 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 32 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 40 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 48 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) != 56 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] + (9 * UpperRightDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    UpperRightCandidatePointPlayer = 0;
                                    IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    UpperRightDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    UpperRightCandidatePointPlayer = UpperRightDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperRightCandidatePointPlayer = 0;
                            IsFinishedUpperRightCounting_StoneEnemyReturned = true;
                        }
                    }
                    //左上調査
                    if (IsFinishedUpperLeftCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 0 &
                            IntList_PositionAroundStoneEnemy[i] != 8 &
                            IntList_PositionAroundStoneEnemy[i] != 16 &
                            IntList_PositionAroundStoneEnemy[i] != 24 &
                            IntList_PositionAroundStoneEnemy[i] != 32 &
                            IntList_PositionAroundStoneEnemy[i] != 40 &
                            IntList_PositionAroundStoneEnemy[i] != 48 &
                            IntList_PositionAroundStoneEnemy[i] <= 55 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 7 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 15 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 23 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 31 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 39 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 47 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 55 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) != 63 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] + (7 * UpperLeftDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    UpperLeftCandidatePointPlayer = 0;
                                    IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    UpperLeftDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    UpperLeftCandidatePointPlayer = UpperLeftDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperLeftCandidatePointPlayer = 0;
                            IsFinishedUpperLeftCounting_StoneEnemyReturned = true;
                        }
                    }
                    //右下調査
                    if (IsFinishedLowerRightCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 15 &
                            IntList_PositionAroundStoneEnemy[i] != 23 &
                            IntList_PositionAroundStoneEnemy[i] != 31 &
                            IntList_PositionAroundStoneEnemy[i] != 39 &
                            IntList_PositionAroundStoneEnemy[i] != 47 &
                            IntList_PositionAroundStoneEnemy[i] != 55 &
                            IntList_PositionAroundStoneEnemy[i] != 63 &
                            IntList_PositionAroundStoneEnemy[i] >= 8 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 0 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 8 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 15 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 23 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 31 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 39 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 47 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 55 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) != 63 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] - (7 * LowerRightDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    LowerRightCandidatePointPlayer = 0;
                                    IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    LowerRightDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    LowerRightCandidatePointPlayer = LowerRightDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerRightCandidatePointPlayer = 0;
                            IsFinishedLowerRightCounting_StoneEnemyReturned = true;
                        }
                    }
                    //左下調査
                    if (IsFinishedLowerLeftCounting_StoneEnemyReturned == false)
                    {
                        if (IntList_PositionAroundStoneEnemy[i] != 16 &
                            IntList_PositionAroundStoneEnemy[i] != 24 &
                            IntList_PositionAroundStoneEnemy[i] != 32 &
                            IntList_PositionAroundStoneEnemy[i] != 40 &
                            IntList_PositionAroundStoneEnemy[i] != 48 &
                            IntList_PositionAroundStoneEnemy[i] != 56 &
                            IntList_PositionAroundStoneEnemy[i] >= 9 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 7 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 15 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 23 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 31 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 39 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 47 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 55 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) != 63 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) >= 0 &
                            IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneEnemy[i] - (9 * LowerLeftDistanceFromPositionAroundStoneEnemy)])
                            {
                                case 0:
                                    LowerLeftCandidatePointPlayer = 0;
                                    IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                                    break;
                                case 1:
                                    LowerLeftDistanceFromPositionAroundStoneEnemy += 1;
                                    break;
                                case 2:
                                    LowerLeftCandidatePointPlayer = LowerLeftDistanceFromPositionAroundStoneEnemy - 1;
                                    IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerLeftCandidatePointPlayer = 0;
                            IsFinishedLowerLeftCounting_StoneEnemyReturned = true;
                        }
                    }


                    if (IsFinishedUpperCounting_StoneEnemyReturned == true &
                        IsFinishedLowerCounting_StoneEnemyReturned == true &
                        IsFinishedRightCounting_StoneEnemyReturned == true &
                        IsFinishedLeftCounting_StoneEnemyReturned == true &
                        IsFinishedUpperRightCounting_StoneEnemyReturned == true &
                        IsFinishedUpperLeftCounting_StoneEnemyReturned == true &
                        IsFinishedLowerRightCounting_StoneEnemyReturned == true &
                        IsFinishedLowerLeftCounting_StoneEnemyReturned == true)
                    {
                        IntList_PointPlayer[IntList_PositionAroundStoneEnemy[i]] = UpperCandidatePointPlayer + LowerCandidatePointPlayer + RightCandidatePointPlayer + LeftCandidatePointPlayer + UpperRightCandidatePointPlayer + UpperLeftCandidatePointPlayer + LowerRightCandidatePointPlayer + LowerLeftCandidatePointPlayer;

                        UpperDistanceFromPositionAroundStoneEnemy = 1;
                        LowerDistanceFromPositionAroundStoneEnemy = 1;
                        RightDistanceFromPositionAroundStoneEnemy = 1;
                        LeftDistanceFromPositionAroundStoneEnemy = 1;
                        UpperRightDistanceFromPositionAroundStoneEnemy = 1;
                        UpperLeftDistanceFromPositionAroundStoneEnemy = 1;
                        LowerRightDistanceFromPositionAroundStoneEnemy = 1;
                        LowerLeftDistanceFromPositionAroundStoneEnemy = 1;

                        UpperCandidatePointPlayer = 0;
                        LowerCandidatePointPlayer = 0;
                        RightCandidatePointPlayer = 0;
                        LeftCandidatePointPlayer = 0;
                        UpperRightCandidatePointPlayer = 0;
                        UpperLeftCandidatePointPlayer = 0;
                        LowerRightCandidatePointPlayer = 0;
                        LowerLeftCandidatePointPlayer = 0;
                        TotalCandidatePointPlayer = 0;

                        IsFinishedUpperCounting_StoneEnemyReturned = false;
                        IsFinishedLowerCounting_StoneEnemyReturned = false;
                        IsFinishedRightCounting_StoneEnemyReturned = false;
                        IsFinishedLeftCounting_StoneEnemyReturned = false;
                        IsFinishedUpperRightCounting_StoneEnemyReturned = false;
                        IsFinishedUpperLeftCounting_StoneEnemyReturned = false;
                        IsFinishedLowerRightCounting_StoneEnemyReturned = false;
                        IsFinishedLowerLeftCounting_StoneEnemyReturned = false;

                        break;
                    }
                }
            }
        }

        Debug.Log("IntList_PointPlayer");
        for (int i = 0; i < IntList_PointPlayer.Count; i++)
        {
            Debug.Log(IntList_PointPlayer[i] + "  :  " + i);
        }
        Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

        Invoke("Investigatation_CanChangingTurn", 0);
    }

    void Investigatation_CanChangingTurn()
    {
        //Debug.Log("Investigatation_CanChangingTurn was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            if (IntList_PointPlayer.All(value => value == 0))
            {
                Debug.Log("プレイヤーは置ける場所がありません。");
                Turn = "Enemy";
                CanInvokeFinding_PositionAroundStonePlayer = true;
            }
            else
            {
                Turn = "Player";
                Invoke("Summoning_CursorPlayer", 0);
                CanInvokeFinding_PositionAroundStonePlayer = true;
            }
        }
    }





































    //ColorPlayerリセット
    void Reset_ColorPlayer()
    {
        //Debug.Log("Reset_ColorPlayer was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            IntList_Color[PositionCursorPlayer] = 2;

            for (int i = 1; i <= UpperCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (8 * i)] = 2;
            }
            for (int i = 1; i <= LowerCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (8 * i)] = 2;
            }
            for (int i = 1; i <= RightCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (1 * i)] = 2;
            }
            for (int i = 1; i <= LeftCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (1 * i)] = 2;
            }
            for (int i = 1; i <= UpperRightCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (9 * i)] = 2;
            }
            for (int i = 1; i <= UpperLeftCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (7 * i)] = 2;
            }
            for (int i = 1; i <= LowerRightCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (7 * i)] = 2;
            }
            for (int i = 1; i <= LowerLeftCandidatePointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (9 * i)] = 2;
            }
        }

        UpperCandidatePointPlayer = 0;
        LowerCandidatePointPlayer = 0;
        RightCandidatePointPlayer = 0;
        LeftCandidatePointPlayer = 0;
        UpperRightCandidatePointPlayer = 0;
        UpperLeftCandidatePointPlayer = 0;
        LowerRightCandidatePointPlayer = 0;
        LowerLeftCandidatePointPlayer = 0;
        TotalCandidatePointPlayer = 0;

        Invoke("Destruction_Cursor", 0);
        Invoke("Destruction_StonePlayer", 0);
        Invoke("Destruction_StoneEnemy", 0);
        Invoke("Summoning_StonePlayer", 0);
        Invoke("Summoning_StoneEnemy", 0);

        Turn = "Enemy";
        CanInvokeCounting_StoneEnemyReturned = true;
    }
    //ColorEnemyリセット
    void Reset_ColorEnemy()
    {
        //Debug.Log("Reset_ColorEnemy was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            IntList_Color[abc] = 1;

            while (IsFinishedUpperCounting_StonePlayerReturned == false |
                IsFinishedLowerCounting_StonePlayerReturned == false |
                IsFinishedRightCounting_StonePlayerReturned == false |
                IsFinishedLeftCounting_StonePlayerReturned == false |
                IsFinishedUpperRightCounting_StonePlayerReturned == false |
                IsFinishedUpperLeftCounting_StonePlayerReturned == false |
                IsFinishedLowerRightCounting_StonePlayerReturned == false |
                IsFinishedLowerLeftCounting_StonePlayerReturned == false)
            {
                //上調査
                if (IsFinishedUpperCounting_StonePlayerReturned == false)
                {
                    if (abc <= 55 &
                        abc + (8 * UpperDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc + (8 * UpperDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc + (8 * UpperDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperCandidatePointEnemy = 0;
                                IsFinishedUpperCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                UpperDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperCandidatePointEnemy = UpperDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedUpperCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperCandidatePointEnemy = 0;
                        IsFinishedUpperCounting_StonePlayerReturned = true;
                    }
                }
                //下調査
                if (IsFinishedLowerCounting_StonePlayerReturned == false)
                {
                    if (abc >= 8 &
                        abc - (8 * LowerDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc - (8 * LowerDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc - (8 * LowerDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerCandidatePointEnemy = 0;
                                IsFinishedLowerCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                LowerDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerCandidatePointEnemy = LowerDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedLowerCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerCandidatePointEnemy = 0;
                        IsFinishedLowerCounting_StonePlayerReturned = true;
                    }
                }
                //右調査
                if (IsFinishedRightCounting_StonePlayerReturned == false)
                {
                    if (abc != 7 &
                        abc != 15 &
                        abc != 23 &
                        abc != 31 &
                        abc != 39 &
                        abc != 47 &
                        abc != 55 &
                        abc != 63 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 0 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 8 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 16 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 24 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 32 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 40 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 48 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) != 56 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc + (1 * RightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc + (1 * RightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                RightCandidatePointEnemy = 0;
                                IsFinishedRightCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                RightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                RightCandidatePointEnemy = RightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedRightCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        RightCandidatePointEnemy = 0;
                        IsFinishedRightCounting_StonePlayerReturned = true;
                    }
                }
                //左調査
                if (IsFinishedLeftCounting_StonePlayerReturned == false)
                {
                    if (abc != 0 &
                        abc != 8 &
                        abc != 16 &
                        abc != 24 &
                        abc != 32 &
                        abc != 40 &
                        abc != 48 &
                        abc != 56 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 7 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 15 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 23 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 31 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 39 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 47 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 55 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) != 63 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc - (1 * LeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc - (1 * LeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LeftCandidatePointEnemy = 0;
                                IsFinishedLeftCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                LeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LeftCandidatePointEnemy = LeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedLeftCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LeftCandidatePointEnemy = 0;
                        IsFinishedLeftCounting_StonePlayerReturned = true;
                    }
                }
                //右上調査
                if (IsFinishedUpperRightCounting_StonePlayerReturned == false)
                {
                    if (abc != 7 &
                        abc != 15 &
                        abc != 23 &
                        abc != 31 &
                        abc != 39 &
                        abc != 47 &
                        abc <= 54 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 0 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 8 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 16 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 24 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 32 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 40 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 48 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 56 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc + (9 * UpperRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperRightCandidatePointEnemy = 0;
                                IsFinishedUpperRightCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                UpperRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperRightCandidatePointEnemy = UpperRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedUpperRightCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperRightCandidatePointEnemy = 0;
                        IsFinishedUpperRightCounting_StonePlayerReturned = true;
                    }
                }
                //左上調査
                if (IsFinishedUpperLeftCounting_StonePlayerReturned == false)
                {
                    if (abc != 0 &
                        abc != 8 &
                        abc != 16 &
                        abc != 24 &
                        abc != 32 &
                        abc != 40 &
                        abc != 48 &
                        abc <= 55 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc + (7 * UpperLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperLeftCandidatePointEnemy = 0;
                                IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                UpperLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperLeftCandidatePointEnemy = UpperLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperLeftCandidatePointEnemy = 0;
                        IsFinishedUpperLeftCounting_StonePlayerReturned = true;
                    }
                }
                //右下調査
                if (IsFinishedLowerRightCounting_StonePlayerReturned == false)
                {
                    if (abc != 15 &
                        abc != 23 &
                        abc != 31 &
                        abc != 39 &
                        abc != 47 &
                        abc != 55 &
                        abc != 63 &
                        abc >= 8 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 0 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 8 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 16 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 24 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 32 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 40 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 48 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 56 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc - (7 * LowerRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerRightCandidatePointEnemy = 0;
                                IsFinishedLowerRightCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                LowerRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerRightCandidatePointEnemy = LowerRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedLowerRightCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerRightCandidatePointEnemy = 0;
                        IsFinishedLowerRightCounting_StonePlayerReturned = true;
                    }
                }
                //左下調査
                if (IsFinishedLowerLeftCounting_StonePlayerReturned == false)
                {
                    if (abc != 16 &
                        abc != 24 &
                        abc != 32 &
                        abc != 40 &
                        abc != 48 &
                        abc != 56 &
                        abc >= 9 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[abc - (9 * LowerLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerLeftCandidatePointEnemy = 0;
                                IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                                break;
                            case 2:
                                LowerLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerLeftCandidatePointEnemy = LowerLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerLeftCandidatePointEnemy = 0;
                        IsFinishedLowerLeftCounting_StonePlayerReturned = true;
                    }
                }

                if (IsFinishedUpperCounting_StonePlayerReturned == true &
                        IsFinishedLowerCounting_StonePlayerReturned == true &
                        IsFinishedRightCounting_StonePlayerReturned == true &
                        IsFinishedLeftCounting_StonePlayerReturned == true &
                        IsFinishedUpperRightCounting_StonePlayerReturned == true &
                        IsFinishedUpperLeftCounting_StonePlayerReturned == true &
                        IsFinishedLowerRightCounting_StonePlayerReturned == true &
                        IsFinishedLowerLeftCounting_StonePlayerReturned == true)
                {

                    UpperDistanceFromPositionAroundStonePlayer = 1;
                    LowerDistanceFromPositionAroundStonePlayer = 1;
                    RightDistanceFromPositionAroundStonePlayer = 1;
                    LeftDistanceFromPositionAroundStonePlayer = 1;
                    UpperRightDistanceFromPositionAroundStonePlayer = 1;
                    UpperLeftDistanceFromPositionAroundStonePlayer = 1;
                    LowerRightDistanceFromPositionAroundStonePlayer = 1;
                    LowerLeftDistanceFromPositionAroundStonePlayer = 1;

                    IsFinishedUpperCounting_StonePlayerReturned = false;
                    IsFinishedLowerCounting_StonePlayerReturned = false;
                    IsFinishedRightCounting_StonePlayerReturned = false;
                    IsFinishedLeftCounting_StonePlayerReturned = false;
                    IsFinishedUpperRightCounting_StonePlayerReturned = false;
                    IsFinishedUpperLeftCounting_StonePlayerReturned = false;
                    IsFinishedLowerRightCounting_StonePlayerReturned = false;
                    IsFinishedLowerLeftCounting_StonePlayerReturned = false;

                    break;
                }
            }

            for (int i = 1; i <= UpperCandidatePointEnemy; i++)
            {
                IntList_Color[abc + (8 * i)] = 1;
            }
            for (int i = 1; i <= LowerCandidatePointEnemy; i++)
            {
                IntList_Color[abc - (8 * i)] = 1;
            }
            for (int i = 1; i <= RightCandidatePointEnemy; i++)
            {
                IntList_Color[abc + (1 * i)] = 1;
            }
            for (int i = 1; i <= LeftCandidatePointEnemy; i++)
            {
                IntList_Color[abc - (1 * i)] = 1;
            }
            for (int i = 1; i <= UpperRightCandidatePointEnemy; i++)
            {
                IntList_Color[abc + (9 * i)] = 1;
            }
            for (int i = 1; i <= UpperLeftCandidatePointEnemy; i++)
            {
                IntList_Color[abc + (7 * i)] = 1;
            }
            for (int i = 1; i <= LowerRightCandidatePointEnemy; i++)
            {
                IntList_Color[abc - (7 * i)] = 1;
            }
            for (int i = 1; i <= LowerLeftCandidatePointEnemy; i++)
            {
                IntList_Color[abc - (9 * i)] = 1;
            }

            UpperCandidatePointEnemy = 0;
            LowerCandidatePointEnemy = 0;
            RightCandidatePointEnemy = 0;
            LeftCandidatePointEnemy = 0;
            UpperRightCandidatePointEnemy = 0;
            UpperLeftCandidatePointEnemy = 0;
            LowerRightCandidatePointEnemy = 0;
            LowerLeftCandidatePointEnemy = 0;
            TotalCandidatePointEnemy = 0;

            Invoke("Destruction_StonePlayer", 0);
            Invoke("Destruction_StoneEnemy", 0);
            Invoke("Summoning_StonePlayer", 0);
            Invoke("Summoning_StoneEnemy", 0);

            Invoke("Finding_PositionAroundStoneEnemy", 0);
        }
    }





    //CursorPlayer生成
    void Summoning_CursorPlayer()
    {
        //Debug.Log("Summoning_CursorPlayer was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            GameObject GameObject_CursorWhite = Instantiate(CursorWhite) as GameObject;
            GameObject_CursorWhite.name = "CursorPlayer";
            GameObject_CursorWhite.tag = "Cursor";
            GameObject_CursorWhite.transform.position = Transform_Cursor.transform.position + new Vector3(PositionCursorPlayer % 8 + 1, 0, Mathf.FloorToInt(PositionCursorPlayer / 8) + 1);
        }
    }
    //StonePlayer生成
    void Summoning_StonePlayer()
    {
        //Debug.Log("Summoning_StonePlayer was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            IntList_PositionStoneWhite = new List<int> { };

            int PositionStoneWhite = IntList_Color.IndexOf(2,0);

            if (PositionStoneWhite >= 0)
            {
                IntList_PositionStoneWhite.Add(PositionStoneWhite);

                while (PositionStoneWhite >= 0)
                {
                    PositionStoneWhite = IntList_Color.IndexOf(2, PositionStoneWhite + 1);

                    if (PositionStoneWhite >= 0)
                    {
                        IntList_PositionStoneWhite.Add(PositionStoneWhite);
                    }
                }
            }

            for (int i = 0; i < IntList_PositionStoneWhite.Count; i++)
            {
                GameObject GameObject_StoneWhite = Instantiate(StoneWhite) as GameObject;
                GameObject_StoneWhite.name = "StonePlayer";
                GameObject_StoneWhite.tag = "StonePlayer";
                GameObject_StoneWhite.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneWhite[i] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneWhite[i] / 8) + 1);
            }
        }
    }
    //StoneEnemy生成
    void Summoning_StoneEnemy()
    {
        //Debug.Log("Summoning_StoneEnemy was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {
            IntList_PositionStoneBlack = new List<int> { };



            int PositionStoneBlack = IntList_Color.IndexOf(1, 0);
            if (PositionStoneBlack >= 0)
            {
                IntList_PositionStoneBlack.Add(PositionStoneBlack);

                while (PositionStoneBlack >= 0)
                {
                    PositionStoneBlack = IntList_Color.IndexOf(1, PositionStoneBlack + 1);

                    if (PositionStoneBlack >= 0)
                    {
                        IntList_PositionStoneBlack.Add(PositionStoneBlack);
                    }
                }
            }



            for (int i = 0; i < IntList_PositionStoneBlack.Count; i++)
            {
                //Debug.Log(IntList_PositionStoneWhite[a]);

                GameObject GameObject_StoneBlack = Instantiate(StoneBlack) as GameObject;
                GameObject_StoneBlack.name = "StoneEnemy";
                GameObject_StoneBlack.tag = "StoneEnemy";
                GameObject_StoneBlack.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneBlack[i] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneBlack[i] / 8) + 1);
            }
        }
    }



    //Cursor消去
    void Destruction_Cursor()
    {
        //Debug.Log("Destruction_Cursor was called");

        Destroy(GameObject.FindWithTag("Cursor"));
    }
    //StonePlayer消去
    void Destruction_StonePlayer()
    {
        //Debug.Log("Destruction_StonePlayer was called");

        GameObject[] GameObject_StonePlayers = GameObject.FindGameObjectsWithTag("StonePlayer");
        foreach (GameObject GameObject_OneOfStonePlayers in GameObject_StonePlayers)
        {
            Destroy(GameObject_OneOfStonePlayers);
        }
    }
    //StoneEnemy消去
    void Destruction_StoneEnemy()
    {
        //Debug.Log("Destruction_StoneEnemy was called");

        GameObject[] GameObject_StoneEnemys = GameObject.FindGameObjectsWithTag("StoneEnemy");
        foreach (GameObject GameObject_OneOfStoneEnemys in GameObject_StoneEnemys)
        {
            Destroy(GameObject_OneOfStoneEnemys);
        }
    }




















}


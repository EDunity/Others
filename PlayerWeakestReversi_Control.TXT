using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class PlayerWeakestReversi_Control : MonoBehaviour
{
    private GameObject MainCameraJointWeakestReversi;

    private GameObject CursorBlack;
    private GameObject CursorWhite;
    private GameObject StoneBlack;
    private GameObject StoneWhite;

    private GameObject Transform_Cursor;
    private GameObject Transform_Stone;

    private List<int> IntList_Color = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
    private List<int> IntList_PointPlayer = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_PointAI = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    private List<int> IntList_PositionStoneBlack = new List<int> { 27, 36 };
    private List<int> IntList_PositionStoneWhite = new List<int> { 28, 35 };
    private List<int> IntList_PositionAroundStonePlayer = new List<int> { };
    private List<int> IntList_PositionAroundStoneAI = new List<int> { };
    private List<int> IntList_PositionPointPlayer = new List<int> { };
    private List<int> IntList_PositionPointAI = new List<int> { };

    private int PositionCursorPlayer = 0;
    private int PositionCursorAI = 0;

    private int UpperDistanceFromPositionAroundStoneAI = 1;
    private int LowerDistanceFromPositionAroundStoneAI = 1;
    private int RightDistanceFromPositionAroundStoneAI = 1;
    private int LeftDistanceFromPositionAroundStoneAI = 1;
    private int UpperRightDistanceFromPositionAroundStoneAI = 1;
    private int UpperLeftDistanceFromPositionAroundStoneAI = 1;
    private int LowerRightDistanceFromPositionAroundStoneAI = 1;
    private int LowerLeftDistanceFromPositionAroundStoneAI = 1;

    private int UpperDistanceFromPositionAroundStonePlayer = 1;
    private int LowerDistanceFromPositionAroundStonePlayer = 1;
    private int RightDistanceFromPositionAroundStonePlayer = 1;
    private int LeftDistanceFromPositionAroundStonePlayer = 1;
    private int UpperRightDistanceFromPositionAroundStonePlayer = 1;
    private int UpperLeftDistanceFromPositionAroundStonePlayer = 1;
    private int LowerRightDistanceFromPositionAroundStonePlayer = 1;
    private int LowerLeftDistanceFromPositionAroundStonePlayer = 1;

    private int UpperPointPlayer = 0;
    private int LowerPointPlayer = 0;
    private int RightPointPlayer = 0;
    private int LeftPointPlayer = 0;
    private int UpperRightPointPlayer = 0;
    private int UpperLeftPointPlayer = 0;
    private int LowerRightPointPlayer = 0;
    private int LowerLeftPointPlayer = 0;

    private int UpperPointAI = 0;
    private int LowerPointAI = 0;
    private int RightPointAI = 0;
    private int LeftPointAI = 0;
    private int UpperRightPointAI = 0;
    private int UpperLeftPointAI = 0;
    private int LowerRightPointAI = 0;
    private int LowerLeftPointAI = 0;

    private int abc;

    private string PlayerColor = "Black";
    private string Turn = "Player";

    private bool CanInvokePointPlayer = true;
    private bool CanInvokeReset_ColorPlayer = false;
    private bool CanInvokeFinding_PositionAroundStonePlayer = true;
    private bool CanInvokeDisplaying_Result = true;

    private bool IsFinishedCountingUpperPointPlayer = false;
    private bool IsFinishedCountingLowerPointPlayer = false;
    private bool IsFinishedCountingRightPointPlayer = false;
    private bool IsFinishedCountingLeftPointPlayer = false;
    private bool IsFinishedCountingUpperRightPointPlayer = false;
    private bool IsFinishedCountingUpperLeftPointPlayer = false;
    private bool IsFinishedCountingLowerRightPointPlayer = false;
    private bool IsFinishedCountingLowerLeftPointPlayer = false;

    private bool IsFinishedCountingUpperPointAI = false;
    private bool IsFinishedCountingLowerPointAI = false;
    private bool IsFinishedCountingRightPointAI = false;
    private bool IsFinishedCountingLeftPointAI = false;
    private bool IsFinishedCountingUpperRightPointAI = false;
    private bool IsFinishedCountingUpperLeftPointAI = false;
    private bool IsFinishedCountingLowerRightPointAI = false;
    private bool IsFinishedCountingLowerLeftPointAI = false;

    private bool QU = false;
    private bool WU = false;
    private bool EU = false;
    private bool RU = false;
    private bool TU = false;
    private bool YU = false;
    private bool UU = false;
    private bool IU = false;
    private bool OU = false;
    private bool PU = false;
    private bool AU = false;
    private bool SU = false;
    private bool DU = false;
    private bool FU = false;
    private bool GU = false;
    private bool HU = false;
    private bool JU = false;
    private bool KU = false;
    private bool LU = false;
    private bool ZU = false;
    private bool XU = false;
    private bool CU = false;
    private bool VU = false;
    private bool BU = false;
    private bool NU = false;
    private bool MU = false;
    private bool Alpha0U = false;
    private bool Alpha1U = false;
    private bool Alpha2U = false;
    private bool Alpha3U = false;
    private bool Alpha4U = false;
    private bool Alpha5U = false;
    private bool Alpha6U = false;
    private bool Alpha7U = false;
    private bool Alpha8U = false;
    private bool Alpha9U = false;
    private bool BackSpaceU = false;
    private bool SpaceU = false;
    private bool RightShiftU = false;
    private bool LeftShiftU = false;
    private bool RightCtrlU = false;
    private bool LeftCtrlU = false;
    private bool TabU = false;
    private bool EscapeU = false;
    private bool EnterU = false;
    private bool UpArrowU = false;
    private bool DownArrowU = false;
    private bool RightArrowU = false;
    private bool LeftArrowU = false;

    private bool Q = false;
    private bool W = false;
    private bool E = false;
    private bool R = false;
    private bool T = false;
    private bool Y = false;
    private bool U = false;
    private bool I = false;
    private bool O = false;
    private bool P = false;
    private bool A = false;
    private bool S = false;
    private bool D = false;
    private bool F = false;
    private bool G = false;
    private bool H = false;
    private bool J = false;
    private bool K = false;
    private bool L = false;
    private bool Z = false;
    private bool X = false;
    private bool C = false;
    private bool V = false;
    private bool B = false;
    private bool N = false;
    private bool M = false;
    private bool Alpha0 = false;
    private bool Alpha1 = false;
    private bool Alpha2 = false;
    private bool Alpha3 = false;
    private bool Alpha4 = false;
    private bool Alpha5 = false;
    private bool Alpha6 = false;
    private bool Alpha7 = false;
    private bool Alpha8 = false;
    private bool Alpha9 = false;
    private bool BackSpace = false;
    private bool Space = false;
    private bool RightShift = false;
    private bool LeftShift = false;
    private bool RightCtrl = false;
    private bool LeftCtrl = false;
    private bool Tab = false;
    private bool Escape = false;
    private bool Enter = false;
    private bool UpArrow = false;
    private bool DownArrow = false;
    private bool RightArrow = false;
    private bool LeftArrow = false;

    private bool QD = false;
    private bool WD = false;
    private bool ED = false;
    private bool RD = false;
    private bool TD = false;
    private bool YD = false;
    private bool UD = false;
    private bool ID = false;
    private bool OD = false;
    private bool PD = false;
    private bool AD = false;
    private bool SD = false;
    private bool DD = false;
    private bool FD = false;
    private bool GD = false;
    private bool HD = false;
    private bool JD = false;
    private bool KD = false;
    private bool LD = false;
    private bool ZD = false;
    private bool XD = false;
    private bool CD = false;
    private bool VD = false;
    private bool BD = false;
    private bool ND = false;
    private bool MD = false;
    private bool Alpha0D = false;
    private bool Alpha1D = false;
    private bool Alpha2D = false;
    private bool Alpha3D = false;
    private bool Alpha4D = false;
    private bool Alpha5D = false;
    private bool Alpha6D = false;
    private bool Alpha7D = false;
    private bool Alpha8D = false;
    private bool Alpha9D = false;
    private bool BackSpaceD = false;
    private bool SpaceD = false;
    private bool RightShiftD = false;
    private bool LeftShiftD = false;
    private bool RightCtrlD = false;
    private bool LeftCtrlD = false;
    private bool TabD = false;
    private bool EscapeD = false;
    private bool EnterD = false;
    private bool UpArrowD = false;
    private bool DownArrowD = false;
    private bool RightArrowD = false;
    private bool LeftArrowD = false;

    private bool CanUseShortCutKey = true;
















    void Start()
    {
        MainCameraJointWeakestReversi = GameObject.Find("MainCameraJointWeakestReversi");

        CursorBlack = (GameObject)Resources.Load("Object/Cursor/CursorBlack");
        CursorWhite = (GameObject)Resources.Load("Object/Cursor/CursorWhite");
        StoneBlack = (GameObject)Resources.Load("Object/Stone/StoneBlack");
        StoneWhite = (GameObject)Resources.Load("Object/Stone/StoneWhite");

        Transform_Cursor = GameObject.Find("Transform_Cursor");
        Transform_Stone = GameObject.Find("Transform_Stone");





        if (PlayerColor == "Black")
        {
            Invoke("Summoning_CursorPlayer", 0);
            Invoke("Summoning_StonePlayer", 0);
            Invoke("Summoning_StoneAI", 0);

            Invoke("Finding_PositionAroundStoneAI", 0);
        }
        if (PlayerColor == "White")
        {

        }
    }


    void FixedUpdate()
    {
        //MainCameraJointWeakestReversi操作
        if (UpArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0.3f, 0, 0);
        }
        if (DownArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(-0.3f, 0, 0);
        }
        if (RightArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0, -0.3f, 0);
        }
        if (LeftArrow)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles += new Vector3(0, 0.3f, 0);
        }
        if (RD)
        {
            MainCameraJointWeakestReversi.transform.eulerAngles = new Vector3(0, 0, 0);
        }
    }


    void Update()
    {
        //ShortCutKey
        if (CanUseShortCutKey == true)
        {
            if (Input.GetKeyUp(KeyCode.Q))
            {
                QU = true;
            }
            else
            {
                QU = false;
            }
            if (Input.GetKeyUp(KeyCode.W))
            {
                WU = true;
            }
            else
            {
                WU = false;
            }
            if (Input.GetKeyUp(KeyCode.E))
            {
                EU = true;
            }
            else
            {
                EU = false;
            }
            if (Input.GetKeyUp(KeyCode.R))
            {
                RU = true;
            }
            else
            {
                RU = false;
            }
            if (Input.GetKeyUp(KeyCode.T))
            {
                TU = true;
            }
            else
            {
                TU = false;
            }
            if (Input.GetKeyUp(KeyCode.Y))
            {
                YU = true;
            }
            else
            {
                YU = false;
            }
            if (Input.GetKeyUp(KeyCode.U))
            {
                UU = true;
            }
            else
            {
                UU = false;
            }
            if (Input.GetKeyUp(KeyCode.I))
            {
                IU = true;
            }
            else
            {
                IU = false;
            }
            if (Input.GetKeyUp(KeyCode.O))
            {
                OU = true;
            }
            else
            {
                OU = false;
            }
            if (Input.GetKeyUp(KeyCode.P))
            {
                PU = true;
            }
            else
            {
                PU = false;
            }
            if (Input.GetKeyUp(KeyCode.A))
            {
                AU = true;
            }
            else
            {
                AU = false;
            }
            if (Input.GetKeyUp(KeyCode.S))
            {
                SU = true;
            }
            else
            {
                SU = false;
            }
            if (Input.GetKeyUp(KeyCode.D))
            {
                DU = true;
            }
            else
            {
                DU = false;
            }
            if (Input.GetKeyUp(KeyCode.F))
            {
                FU = true;
            }
            else
            {
                FU = false;
            }
            if (Input.GetKeyUp(KeyCode.G))
            {
                GU = true;
            }
            else
            {
                GU = false;
            }
            if (Input.GetKeyUp(KeyCode.H))
            {
                HU = true;
            }
            else
            {
                HU = false;
            }
            if (Input.GetKeyUp(KeyCode.J))
            {
                JU = true;
            }
            else
            {
                JU = false;
            }
            if (Input.GetKeyUp(KeyCode.K))
            {
                KU = true;
            }
            else
            {
                KU = false;
            }
            if (Input.GetKeyUp(KeyCode.L))
            {
                LU = true;
            }
            else
            {
                LU = false;
            }
            if (Input.GetKeyUp(KeyCode.Z))
            {
                ZU = true;
            }
            else
            {
                ZU = false;
            }
            if (Input.GetKeyUp(KeyCode.X))
            {
                XU = true;
            }
            else
            {
                XU = false;
            }
            if (Input.GetKeyUp(KeyCode.C))
            {
                CU = true;
            }
            else
            {
                CU = false;
            }
            if (Input.GetKeyUp(KeyCode.V))
            {
                VU = true;
            }
            else
            {
                VU = false;
            }
            if (Input.GetKeyUp(KeyCode.B))
            {
                BU = true;
            }
            else
            {
                BU = false;
            }
            if (Input.GetKeyUp(KeyCode.N))
            {
                NU = true;
            }
            else
            {
                NU = false;
            }
            if (Input.GetKeyUp(KeyCode.M))
            {
                MU = true;
            }
            else
            {
                MU = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha0))
            {
                Alpha0U = true;
            }
            else
            {
                Alpha0U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha1))
            {
                Alpha1U = true;
            }
            else
            {
                Alpha1U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha2))
            {
                Alpha2U = true;
            }
            else
            {
                Alpha2U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha3))
            {
                Alpha3U = true;
            }
            else
            {
                Alpha3U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha4))
            {
                Alpha4U = true;
            }
            else
            {
                Alpha4U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha5))
            {
                Alpha5U = true;
            }
            else
            {
                Alpha5U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha6))
            {
                Alpha6U = true;
            }
            else
            {
                Alpha6U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha7))
            {
                Alpha7U = true;
            }
            else
            {
                Alpha7U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha8))
            {
                Alpha8U = true;
            }
            else
            {
                Alpha8U = false;
            }
            if (Input.GetKeyUp(KeyCode.Alpha9))
            {
                Alpha9U = true;
            }
            else
            {
                Alpha9U = false;
            }
            if (Input.GetKeyUp(KeyCode.Backspace))
            {
                BackSpaceU = true;
            }
            else
            {
                BackSpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.Space))
            {
                SpaceU = true;
            }
            else
            {
                SpaceU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightShift))
            {
                RightShiftU = true;
            }
            else
            {
                RightShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftShift))
            {
                LeftShiftU = true;
            }
            else
            {
                LeftShiftU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightControl))
            {
                RightCtrlU = true;
            }
            else
            {
                RightCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftControl))
            {
                LeftCtrlU = true;
            }
            else
            {
                LeftCtrlU = false;
            }
            if (Input.GetKeyUp(KeyCode.Tab))
            {
                TabU = true;
            }
            else
            {
                TabU = false;
            }
            if (Input.GetKeyUp(KeyCode.Escape))
            {
                EscapeU = true;
            }
            else
            {
                EscapeU = false;
            }
            if (Input.GetKeyUp(KeyCode.Return))
            {
                EnterU = true;
            }
            else
            {
                EnterU = false;
            }
            if (Input.GetKeyUp(KeyCode.UpArrow))
            {
                UpArrowU = true;
            }
            else
            {
                UpArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.DownArrow))
            {
                DownArrowU = true;
            }
            else
            {
                DownArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.RightArrow))
            {
                RightArrowU = true;
            }
            else
            {
                RightArrowU = false;
            }
            if (Input.GetKeyUp(KeyCode.LeftArrow))
            {
                LeftArrowU = true;
            }
            else
            {
                LeftArrowU = false;
            }

            if (Input.GetKey(KeyCode.Q))
            {
                Q = true;
            }
            else
            {
                Q = false;
            }
            if (Input.GetKey(KeyCode.W))
            {
                W = true;
            }
            else
            {
                W = false;
            }
            if (Input.GetKey(KeyCode.E))
            {
                E = true;
            }
            else
            {
                E = false;
            }
            if (Input.GetKey(KeyCode.R))
            {
                R = true;
            }
            else
            {
                R = false;
            }
            if (Input.GetKey(KeyCode.T))
            {
                T = true;
            }
            else
            {
                T = false;
            }
            if (Input.GetKey(KeyCode.Y))
            {
                Y = true;
            }
            else
            {
                Y = false;
            }
            if (Input.GetKey(KeyCode.U))
            {
                U = true;
            }
            else
            {
                U = false;
            }
            if (Input.GetKey(KeyCode.I))
            {
                I = true;
            }
            else
            {
                I = false;
            }
            if (Input.GetKey(KeyCode.O))
            {
                O = true;
            }
            else
            {
                O = false;
            }
            if (Input.GetKey(KeyCode.P))
            {
                P = true;
            }
            else
            {
                P = false;
            }
            if (Input.GetKey(KeyCode.A))
            {
                A = true;
            }
            else
            {
                A = false;
            }
            if (Input.GetKey(KeyCode.S))
            {
                S = true;
            }
            else
            {
                S = false;
            }
            if (Input.GetKey(KeyCode.D))
            {
                D = true;
            }
            else
            {
                D = false;
            }
            if (Input.GetKey(KeyCode.F))
            {
                F = true;
            }
            else
            {
                F = false;
            }
            if (Input.GetKey(KeyCode.G))
            {
                G = true;
            }
            else
            {
                G = false;
            }
            if (Input.GetKey(KeyCode.H))
            {
                H = true;
            }
            else
            {
                H = false;
            }
            if (Input.GetKey(KeyCode.J))
            {
                J = true;
            }
            else
            {
                J = false;
            }
            if (Input.GetKey(KeyCode.K))
            {
                K = true;
            }
            else
            {
                K = false;
            }
            if (Input.GetKey(KeyCode.L))
            {
                L = true;
            }
            else
            {
                L = false;
            }
            if (Input.GetKey(KeyCode.Z))
            {
                Z = true;
            }
            else
            {
                Z = false;
            }
            if (Input.GetKey(KeyCode.X))
            {
                X = true;
            }
            else
            {
                X = false;
            }
            if (Input.GetKey(KeyCode.C))
            {
                C = true;
            }
            else
            {
                C = false;
            }
            if (Input.GetKey(KeyCode.V))
            {
                V = true;
            }
            else
            {
                V = false;
            }
            if (Input.GetKey(KeyCode.B))
            {
                B = true;
            }
            else
            {
                B = false;
            }
            if (Input.GetKey(KeyCode.N))
            {
                N = true;
            }
            else
            {
                N = false;
            }
            if (Input.GetKey(KeyCode.M))
            {
                M = true;
            }
            else
            {
                M = false;
            }
            if (Input.GetKey(KeyCode.Alpha0))
            {
                Alpha0 = true;
            }
            else
            {
                Alpha0 = false;
            }
            if (Input.GetKey(KeyCode.Alpha1))
            {
                Alpha1 = true;
            }
            else
            {
                Alpha1 = false;
            }
            if (Input.GetKey(KeyCode.Alpha2))
            {
                Alpha2 = true;
            }
            else
            {
                Alpha2 = false;
            }
            if (Input.GetKey(KeyCode.Alpha3))
            {
                Alpha3 = true;
            }
            else
            {
                Alpha3 = false;
            }
            if (Input.GetKey(KeyCode.Alpha4))
            {
                Alpha4 = true;
            }
            else
            {
                Alpha4 = false;
            }
            if (Input.GetKey(KeyCode.Alpha5))
            {
                Alpha5 = true;
            }
            else
            {
                Alpha5 = false;
            }
            if (Input.GetKey(KeyCode.Alpha6))
            {
                Alpha6 = true;
            }
            else
            {
                Alpha6 = false;
            }
            if (Input.GetKey(KeyCode.Alpha7))
            {
                Alpha7 = true;
            }
            else
            {
                Alpha7 = false;
            }
            if (Input.GetKey(KeyCode.Alpha8))
            {
                Alpha8 = true;
            }
            else
            {
                Alpha8 = false;
            }
            if (Input.GetKey(KeyCode.Alpha9))
            {
                Alpha9 = true;
            }
            else
            {
                Alpha9 = false;
            }
            if (Input.GetKey(KeyCode.Backspace))
            {
                BackSpace = true;
            }
            else
            {
                BackSpace = false;
            }
            if (Input.GetKey(KeyCode.Space))
            {
                Space = true;
            }
            else
            {
                Space = false;
            }
            if (Input.GetKey(KeyCode.RightShift))
            {
                RightShift = true;
            }
            else
            {
                RightShift = false;
            }
            if (Input.GetKey(KeyCode.LeftShift))
            {
                LeftShift = true;
            }
            else
            {
                LeftShift = false;
            }
            if (Input.GetKey(KeyCode.RightControl))
            {
                RightCtrl = true;
            }
            else
            {
                RightCtrl = false;
            }
            if (Input.GetKey(KeyCode.LeftControl))
            {
                LeftCtrl = true;
            }
            else
            {
                LeftCtrl = false;
            }
            if (Input.GetKey(KeyCode.Tab))
            {
                Tab = true;
            }
            else
            {
                Tab = false;
            }
            if (Input.GetKey(KeyCode.Escape))
            {
                Escape = true;
            }
            else
            {
                Escape = false;
            }
            if (Input.GetKey(KeyCode.Return))
            {
                Enter = true;
            }
            else
            {
                Enter = false;
            }
            if (Input.GetKey(KeyCode.UpArrow))
            {
                UpArrow = true;
            }
            else
            {
                UpArrow = false;
            }
            if (Input.GetKey(KeyCode.DownArrow))
            {
                DownArrow = true;
            }
            else
            {
                DownArrow = false;
            }
            if (Input.GetKey(KeyCode.RightArrow))
            {
                RightArrow = true;
            }
            else
            {
                RightArrow = false;
            }
            if (Input.GetKey(KeyCode.LeftArrow))
            {
                LeftArrow = true;
            }
            else
            {
                LeftArrow = false;
            }

            if (Input.GetKeyDown(KeyCode.Q))
            {
                QD = true;
            }
            else
            {
                QD = false;
            }
            if (Input.GetKeyDown(KeyCode.W))
            {
                WD = true;
            }
            else
            {
                WD = false;
            }
            if (Input.GetKeyDown(KeyCode.E))
            {
                ED = true;
            }
            else
            {
                ED = false;
            }
            if (Input.GetKeyDown(KeyCode.R))
            {
                RD = true;
            }
            else
            {
                RD = false;
            }
            if (Input.GetKeyDown(KeyCode.T))
            {
                TD = true;
            }
            else
            {
                TD = false;
            }
            if (Input.GetKeyDown(KeyCode.Y))
            {
                YD = true;
            }
            else
            {
                YD = false;
            }
            if (Input.GetKeyDown(KeyCode.U))
            {
                UD = true;
            }
            else
            {
                UD = false;
            }
            if (Input.GetKeyDown(KeyCode.I))
            {
                ID = true;
            }
            else
            {
                ID = false;
            }
            if (Input.GetKeyDown(KeyCode.O))
            {
                OD = true;
            }
            else
            {
                OD = false;
            }
            if (Input.GetKeyDown(KeyCode.P))
            {
                PD = true;
            }
            else
            {
                PD = false;
            }
            if (Input.GetKeyDown(KeyCode.A))
            {
                AD = true;
            }
            else
            {
                AD = false;
            }
            if (Input.GetKeyDown(KeyCode.S))
            {
                SD = true;
            }
            else
            {
                SD = false;
            }
            if (Input.GetKeyDown(KeyCode.D))
            {
                DD = true;
            }
            else
            {
                DD = false;
            }
            if (Input.GetKeyDown(KeyCode.F))
            {
                FD = true;
            }
            else
            {
                FD = false;
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                GD = true;
            }
            else
            {
                GD = false;
            }
            if (Input.GetKeyDown(KeyCode.H))
            {
                HD = true;
            }
            else
            {
                HD = false;
            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                JD = true;
            }
            else
            {
                JD = false;
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                KD = true;
            }
            else
            {
                KD = false;
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                LD = true;
            }
            else
            {
                LD = false;
            }
            if (Input.GetKeyDown(KeyCode.Z))
            {
                ZD = true;
            }
            else
            {
                ZD = false;
            }
            if (Input.GetKeyDown(KeyCode.X))
            {
                XD = true;
            }
            else
            {
                XD = false;
            }
            if (Input.GetKeyDown(KeyCode.C))
            {
                CD = true;
            }
            else
            {
                CD = false;
            }
            if (Input.GetKeyDown(KeyCode.V))
            {
                VD = true;
            }
            else
            {
                VD = false;
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                BD = true;
            }
            else
            {
                BD = false;
            }
            if (Input.GetKeyDown(KeyCode.N))
            {
                ND = true;
            }
            else
            {
                ND = false;
            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                MD = true;
            }
            else
            {
                MD = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha0))
            {
                Alpha0D = true;
            }
            else
            {
                Alpha0D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha1))
            {
                Alpha1D = true;
            }
            else
            {
                Alpha1D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha2))
            {
                Alpha2D = true;
            }
            else
            {
                Alpha2D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha3))
            {
                Alpha3D = true;
            }
            else
            {
                Alpha3D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha4))
            {
                Alpha4D = true;
            }
            else
            {
                Alpha4D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha5))
            {
                Alpha5D = true;
            }
            else
            {
                Alpha5D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha6))
            {
                Alpha6D = true;
            }
            else
            {
                Alpha6D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha7))
            {
                Alpha7D = true;
            }
            else
            {
                Alpha7D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha8))
            {
                Alpha8D = true;
            }
            else
            {
                Alpha8D = false;
            }
            if (Input.GetKeyDown(KeyCode.Alpha9))
            {
                Alpha9D = true;
            }
            else
            {
                Alpha9D = false;
            }
            if (Input.GetKeyDown(KeyCode.Backspace))
            {
                BackSpaceD = true;
            }
            else
            {
                BackSpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.Space))
            {
                SpaceD = true;
            }
            else
            {
                SpaceD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightShift))
            {
                RightShiftD = true;
            }
            else
            {
                RightShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftShift))
            {
                LeftShiftD = true;
            }
            else
            {
                LeftShiftD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightControl))
            {
                RightCtrlD = true;
            }
            else
            {
                RightCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftControl))
            {
                LeftCtrlD = true;
            }
            else
            {
                LeftCtrlD = false;
            }
            if (Input.GetKeyDown(KeyCode.Tab))
            {
                TabD = true;
            }
            else
            {
                TabD = false;
            }
            if (Input.GetKeyDown(KeyCode.Escape))
            {
                EscapeD = true;
            }
            else
            {
                EscapeD = false;
            }
            if (Input.GetKeyDown(KeyCode.Return))
            {
                EnterD = true;
            }
            else
            {
                EnterD = false;
            }
            if (Input.GetKeyDown(KeyCode.UpArrow))
            {
                UpArrowD = true;
            }
            else
            {
                UpArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.DownArrow))
            {
                DownArrowD = true;
            }
            else
            {
                DownArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.RightArrow))
            {
                RightArrowD = true;
            }
            else
            {
                RightArrowD = false;
            }
            if (Input.GetKeyDown(KeyCode.LeftArrow))
            {
                LeftArrowD = true;
            }
            else
            {
                LeftArrowD = false;
            }
        }











        



        if (Turn == "Player")
        {
            //CursorPlayer操作
            if (GameObject.FindWithTag("Cursor"))
            {
                //上移動
                if (WD & PositionCursorPlayer <= 55)
                {
                    PositionCursorPlayer += 8;
                }
                //下移動
                if (SD & PositionCursorPlayer >= 8)
                {
                    PositionCursorPlayer -= 8;
                }
                //右移動
                if (DD &
                    PositionCursorPlayer != 7 &
                    PositionCursorPlayer != 15 &
                    PositionCursorPlayer != 23 &
                    PositionCursorPlayer != 31 &
                    PositionCursorPlayer != 39 &
                    PositionCursorPlayer != 47 &
                    PositionCursorPlayer != 55 &
                    PositionCursorPlayer != 63)
                {
                    PositionCursorPlayer += 1;
                }
                //左移動
                if (AD &
                    PositionCursorPlayer != 0 &
                    PositionCursorPlayer != 8 &
                    PositionCursorPlayer != 16 &
                    PositionCursorPlayer != 24 &
                    PositionCursorPlayer != 32 &
                    PositionCursorPlayer != 40 &
                    PositionCursorPlayer != 48 &
                    PositionCursorPlayer != 56)
                {
                    PositionCursorPlayer -= 1;
                }

                GameObject.FindWithTag("Cursor").transform.position = Transform_Cursor.transform.position + new Vector3(PositionCursorPlayer % 8 + 1, 0, Mathf.FloorToInt(PositionCursorPlayer / 8) + 1);
            }

            if (SpaceD & CanInvokeReset_ColorPlayer == true)
            {
                if (IntList_PointPlayer[PositionCursorPlayer] != 0)
                {
                    //Debug.Log("PlayerはそこにStonePlayerを設置することができます。");

                    CanInvokeReset_ColorPlayer = false;
                    Invoke("Reset_ColorPlayer", 0);
                }
                else
                {
                    //Debug.Log("PlayerはそこにStonePlayerを設置することができません。");
                }
            }
        }
        if(Turn == "AI")
        {
            if (CanInvokeFinding_PositionAroundStonePlayer == true)
            {
                CanInvokeFinding_PositionAroundStonePlayer = false;

                Invoke("Finding_PositionAroundStonePlayer", 1);
            }
        }





        if (IntList_Color.All(value => value != 0) == true)
        {
            if (CanInvokeDisplaying_Result == true)
            {
                CanInvokeDisplaying_Result = false;

                Invoke("Displaying_Result", 0);
            }
        }

























        if (Alpha1D)
        {
            Debug.Log("StoneAIの周りの座標");
            for (int i = 0; i < IntList_PositionAroundStoneAI.Count; i++)
            {
                Debug.Log(IntList_PositionAroundStoneAI[i] + "  :  " + i);
            }
            Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        }
        if (Alpha2D)
        {
            Debug.Log("StoneAIの周りのポイント");
            for (int i = 0; i < IntList_PointPlayer.Count; i++)
            {
                Debug.Log(IntList_PointPlayer[i] + "  :  " + i);
            }
            Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        }
        if (Alpha3D)
        {
            Debug.Log(UpperPointPlayer);
            Debug.Log(LowerPointPlayer);
            Debug.Log(RightPointPlayer);
            Debug.Log(LeftPointPlayer);
            Debug.Log(UpperRightPointPlayer);
            Debug.Log(UpperLeftPointPlayer);
            Debug.Log(LowerRightPointPlayer);
            Debug.Log(LowerLeftPointPlayer);
        }
        if (Alpha4D)
        {
            Debug.Log("StonePlayerの周りの座標");
            for (int i = 0; i < IntList_PositionAroundStonePlayer.Count; i++)
            {
                Debug.Log(IntList_PositionAroundStonePlayer[i] + "  :  " + i);
            }
            Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        }
        if (Alpha5D)
        {
            Debug.Log("StonePlayerの周りのポイント");
            for (int i = 0; i < IntList_PointAI.Count; i++)
            {
                Debug.Log(IntList_PointAI[i] + "  :  " + i);
            }
            Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        }
        if (Alpha6D)
        {
            Debug.Log(Turn);
        }
        if (Alpha7D)
        {
            Debug.Log(CanInvokeFinding_PositionAroundStonePlayer);
        }
        if (Alpha8D)
        {
            Debug.Log("Color");
            for (int i = 0; i < IntList_Color.Count; i++)
            {
                Debug.Log(IntList_Color[i] + "  :  " + i);
            }
            Debug.Log("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

        }
        if (Alpha9D)
        {
            Invoke("Finding_PositionAroundStonePlayer", 0);
        }
    }














    //StoneAIの周りの座標を取得
    void Finding_PositionAroundStoneAI()
    {
        //Debug.Log("Finding_PositionAroundStoneAI was called");

        IntList_PositionAroundStoneAI = new List<int> { };

        if (PlayerColor == "Black")
        {
            for (int i = 0; i < IntList_PositionStoneWhite.Count; i++)
            {
                //上
                if (IntList_PositionStoneWhite[i] + 8 >= 0 &
                    IntList_PositionStoneWhite[i] + 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 8] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] + 8);
                    }
                }
                //下
                if (IntList_PositionStoneWhite[i] - 8 >= 0 &
                    IntList_PositionStoneWhite[i] - 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 8] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] - 8);
                    }
                }
                //右
                if (IntList_PositionStoneWhite[i] + 1 >= 0 &
                    IntList_PositionStoneWhite[i] + 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 1] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] + 1);
                    }
                }
                //左
                if (IntList_PositionStoneWhite[i] - 1 >= 0 &
                    IntList_PositionStoneWhite[i] - 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 1] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] - 1);
                    }
                }
                //右上
                if (IntList_PositionStoneWhite[i] + 9 >= 0 &
                    IntList_PositionStoneWhite[i] + 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 9] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] + 9);
                    }
                }
                //左上
                if (IntList_PositionStoneWhite[i] + 7 >= 0 &
                    IntList_PositionStoneWhite[i] + 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] + 7] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] + 7);
                    }
                }
                //右下
                if (IntList_PositionStoneWhite[i] - 7 >= 0 &
                    IntList_PositionStoneWhite[i] - 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 7] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] - 7);
                    }
                }
                //左下
                if (IntList_PositionStoneWhite[i] - 9 >= 0 &
                    IntList_PositionStoneWhite[i] - 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneWhite[i] - 9] == 0)
                    {
                        IntList_PositionAroundStoneAI.Add(IntList_PositionStoneWhite[i] - 9);
                    }
                }
            }
            IntList_PositionAroundStoneAI = IntList_PositionAroundStoneAI.Distinct().ToList();
            IntList_PositionAroundStoneAI.Sort();
            IntList_PositionAroundStoneAI.Reverse();
        }
        if (PlayerColor == "White")
        {

        }

        Invoke("Squeezing_PositionAroundStoneAI", 0);
    }
    //StoneAIの周りのポイントを取得
    void Squeezing_PositionAroundStoneAI()
    {
        //Debug.Log("Squeezing_PositionAroundStoneAI was called");

        IntList_PointPlayer = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        if (PlayerColor == "Black")
        {
            for (int i = 0; i < IntList_PositionAroundStoneAI.Count; i++)
            {
                while (IsFinishedCountingUpperPointPlayer == false |
                       IsFinishedCountingLowerPointPlayer == false |
                       IsFinishedCountingRightPointPlayer == false |
                       IsFinishedCountingLeftPointPlayer == false |
                       IsFinishedCountingUpperRightPointPlayer == false |
                       IsFinishedCountingUpperLeftPointPlayer == false |
                       IsFinishedCountingLowerRightPointPlayer == false |
                       IsFinishedCountingLowerLeftPointPlayer == false)
                {
                    //上調査
                    if (IsFinishedCountingUpperPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] <= 55 &
                            IntList_PositionAroundStoneAI[i] + (8 * UpperDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] + (8 * UpperDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] + (8 * UpperDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperPointPlayer = 0;
                                    IsFinishedCountingUpperPointPlayer = true;
                                    break;
                                case 2:
                                    UpperDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    UpperPointPlayer = UpperDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperPointPlayer = 0;
                            IsFinishedCountingUpperPointPlayer = true;
                        }
                    }
                    //下調査
                    if (IsFinishedCountingLowerPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] >= 8 &
                            IntList_PositionAroundStoneAI[i] - (8 * LowerDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] - (8 * LowerDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] - (8 * LowerDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerPointPlayer = 0;
                                    IsFinishedCountingLowerPointPlayer = true;
                                    break;
                                case 2:
                                    LowerDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    LowerPointPlayer = LowerDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerPointPlayer = 0;
                            IsFinishedCountingLowerPointPlayer = true;
                        }
                    }
                    //右調査
                    if (IsFinishedCountingRightPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 7 &
                            IntList_PositionAroundStoneAI[i] != 15 &
                            IntList_PositionAroundStoneAI[i] != 23 &
                            IntList_PositionAroundStoneAI[i] != 31 &
                            IntList_PositionAroundStoneAI[i] != 39 &
                            IntList_PositionAroundStoneAI[i] != 47 &
                            IntList_PositionAroundStoneAI[i] != 55 &
                            IntList_PositionAroundStoneAI[i] != 63 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] + (1 * RightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    RightPointPlayer = 0;
                                    IsFinishedCountingRightPointPlayer = true;
                                    break;
                                case 2:
                                    RightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    RightPointPlayer = RightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingRightPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            RightPointPlayer = 0;
                            IsFinishedCountingRightPointPlayer = true;
                        }
                    }
                    //左調査
                    if (IsFinishedCountingLeftPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 0 &
                            IntList_PositionAroundStoneAI[i] != 8 &
                            IntList_PositionAroundStoneAI[i] != 16 &
                            IntList_PositionAroundStoneAI[i] != 24 &
                            IntList_PositionAroundStoneAI[i] != 32 &
                            IntList_PositionAroundStoneAI[i] != 40 &
                            IntList_PositionAroundStoneAI[i] != 48 &
                            IntList_PositionAroundStoneAI[i] != 56 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] - (1 * LeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LeftPointPlayer = 0;
                                    IsFinishedCountingLeftPointPlayer = true;
                                    break;
                                case 2:
                                    LeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    LeftPointPlayer = LeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLeftPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            LeftPointPlayer = 0;
                            IsFinishedCountingLeftPointPlayer = true;
                        }
                    }
                    //右上調査
                    if (IsFinishedCountingUpperRightPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 7 &
                            IntList_PositionAroundStoneAI[i] != 15 &
                            IntList_PositionAroundStoneAI[i] != 23 &
                            IntList_PositionAroundStoneAI[i] != 31 &
                            IntList_PositionAroundStoneAI[i] != 39 &
                            IntList_PositionAroundStoneAI[i] != 47 &
                            IntList_PositionAroundStoneAI[i] <= 54 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperRightPointPlayer = 0;
                                    IsFinishedCountingUpperRightPointPlayer = true;
                                    break;
                                case 2:
                                    UpperRightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    UpperRightPointPlayer = UpperRightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperRightPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperRightPointPlayer = 0;
                            IsFinishedCountingUpperRightPointPlayer = true;
                        }
                    }
                    //左上調査
                    if (IsFinishedCountingUpperLeftPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 0 &
                            IntList_PositionAroundStoneAI[i] != 8 &
                            IntList_PositionAroundStoneAI[i] != 16 &
                            IntList_PositionAroundStoneAI[i] != 24 &
                            IntList_PositionAroundStoneAI[i] != 32 &
                            IntList_PositionAroundStoneAI[i] != 40 &
                            IntList_PositionAroundStoneAI[i] != 48 &
                            IntList_PositionAroundStoneAI[i] <= 55 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperLeftPointPlayer = 0;
                                    IsFinishedCountingUpperLeftPointPlayer = true;
                                    break;
                                case 2:
                                    UpperLeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    UpperLeftPointPlayer = UpperLeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperLeftPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperLeftPointPlayer = 0;
                            IsFinishedCountingUpperLeftPointPlayer = true;
                        }
                    }
                    //右下調査
                    if (IsFinishedCountingLowerRightPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 15 &
                            IntList_PositionAroundStoneAI[i] != 23 &
                            IntList_PositionAroundStoneAI[i] != 31 &
                            IntList_PositionAroundStoneAI[i] != 39 &
                            IntList_PositionAroundStoneAI[i] != 47 &
                            IntList_PositionAroundStoneAI[i] != 55 &
                            IntList_PositionAroundStoneAI[i] != 63 &
                            IntList_PositionAroundStoneAI[i] >= 8 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerRightPointPlayer = 0;
                                    IsFinishedCountingLowerRightPointPlayer = true;
                                    break;
                                case 2:
                                    LowerRightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    LowerRightPointPlayer = LowerRightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerRightPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerRightPointPlayer = 0;
                            IsFinishedCountingLowerRightPointPlayer = true;
                        }
                    }
                    //左下調査
                    if (IsFinishedCountingLowerLeftPointPlayer == false)
                    {
                        if (IntList_PositionAroundStoneAI[i] != 16 &
                            IntList_PositionAroundStoneAI[i] != 24 &
                            IntList_PositionAroundStoneAI[i] != 32 &
                            IntList_PositionAroundStoneAI[i] != 40 &
                            IntList_PositionAroundStoneAI[i] != 48 &
                            IntList_PositionAroundStoneAI[i] != 56 &
                            IntList_PositionAroundStoneAI[i] >= 9 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStoneAI[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerLeftPointPlayer = 0;
                                    IsFinishedCountingLowerLeftPointPlayer = true;
                                    break;
                                case 2:
                                    LowerLeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 1:
                                    LowerLeftPointPlayer = LowerLeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerLeftPointPlayer = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerLeftPointPlayer = 0;
                            IsFinishedCountingLowerLeftPointPlayer = true;
                        }
                    }

                    if (IsFinishedCountingUpperPointPlayer == true &
                        IsFinishedCountingLowerPointPlayer == true &
                        IsFinishedCountingRightPointPlayer == true &
                        IsFinishedCountingLeftPointPlayer == true &
                        IsFinishedCountingUpperRightPointPlayer == true &
                        IsFinishedCountingUpperLeftPointPlayer == true &
                        IsFinishedCountingLowerRightPointPlayer == true &
                        IsFinishedCountingLowerLeftPointPlayer == true)
                    {
                        IntList_PointPlayer[IntList_PositionAroundStoneAI[i]] = UpperPointPlayer + LowerPointPlayer + RightPointPlayer + LeftPointPlayer + UpperRightPointPlayer + UpperLeftPointPlayer + LowerRightPointPlayer + LowerLeftPointPlayer;

                        UpperDistanceFromPositionAroundStoneAI = 1;
                        LowerDistanceFromPositionAroundStoneAI = 1;
                        RightDistanceFromPositionAroundStoneAI = 1;
                        LeftDistanceFromPositionAroundStoneAI = 1;
                        UpperRightDistanceFromPositionAroundStoneAI = 1;
                        UpperLeftDistanceFromPositionAroundStoneAI = 1;
                        LowerRightDistanceFromPositionAroundStoneAI = 1;
                        LowerLeftDistanceFromPositionAroundStoneAI = 1;

                        UpperPointPlayer = 0;
                        LowerPointPlayer = 0;
                        RightPointPlayer = 0;
                        LeftPointPlayer = 0;
                        UpperRightPointPlayer = 0;
                        UpperLeftPointPlayer = 0;
                        LowerRightPointPlayer = 0;
                        LowerLeftPointPlayer = 0;

                        IsFinishedCountingUpperPointPlayer = false;
                        IsFinishedCountingLowerPointPlayer = false;
                        IsFinishedCountingRightPointPlayer = false;
                        IsFinishedCountingLeftPointPlayer = false;
                        IsFinishedCountingUpperRightPointPlayer = false;
                        IsFinishedCountingUpperLeftPointPlayer = false;
                        IsFinishedCountingLowerRightPointPlayer = false;
                        IsFinishedCountingLowerLeftPointPlayer = false;

                        break;
                    }
                }
            }
        }
        if (PlayerColor == "White")
        {

        }

        Invoke("Determination_PositonSetStonePlayer", 0);
    }
    //StonePlayerを設置できるか調査
    void Determination_PositonSetStonePlayer()
    {
        //Debug.Log("Determination_PositonSetStonePlayer was called");

        IntList_PositionPointPlayer = new List<int> { };

        if (PlayerColor == "Black")
        {
            if (IntList_PointPlayer.All(value => value == 0) == true)
            {
                Turn = "AI";
                CanInvokeFinding_PositionAroundStonePlayer = true;
            }
            else
            {
                CanInvokeReset_ColorPlayer = true;
            }
        }
        if (PlayerColor == "White")
        {

        }
    }
    //ColorPlayerをリセット
    void Reset_ColorPlayer()
    {
        //Debug.Log("Reset_ColorPlayer was called");

        if (PlayerColor == "Black")
        {
            IntList_Color[PositionCursorPlayer] = 1;

            while (IsFinishedCountingUpperPointPlayer == false |
                IsFinishedCountingLowerPointPlayer == false |
                IsFinishedCountingRightPointPlayer == false |
                IsFinishedCountingLeftPointPlayer == false |
                IsFinishedCountingUpperRightPointPlayer == false |
                IsFinishedCountingUpperLeftPointPlayer == false |
                IsFinishedCountingLowerRightPointPlayer == false |
                IsFinishedCountingLowerLeftPointPlayer == false)
            {
                //上調査
                if (IsFinishedCountingUpperPointPlayer == false)
                {
                    if (PositionCursorPlayer <= 55 &
                        PositionCursorPlayer + (8 * UpperDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer + (8 * UpperDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (8 * UpperDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperPointPlayer = 0;
                                IsFinishedCountingUpperPointPlayer = true;
                                break;
                            case 2:
                                UpperDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperPointPlayer = UpperDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperPointPlayer = 0;
                        IsFinishedCountingUpperPointPlayer = true;
                    }
                }
                //下調査
                if (IsFinishedCountingLowerPointPlayer == false)
                {
                    if (PositionCursorPlayer >= 8 &
                        PositionCursorPlayer - (8 * LowerDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer - (8 * LowerDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (8 * LowerDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerPointPlayer = 0;
                                IsFinishedCountingLowerPointPlayer = true;
                                break;
                            case 2:
                                LowerDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerPointPlayer = LowerDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerPointPlayer = 0;
                        IsFinishedCountingLowerPointPlayer = true;
                    }
                }
                //右調査
                if (IsFinishedCountingRightPointPlayer == false)
                {
                    if (PositionCursorPlayer != 7 &
                        PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer != 55 &
                        PositionCursorPlayer != 63 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (1 * RightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                RightPointPlayer = 0;
                                IsFinishedCountingRightPointPlayer = true;
                                break;
                            case 2:
                                RightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                RightPointPlayer = RightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingRightPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        RightPointPlayer = 0;
                        IsFinishedCountingRightPointPlayer = true;
                    }
                }
                //左調査
                if (IsFinishedCountingLeftPointPlayer == false)
                {
                    if (PositionCursorPlayer != 0 &
                        PositionCursorPlayer != 8 &
                        PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer != 56 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (1 * LeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LeftPointPlayer = 0;
                                IsFinishedCountingLeftPointPlayer = true;
                                break;
                            case 2:
                                LeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LeftPointPlayer = LeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLeftPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        LeftPointPlayer = 0;
                        IsFinishedCountingLeftPointPlayer = true;
                    }
                }
                //右上調査
                if (IsFinishedCountingUpperRightPointPlayer == false)
                {
                    if (PositionCursorPlayer != 7 &
                        PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer <= 54 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (9 * UpperRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperRightPointPlayer = 0;
                                IsFinishedCountingUpperRightPointPlayer = true;
                                break;
                            case 2:
                                UpperRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperRightPointPlayer = UpperRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperRightPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperRightPointPlayer = 0;
                        IsFinishedCountingUpperRightPointPlayer = true;
                    }
                }
                //左上調査
                if (IsFinishedCountingUpperLeftPointPlayer == false)
                {
                    if (PositionCursorPlayer != 0 &
                        PositionCursorPlayer != 8 &
                        PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer <= 55 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer + (7 * UpperLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperLeftPointPlayer = 0;
                                IsFinishedCountingUpperLeftPointPlayer = true;
                                break;
                            case 2:
                                UpperLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                UpperLeftPointPlayer = UpperLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperLeftPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperLeftPointPlayer = 0;
                        IsFinishedCountingUpperLeftPointPlayer = true;
                    }
                }
                //右下調査
                if (IsFinishedCountingLowerRightPointPlayer == false)
                {
                    if (PositionCursorPlayer != 15 &
                        PositionCursorPlayer != 23 &
                        PositionCursorPlayer != 31 &
                        PositionCursorPlayer != 39 &
                        PositionCursorPlayer != 47 &
                        PositionCursorPlayer != 55 &
                        PositionCursorPlayer != 63 &
                        PositionCursorPlayer >= 8 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (7 * LowerRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerRightPointPlayer = 0;
                                IsFinishedCountingLowerRightPointPlayer = true;
                                break;
                            case 2:
                                LowerRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerRightPointPlayer = LowerRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerRightPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerRightPointPlayer = 0;
                        IsFinishedCountingLowerRightPointPlayer = true;
                    }
                }
                //左下調査
                if (IsFinishedCountingLowerLeftPointPlayer == false)
                {
                    if (PositionCursorPlayer != 16 &
                        PositionCursorPlayer != 24 &
                        PositionCursorPlayer != 32 &
                        PositionCursorPlayer != 40 &
                        PositionCursorPlayer != 48 &
                        PositionCursorPlayer != 56 &
                        PositionCursorPlayer >= 9 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorPlayer - (9 * LowerLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerLeftPointPlayer = 0;
                                IsFinishedCountingLowerLeftPointPlayer = true;
                                break;
                            case 2:
                                LowerLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 1:
                                LowerLeftPointPlayer = LowerLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerLeftPointPlayer = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerLeftPointPlayer = 0;
                        IsFinishedCountingLowerLeftPointPlayer = true;
                    }
                }

                if (IsFinishedCountingUpperPointPlayer == true &
                        IsFinishedCountingLowerPointPlayer == true &
                        IsFinishedCountingRightPointPlayer == true &
                        IsFinishedCountingLeftPointPlayer == true &
                        IsFinishedCountingUpperRightPointPlayer == true &
                        IsFinishedCountingUpperLeftPointPlayer == true &
                        IsFinishedCountingLowerRightPointPlayer == true &
                        IsFinishedCountingLowerLeftPointPlayer == true)
                {

                    UpperDistanceFromPositionAroundStonePlayer = 1;
                    LowerDistanceFromPositionAroundStonePlayer = 1;
                    RightDistanceFromPositionAroundStonePlayer = 1;
                    LeftDistanceFromPositionAroundStonePlayer = 1;
                    UpperRightDistanceFromPositionAroundStonePlayer = 1;
                    UpperLeftDistanceFromPositionAroundStonePlayer = 1;
                    LowerRightDistanceFromPositionAroundStonePlayer = 1;
                    LowerLeftDistanceFromPositionAroundStonePlayer = 1;

                    IsFinishedCountingUpperPointPlayer = false;
                    IsFinishedCountingLowerPointPlayer = false;
                    IsFinishedCountingRightPointPlayer = false;
                    IsFinishedCountingLeftPointPlayer = false;
                    IsFinishedCountingUpperRightPointPlayer = false;
                    IsFinishedCountingUpperLeftPointPlayer = false;
                    IsFinishedCountingLowerRightPointPlayer = false;
                    IsFinishedCountingLowerLeftPointPlayer = false;

                    break;
                }
            }

            for (int i = 1; i <= UpperPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (8 * i)] = 1;
            }
            for (int i = 1; i <= LowerPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (8 * i)] = 1;
            }
            for (int i = 1; i <= RightPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (1 * i)] = 1;
            }
            for (int i = 1; i <= LeftPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (1 * i)] = 1;
            }
            for (int i = 1; i <= UpperRightPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (9 * i)] = 1;
            }
            for (int i = 1; i <= UpperLeftPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer + (7 * i)] = 1;
            }
            for (int i = 1; i <= LowerRightPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (7 * i)] = 1;
            }
            for (int i = 1; i <= LowerLeftPointPlayer; i++)
            {
                IntList_Color[PositionCursorPlayer - (9 * i)] = 1;
            }
        }
        if (PlayerColor == "White")
        {

        }
        
        UpperPointPlayer = 0;
        LowerPointPlayer = 0;
        RightPointPlayer = 0;
        LeftPointPlayer = 0;
        UpperRightPointPlayer = 0;
        UpperLeftPointPlayer = 0;
        LowerRightPointPlayer = 0;
        LowerLeftPointPlayer = 0;

        Invoke("Destruction_Cursor", 0);
        Invoke("Destruction_StonePlayer", 0);
        Invoke("Destruction_StoneAI", 0);
        Invoke("Summoning_StonePlayer", 0);
        Invoke("Summoning_StoneAI", 0);

        Turn = "AI";
        CanInvokeFinding_PositionAroundStonePlayer = true;
    }




    //StonePlayerの周りの座標を取得
    void Finding_PositionAroundStonePlayer()
    {
        //Debug.Log("Finding_PositionAroundStonePlayer was called");

        IntList_PositionAroundStonePlayer = new List<int> { };

        if (PlayerColor == "Black")
        {
            for (int i = 0; i < IntList_PositionStoneBlack.Count; i++)
            {
                //上
                if (IntList_PositionStoneBlack[i] + 8 >= 0 &
                    IntList_PositionStoneBlack[i] + 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 8] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] + 8);
                    }
                }
                //下
                if (IntList_PositionStoneBlack[i] - 8 >= 0 &
                    IntList_PositionStoneBlack[i] - 8 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 8] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] - 8);
                    }
                }
                //右
                if (IntList_PositionStoneBlack[i] + 1 >= 0 &
                    IntList_PositionStoneBlack[i] + 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 1] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] + 1);
                    }
                }
                //左
                if (IntList_PositionStoneBlack[i] - 1 >= 0 &
                    IntList_PositionStoneBlack[i] - 1 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 1] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] - 1);
                    }
                }
                //右上
                if (IntList_PositionStoneBlack[i] + 9 >= 0 &
                    IntList_PositionStoneBlack[i] + 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 9] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] + 9);
                    }
                }
                //左上
                if (IntList_PositionStoneBlack[i] + 7 >= 0 &
                    IntList_PositionStoneBlack[i] + 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] + 7] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] + 7);
                    }
                }
                //右下
                if (IntList_PositionStoneBlack[i] - 7 >= 0 &
                    IntList_PositionStoneBlack[i] - 7 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 7] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] - 7);
                    }
                }
                //左下
                if (IntList_PositionStoneBlack[i] - 9 >= 0 &
                    IntList_PositionStoneBlack[i] - 9 <= 63)
                {
                    if (IntList_Color[IntList_PositionStoneBlack[i] - 9] == 0)
                    {
                        IntList_PositionAroundStonePlayer.Add(IntList_PositionStoneBlack[i] - 9);
                    }
                }
            }
            IntList_PositionAroundStonePlayer = IntList_PositionAroundStonePlayer.Distinct().ToList();
            IntList_PositionAroundStonePlayer.Sort();
            IntList_PositionAroundStonePlayer.Reverse();
        }
        if (PlayerColor == "White")
        {

        }

        Invoke("Squeezing_PositionAroundStonePlayer", 0);
    }
    //StonePlayerの周りのポイントを取得
    void Squeezing_PositionAroundStonePlayer()
    {
        //Debug.Log("Squeezing_PositionAroundStonePlayer was called");

        IntList_PointAI = new List<int> { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        if (PlayerColor == "Black")
        {
            for (int i = 0; i < IntList_PositionAroundStonePlayer.Count; i++)
            {
                while (IsFinishedCountingUpperPointAI == false |
                       IsFinishedCountingLowerPointAI == false |
                       IsFinishedCountingRightPointAI == false |
                       IsFinishedCountingLeftPointAI == false |
                       IsFinishedCountingUpperRightPointAI == false |
                       IsFinishedCountingUpperLeftPointAI == false |
                       IsFinishedCountingLowerRightPointAI == false |
                       IsFinishedCountingLowerLeftPointAI == false)
                {
                    //上調査
                    if (IsFinishedCountingUpperPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] <= 55 &
                            IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (8 * UpperDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperPointAI = 0;
                                    IsFinishedCountingUpperPointAI = true;
                                    break;
                                case 1:
                                    UpperDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    UpperPointAI = UpperDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperPointAI = 0;
                            IsFinishedCountingUpperPointAI = true;
                        }
                    }
                    //下調査
                    if (IsFinishedCountingLowerPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] >= 8 &
                            IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (8 * LowerDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerPointAI = 0;
                                    IsFinishedCountingLowerPointAI = true;
                                    break;
                                case 1:
                                    LowerDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    LowerPointAI = LowerDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerPointAI = 0;
                            IsFinishedCountingLowerPointAI = true;
                        }
                    }
                    //右調査
                    if (IsFinishedCountingRightPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 7 &
                            IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] != 55 &
                            IntList_PositionAroundStonePlayer[i] != 63 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (1 * RightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    RightPointAI = 0;
                                    IsFinishedCountingRightPointAI = true;
                                    break;
                                case 1:
                                    RightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    RightPointAI = RightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingRightPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            RightPointAI = 0;
                            IsFinishedCountingRightPointAI = true;
                        }
                    }
                    //左調査
                    if (IsFinishedCountingLeftPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 0 &
                            IntList_PositionAroundStonePlayer[i] != 8 &
                            IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] != 56 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (1 * LeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LeftPointAI = 0;
                                    IsFinishedCountingLeftPointAI = true;
                                    break;
                                case 1:
                                    LeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    LeftPointAI = LeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLeftPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            LeftPointAI = 0;
                            IsFinishedCountingLeftPointAI = true;
                        }
                    }
                    //右上調査
                    if (IsFinishedCountingUpperRightPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 7 &
                            IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] <= 54 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (9 * UpperRightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperRightPointAI = 0;
                                    IsFinishedCountingUpperRightPointAI = true;
                                    break;
                                case 1:
                                    UpperRightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    UpperRightPointAI = UpperRightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperRightPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperRightPointAI = 0;
                            IsFinishedCountingUpperRightPointAI = true;
                        }
                    }
                    //左上調査
                    if (IsFinishedCountingUpperLeftPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 0 &
                            IntList_PositionAroundStonePlayer[i] != 8 &
                            IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] <= 55 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] + (7 * UpperLeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    UpperLeftPointAI = 0;
                                    IsFinishedCountingUpperLeftPointAI = true;
                                    break;
                                case 1:
                                    UpperLeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    UpperLeftPointAI = UpperLeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingUpperLeftPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            UpperLeftPointAI = 0;
                            IsFinishedCountingUpperLeftPointAI = true;
                        }
                    }
                    //右下調査
                    if (IsFinishedCountingLowerRightPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 15 &
                            IntList_PositionAroundStonePlayer[i] != 23 &
                            IntList_PositionAroundStonePlayer[i] != 31 &
                            IntList_PositionAroundStonePlayer[i] != 39 &
                            IntList_PositionAroundStonePlayer[i] != 47 &
                            IntList_PositionAroundStonePlayer[i] != 55 &
                            IntList_PositionAroundStonePlayer[i] != 63 &
                            IntList_PositionAroundStonePlayer[i] >= 8 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 0 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 8 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 16 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 24 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 32 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 40 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 48 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) != 56 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (7 * LowerRightDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerRightPointAI = 0;
                                    IsFinishedCountingLowerRightPointAI = true;
                                    break;
                                case 1:
                                    LowerRightDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    LowerRightPointAI = LowerRightDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerRightPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerRightPointAI = 0;
                            IsFinishedCountingLowerRightPointAI = true;
                        }
                    }
                    //左下調査
                    if (IsFinishedCountingLowerLeftPointAI == false)
                    {
                        if (IntList_PositionAroundStonePlayer[i] != 16 &
                            IntList_PositionAroundStonePlayer[i] != 24 &
                            IntList_PositionAroundStonePlayer[i] != 32 &
                            IntList_PositionAroundStonePlayer[i] != 40 &
                            IntList_PositionAroundStonePlayer[i] != 48 &
                            IntList_PositionAroundStonePlayer[i] != 56 &
                            IntList_PositionAroundStonePlayer[i] >= 9 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 7 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 15 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 23 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 31 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 39 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 47 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 55 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) != 63 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) >= 0 &
                            IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI) <= 63)
                        {
                            switch (IntList_Color[IntList_PositionAroundStonePlayer[i] - (9 * LowerLeftDistanceFromPositionAroundStoneAI)])
                            {
                                case 0:
                                    LowerLeftPointAI = 0;
                                    IsFinishedCountingLowerLeftPointAI = true;
                                    break;
                                case 1:
                                    LowerLeftDistanceFromPositionAroundStoneAI += 1;
                                    break;
                                case 2:
                                    LowerLeftPointAI = LowerLeftDistanceFromPositionAroundStoneAI - 1;
                                    IsFinishedCountingLowerLeftPointAI = true;
                                    break;
                            }
                        }
                        else
                        {
                            LowerLeftPointAI = 0;
                            IsFinishedCountingLowerLeftPointAI = true;
                        }
                    }

                    if (IsFinishedCountingUpperPointAI == true &
                        IsFinishedCountingLowerPointAI == true &
                        IsFinishedCountingRightPointAI == true &
                        IsFinishedCountingLeftPointAI == true &
                        IsFinishedCountingUpperRightPointAI == true &
                        IsFinishedCountingUpperLeftPointAI == true &
                        IsFinishedCountingLowerRightPointAI == true &
                        IsFinishedCountingLowerLeftPointAI == true)
                    {
                        IntList_PointAI[IntList_PositionAroundStonePlayer[i]] = UpperPointAI + LowerPointAI + RightPointAI + LeftPointAI + UpperRightPointAI + UpperLeftPointAI + LowerRightPointAI + LowerLeftPointAI;

                        UpperDistanceFromPositionAroundStoneAI = 1;
                        LowerDistanceFromPositionAroundStoneAI = 1;
                        RightDistanceFromPositionAroundStoneAI = 1;
                        LeftDistanceFromPositionAroundStoneAI = 1;
                        UpperRightDistanceFromPositionAroundStoneAI = 1;
                        UpperLeftDistanceFromPositionAroundStoneAI = 1;
                        LowerRightDistanceFromPositionAroundStoneAI = 1;
                        LowerLeftDistanceFromPositionAroundStoneAI = 1;

                        UpperPointAI = 0;
                        LowerPointAI = 0;
                        RightPointAI = 0;
                        LeftPointAI = 0;
                        UpperRightPointAI = 0;
                        UpperLeftPointAI = 0;
                        LowerRightPointAI = 0;
                        LowerLeftPointAI = 0;

                        IsFinishedCountingUpperPointAI = false;
                        IsFinishedCountingLowerPointAI = false;
                        IsFinishedCountingRightPointAI = false;
                        IsFinishedCountingLeftPointAI = false;
                        IsFinishedCountingUpperRightPointAI = false;
                        IsFinishedCountingUpperLeftPointAI = false;
                        IsFinishedCountingLowerRightPointAI = false;
                        IsFinishedCountingLowerLeftPointAI = false;

                        break;
                    }
                }
            }
        }
        if (PlayerColor == "White")
        {

        }

        Invoke("Determination_PositonSetStoneAI", 0);
    }
    //StoneAIを設置できるか調査
    void Determination_PositonSetStoneAI()
    {
        //Debug.Log("Determination_PositonSetStoneAI was called");

        IntList_PositionPointAI = new List<int> { };

        if (PlayerColor == "Black")
        {
            if (IntList_PointAI.All(value => value == 0) == true)
            {
                //Debug.Log("AIはStoneAIを設置することができません。");

                Turn = "Player";
                Invoke("Summoning_CursorPlayer", 0);
                Invoke("Finding_PositionAroundStoneAI", 0);
            }
            else
            {
                //Debug.Log("AIはStoneAIを設置することができます。");

                for (int i = 1; i <= 18; i++)
                {
                    if (IntList_PointAI.All(value => value != i) == true)
                    {
                        continue;
                    }
                    else
                    {
                        int PositionPointAI = IntList_PointAI.IndexOf(i, 0);
                        if (PositionPointAI >= 0)
                        {
                            IntList_PositionPointAI.Add(PositionPointAI);

                            while (PositionPointAI >= 0)
                            {
                                PositionPointAI = IntList_PointAI.IndexOf(i, PositionPointAI + 1);

                                if (PositionPointAI >= 0)
                                {
                                    IntList_PositionPointAI.Add(PositionPointAI);
                                }
                            }
                        }

                        break;
                    }
                }

                PositionCursorAI = IntList_PositionPointAI[Mathf.FloorToInt(Random.Range(0, IntList_PositionPointAI.Count))];

                Invoke("Reset_ColorAI", 0);
            }
        }
        if (PlayerColor == "White")
        {

        }
    }
    //ColorAIをリセット
    void Reset_ColorAI()
    {
        //Debug.Log("Reset_ColorAI was called");

        if (PlayerColor == "Black")
        {
            IntList_Color[PositionCursorAI] = 2;

            while (IsFinishedCountingUpperPointAI == false |
                IsFinishedCountingLowerPointAI == false |
                IsFinishedCountingRightPointAI == false |
                IsFinishedCountingLeftPointAI == false |
                IsFinishedCountingUpperRightPointAI == false |
                IsFinishedCountingUpperLeftPointAI == false |
                IsFinishedCountingLowerRightPointAI == false |
                IsFinishedCountingLowerLeftPointAI == false)
            {
                //上調査
                if (IsFinishedCountingUpperPointAI == false)
                {
                    if (PositionCursorAI <= 55 &
                        PositionCursorAI + (8 * UpperDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI + (8 * UpperDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI + (8 * UpperDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperPointAI = 0;
                                IsFinishedCountingUpperPointAI = true;
                                break;
                            case 1:
                                UpperDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                UpperPointAI = UpperDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperPointAI = 0;
                        IsFinishedCountingUpperPointAI = true;
                    }
                }
                //下調査
                if (IsFinishedCountingLowerPointAI == false)
                {
                    if (PositionCursorAI >= 8 &
                        PositionCursorAI - (8 * LowerDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI - (8 * LowerDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI - (8 * LowerDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerPointAI = 0;
                                IsFinishedCountingLowerPointAI = true;
                                break;
                            case 1:
                                LowerDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                LowerPointAI = LowerDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerPointAI = 0;
                        IsFinishedCountingLowerPointAI = true;
                    }
                }
                //右調査
                if (IsFinishedCountingRightPointAI == false)
                {
                    if (PositionCursorAI != 7 &
                        PositionCursorAI != 15 &
                        PositionCursorAI != 23 &
                        PositionCursorAI != 31 &
                        PositionCursorAI != 39 &
                        PositionCursorAI != 47 &
                        PositionCursorAI != 55 &
                        PositionCursorAI != 63 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI + (1 * RightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                RightPointAI = 0;
                                IsFinishedCountingRightPointAI = true;
                                break;
                            case 1:
                                RightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                RightPointAI = RightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingRightPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        RightPointAI = 0;
                        IsFinishedCountingRightPointAI = true;
                    }
                }
                //左調査
                if (IsFinishedCountingLeftPointAI == false)
                {
                    if (PositionCursorAI != 0 &
                        PositionCursorAI != 8 &
                        PositionCursorAI != 16 &
                        PositionCursorAI != 24 &
                        PositionCursorAI != 32 &
                        PositionCursorAI != 40 &
                        PositionCursorAI != 48 &
                        PositionCursorAI != 56 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI - (1 * LeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LeftPointAI = 0;
                                IsFinishedCountingLeftPointAI = true;
                                break;
                            case 1:
                                LeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                LeftPointAI = LeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLeftPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        LeftPointAI = 0;
                        IsFinishedCountingLeftPointAI = true;
                    }
                }
                //右上調査
                if (IsFinishedCountingUpperRightPointAI == false)
                {
                    if (PositionCursorAI != 7 &
                        PositionCursorAI != 15 &
                        PositionCursorAI != 23 &
                        PositionCursorAI != 31 &
                        PositionCursorAI != 39 &
                        PositionCursorAI != 47 &
                        PositionCursorAI <= 54 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI + (9 * UpperRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperRightPointAI = 0;
                                IsFinishedCountingUpperRightPointAI = true;
                                break;
                            case 1:
                                UpperRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                UpperRightPointAI = UpperRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperRightPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperRightPointAI = 0;
                        IsFinishedCountingUpperRightPointAI = true;
                    }
                }
                //左上調査
                if (IsFinishedCountingUpperLeftPointAI == false)
                {
                    if (PositionCursorAI != 0 &
                        PositionCursorAI != 8 &
                        PositionCursorAI != 16 &
                        PositionCursorAI != 24 &
                        PositionCursorAI != 32 &
                        PositionCursorAI != 40 &
                        PositionCursorAI != 48 &
                        PositionCursorAI <= 55 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI + (7 * UpperLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                UpperLeftPointAI = 0;
                                IsFinishedCountingUpperLeftPointAI = true;
                                break;
                            case 1:
                                UpperLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                UpperLeftPointAI = UpperLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingUpperLeftPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        UpperLeftPointAI = 0;
                        IsFinishedCountingUpperLeftPointAI = true;
                    }
                }
                //右下調査
                if (IsFinishedCountingLowerRightPointAI == false)
                {
                    if (PositionCursorAI != 15 &
                        PositionCursorAI != 23 &
                        PositionCursorAI != 31 &
                        PositionCursorAI != 39 &
                        PositionCursorAI != 47 &
                        PositionCursorAI != 55 &
                        PositionCursorAI != 63 &
                        PositionCursorAI >= 8 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 0 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 8 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 16 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 24 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 32 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 40 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 48 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) != 56 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI - (7 * LowerRightDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerRightPointAI = 0;
                                IsFinishedCountingLowerRightPointAI = true;
                                break;
                            case 1:
                                LowerRightDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                LowerRightPointAI = LowerRightDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerRightPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerRightPointAI = 0;
                        IsFinishedCountingLowerRightPointAI = true;
                    }
                }
                //左下調査
                if (IsFinishedCountingLowerLeftPointAI == false)
                {
                    if (PositionCursorAI != 16 &
                        PositionCursorAI != 24 &
                        PositionCursorAI != 32 &
                        PositionCursorAI != 40 &
                        PositionCursorAI != 48 &
                        PositionCursorAI != 56 &
                        PositionCursorAI >= 9 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 7 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 15 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 23 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 31 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 39 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 47 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 55 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) != 63 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) >= 0 &
                        PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer) <= 63)
                    {
                        switch (IntList_Color[PositionCursorAI - (9 * LowerLeftDistanceFromPositionAroundStonePlayer)])
                        {
                            case 0:
                                LowerLeftPointAI = 0;
                                IsFinishedCountingLowerLeftPointAI = true;
                                break;
                            case 1:
                                LowerLeftDistanceFromPositionAroundStonePlayer += 1;
                                break;
                            case 2:
                                LowerLeftPointAI = LowerLeftDistanceFromPositionAroundStonePlayer - 1;
                                IsFinishedCountingLowerLeftPointAI = true;
                                break;
                        }
                    }
                    else
                    {
                        LowerLeftPointAI = 0;
                        IsFinishedCountingLowerLeftPointAI = true;
                    }
                }

                if (IsFinishedCountingUpperPointAI == true &
                        IsFinishedCountingLowerPointAI == true &
                        IsFinishedCountingRightPointAI == true &
                        IsFinishedCountingLeftPointAI == true &
                        IsFinishedCountingUpperRightPointAI == true &
                        IsFinishedCountingUpperLeftPointAI == true &
                        IsFinishedCountingLowerRightPointAI == true &
                        IsFinishedCountingLowerLeftPointAI == true)
                {

                    UpperDistanceFromPositionAroundStonePlayer = 1;
                    LowerDistanceFromPositionAroundStonePlayer = 1;
                    RightDistanceFromPositionAroundStonePlayer = 1;
                    LeftDistanceFromPositionAroundStonePlayer = 1;
                    UpperRightDistanceFromPositionAroundStonePlayer = 1;
                    UpperLeftDistanceFromPositionAroundStonePlayer = 1;
                    LowerRightDistanceFromPositionAroundStonePlayer = 1;
                    LowerLeftDistanceFromPositionAroundStonePlayer = 1;

                    IsFinishedCountingUpperPointAI = false;
                    IsFinishedCountingLowerPointAI = false;
                    IsFinishedCountingRightPointAI = false;
                    IsFinishedCountingLeftPointAI = false;
                    IsFinishedCountingUpperRightPointAI = false;
                    IsFinishedCountingUpperLeftPointAI = false;
                    IsFinishedCountingLowerRightPointAI = false;
                    IsFinishedCountingLowerLeftPointAI = false;

                    break;
                }
            }

            for (int i = 1; i <= UpperPointAI; i++)
            {
                IntList_Color[PositionCursorAI + (8 * i)] = 2;
            }
            for (int i = 1; i <= LowerPointAI; i++)
            {
                IntList_Color[PositionCursorAI - (8 * i)] = 2;
            }
            for (int i = 1; i <= RightPointAI; i++)
            {
                IntList_Color[PositionCursorAI + (1 * i)] = 2;
            }
            for (int i = 1; i <= LeftPointAI; i++)
            {
                IntList_Color[PositionCursorAI - (1 * i)] = 2;
            }
            for (int i = 1; i <= UpperRightPointAI; i++)
            {
                IntList_Color[PositionCursorAI + (9 * i)] = 2;
            }
            for (int i = 1; i <= UpperLeftPointAI; i++)
            {
                IntList_Color[PositionCursorAI + (7 * i)] = 2;
            }
            for (int i = 1; i <= LowerRightPointAI; i++)
            {
                IntList_Color[PositionCursorAI - (7 * i)] = 2;
            }
            for (int i = 1; i <= LowerLeftPointAI; i++)
            {
                IntList_Color[PositionCursorAI - (9 * i)] = 2;
            }
        }
        if (PlayerColor == "White")
        {

        }

        UpperPointAI = 0;
        LowerPointAI = 0;
        RightPointAI = 0;
        LeftPointAI = 0;
        UpperRightPointAI = 0;
        UpperLeftPointAI = 0;
        LowerRightPointAI = 0;
        LowerLeftPointAI = 0;

        Invoke("Destruction_Cursor", 0);
        Invoke("Destruction_StonePlayer", 0);
        Invoke("Destruction_StoneAI", 0);
        Invoke("Summoning_StonePlayer", 0);
        Invoke("Summoning_StoneAI", 0);

        Turn = "Player";
        Invoke("Summoning_CursorPlayer", 0);
        Invoke("Finding_PositionAroundStoneAI", 0);
    }


    //結果表示
    void Displaying_Result()
    {
        Turn = "";

        CanInvokeReset_ColorPlayer = false;
        CanInvokeFinding_PositionAroundStonePlayer = false;

        CancelInvoke("Finding_PositionAroundStoneAI");
        CancelInvoke("Squeezing_PositionAroundStoneAI");
        CancelInvoke("Determination_PositonSetStonePlayer");
        CancelInvoke("Reset_ColorPlayer");

        CancelInvoke("Finding_PositionAroundStonePlayer");
        CancelInvoke("Squeezing_PositionAroundStonePlayer");
        CancelInvoke("Determination_PositonSetStoneAI");
        CancelInvoke("Reset_ColorAI");

        Debug.Log("黒  :  " + IntList_PositionStoneBlack.Count);
        Debug.Log("白  :  " + IntList_PositionStoneWhite.Count);

        if (IntList_PositionStoneBlack.Count > IntList_PositionStoneWhite.Count)
        {
            Debug.Log("黒の負け");
            Debug.Log("白の勝ち");
        }
        if (IntList_PositionStoneBlack.Count < IntList_PositionStoneWhite.Count)
        {
            Debug.Log("黒の勝ち");
            Debug.Log("白の負け");
        }
        if (IntList_PositionStoneBlack.Count == IntList_PositionStoneWhite.Count)
        {
            Debug.Log("引き分け");
        }
    }





























    //CursorPlayer生成
    void Summoning_CursorPlayer()
    {
        //Debug.Log("Summoning_CursorPlayer was called");

        if (PlayerColor == "Black")
        {
            GameObject GameObject_CursorWhite = Instantiate(CursorBlack) as GameObject;
            GameObject_CursorWhite.name = "CursorPlayer";
            GameObject_CursorWhite.tag = "Cursor";
            GameObject_CursorWhite.transform.position = Transform_Cursor.transform.position + new Vector3(PositionCursorPlayer % 8 + 1, 0, Mathf.FloorToInt(PositionCursorPlayer / 8) + 1);
        }
        if (PlayerColor == "White")
        {

        }
    }
    //CursorAI生成
    void Summoning_CursorAI()
    {
        //Debug.Log("Summoning_CursorAI was called");

        if (PlayerColor == "Black")
        {

        }
        if (PlayerColor == "White")
        {

        }
    }
    //StonePlayer生成
    void Summoning_StonePlayer()
    {
        //Debug.Log("Summoning_StonePlayer was called");

        if (PlayerColor == "Black")
        {
            IntList_PositionStoneBlack = new List<int> { };

            int PositionStoneBlack = IntList_Color.IndexOf(1, 0);

            if (PositionStoneBlack >= 0)
            {
                IntList_PositionStoneBlack.Add(PositionStoneBlack);

                while (PositionStoneBlack >= 0)
                {
                    PositionStoneBlack = IntList_Color.IndexOf(1, PositionStoneBlack + 1);

                    if (PositionStoneBlack >= 0)
                    {
                        IntList_PositionStoneBlack.Add(PositionStoneBlack);
                    }
                }
            }

            for (int i = 0; i < IntList_PositionStoneBlack.Count; i++)
            {
                GameObject GameObject_StoneBlack = Instantiate(StoneBlack) as GameObject;
                GameObject_StoneBlack.name = "StonePlayer";
                GameObject_StoneBlack.tag = "StonePlayer";
                GameObject_StoneBlack.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneBlack[i] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneBlack[i] / 8) + 1);
            }
        }
        if (PlayerColor == "White")
        {
        }
    }
    //StoneAI生成
    void Summoning_StoneAI()
    {
        //Debug.Log("Summoning_StoneAI was called");

        if (PlayerColor == "Black")
        {
            IntList_PositionStoneWhite = new List<int> { };



            int PositionStoneWhite = IntList_Color.IndexOf(2, 0);
            if (PositionStoneWhite >= 0)
            {
                IntList_PositionStoneWhite.Add(PositionStoneWhite);

                while (PositionStoneWhite >= 0)
                {
                    PositionStoneWhite = IntList_Color.IndexOf(2, PositionStoneWhite + 1);

                    if (PositionStoneWhite >= 0)
                    {
                        IntList_PositionStoneWhite.Add(PositionStoneWhite);
                    }
                }
            }



            for (int i = 0; i < IntList_PositionStoneWhite.Count; i++)
            {
                GameObject GameObject_StoneWhite = Instantiate(StoneWhite) as GameObject;
                GameObject_StoneWhite.name = "StoneAI";
                GameObject_StoneWhite.tag = "StoneAI";
                GameObject_StoneWhite.transform.position = Transform_Stone.transform.position + new Vector3(IntList_PositionStoneWhite[i] % 8 + 1, 0, Mathf.FloorToInt(IntList_PositionStoneWhite[i] / 8) + 1);
            }
        }
        if (PlayerColor == "White")
        {

        }
    }



    //Cursor消去
    void Destruction_Cursor()
    {
        //Debug.Log("Destruction_Cursor was called");

        Destroy(GameObject.FindWithTag("Cursor"));
    }
    //StonePlayer消去
    void Destruction_StonePlayer()
    {
        //Debug.Log("Destruction_StonePlayer was called");

        GameObject[] GameObject_StonePlayers = GameObject.FindGameObjectsWithTag("StonePlayer");
        foreach (GameObject GameObject_OneOfStonePlayers in GameObject_StonePlayers)
        {
            Destroy(GameObject_OneOfStonePlayers);
        }
    }
    //StoneAI消去
    void Destruction_StoneAI()
    {
        //Debug.Log("Destruction_StoneAI was called");

        GameObject[] GameObject_StoneAIs = GameObject.FindGameObjectsWithTag("StoneAI");
        foreach (GameObject GameObject_OneOfStoneAIs in GameObject_StoneAIs)
        {
            Destroy(GameObject_OneOfStoneAIs);
        }
    }



}
